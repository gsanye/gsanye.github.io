{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/background_pic/wallhaven-0p6mm9-三角浅蓝.webp","path":"images/background_pic/wallhaven-0p6mm9-三角浅蓝.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-132j7v-拼图软润.webp","path":"images/background_pic/wallhaven-132j7v-拼图软润.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-2erpym-电子线.webp","path":"images/background_pic/wallhaven-2erpym-电子线.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-3l65w9-蓝天路明亮.webp","path":"images/background_pic/wallhaven-3l65w9-蓝天路明亮.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-49vwlk-三角红上帝.webp","path":"images/background_pic/wallhaven-49vwlk-三角红上帝.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-3q9qky-夜路边.webp","path":"images/background_pic/wallhaven-3q9qky-夜路边.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-4379q6-电塔道路.webp","path":"images/background_pic/wallhaven-4379q6-电塔道路.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-4g1jwl-心跳线.webp","path":"images/background_pic/wallhaven-4g1jwl-心跳线.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-4g6pm3-三角蓝橙.webp","path":"images/background_pic/wallhaven-4g6pm3-三角蓝橙.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-6lkdmq-傍晚云.webp","path":"images/background_pic/wallhaven-6lkdmq-傍晚云.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-6lklwl-朝阳.webp","path":"images/background_pic/wallhaven-6lklwl-朝阳.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-6lkq5l-草原少年.webp","path":"images/background_pic/wallhaven-6lkq5l-草原少年.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-8g35ek-草原电线杆.webp","path":"images/background_pic/wallhaven-8g35ek-草原电线杆.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-gj5e23-三角蓝绿.webp","path":"images/background_pic/wallhaven-gj5e23-三角蓝绿.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-je5pxy-眼睛窥视.webp","path":"images/background_pic/wallhaven-je5pxy-眼睛窥视.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-kxmp76-色道调料盘.webp","path":"images/background_pic/wallhaven-kxmp76-色道调料盘.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-mldl19-黑洞.webp","path":"images/background_pic/wallhaven-mldl19-黑洞.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-n68k5l-正方形蓝.webp","path":"images/background_pic/wallhaven-n68k5l-正方形蓝.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-nz7ydo三角灰绿.webp","path":"images/background_pic/wallhaven-nz7ydo三角灰绿.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-p2e71j-三角深蓝.webp","path":"images/background_pic/wallhaven-p2e71j-三角深蓝.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-po8k89-红毛玻璃花红色.webp","path":"images/background_pic/wallhaven-po8k89-红毛玻璃花红色.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-qdj5rl-点线对指.webp","path":"images/background_pic/wallhaven-qdj5rl-点线对指.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-qr6z7d-夕阳棕榈树.webp","path":"images/background_pic/wallhaven-qr6z7d-夕阳棕榈树.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-vg2y5p-多彩玻璃暗.webp","path":"images/background_pic/wallhaven-vg2y5p-多彩玻璃暗.webp","modified":0,"renderable":0},{"_id":"source/images/background_pic/wallhaven-zxg8ky-三角紫红.webp","path":"images/background_pic/wallhaven-zxg8ky-三角紫红.webp","modified":0,"renderable":0},{"_id":"source/images/top_pic/helloworld.webp","path":"images/top_pic/helloworld.webp","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/about.txt","path":"images/icon/favicon_io_alien_monster/about.txt","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/android-chrome-192x192.png","path":"images/icon/favicon_io_alien_monster/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/android-chrome-512x512.png","path":"images/icon/favicon_io_alien_monster/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/apple-touch-icon.png","path":"images/icon/favicon_io_alien_monster/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/favicon-16x16.png","path":"images/icon/favicon_io_alien_monster/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/favicon-32x32.png","path":"images/icon/favicon_io_alien_monster/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/favicon.ico","path":"images/icon/favicon_io_alien_monster/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_alien_monster/site.webmanifest","path":"images/icon/favicon_io_alien_monster/site.webmanifest","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/about.txt","path":"images/icon/favicon_io_beating_heart/about.txt","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/android-chrome-192x192.png","path":"images/icon/favicon_io_beating_heart/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/android-chrome-512x512.png","path":"images/icon/favicon_io_beating_heart/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/apple-touch-icon.png","path":"images/icon/favicon_io_beating_heart/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/favicon-16x16.png","path":"images/icon/favicon_io_beating_heart/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/favicon-32x32.png","path":"images/icon/favicon_io_beating_heart/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/favicon.ico","path":"images/icon/favicon_io_beating_heart/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_beating_heart/site.webmanifest","path":"images/icon/favicon_io_beating_heart/site.webmanifest","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/about.txt","path":"images/icon/favicon_io_cat_with_wry_smile/about.txt","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/android-chrome-192x192.png","path":"images/icon/favicon_io_cat_with_wry_smile/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/android-chrome-512x512.png","path":"images/icon/favicon_io_cat_with_wry_smile/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/apple-touch-icon.png","path":"images/icon/favicon_io_cat_with_wry_smile/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/favicon-16x16.png","path":"images/icon/favicon_io_cat_with_wry_smile/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/favicon-32x32.png","path":"images/icon/favicon_io_cat_with_wry_smile/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/favicon.ico","path":"images/icon/favicon_io_cat_with_wry_smile/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/site.webmanifest","path":"images/icon/favicon_io_cat_with_wry_smile/site.webmanifest","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/about.txt","path":"images/icon/favicon_io_goblin/about.txt","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/android-chrome-192x192.png","path":"images/icon/favicon_io_goblin/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/android-chrome-512x512.png","path":"images/icon/favicon_io_goblin/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/apple-touch-icon.png","path":"images/icon/favicon_io_goblin/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/favicon-16x16.png","path":"images/icon/favicon_io_goblin/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/favicon-32x32.png","path":"images/icon/favicon_io_goblin/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/favicon.ico","path":"images/icon/favicon_io_goblin/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_goblin/site.webmanifest","path":"images/icon/favicon_io_goblin/site.webmanifest","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/about.txt","path":"images/icon/favicon_io_robot/about.txt","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/android-chrome-192x192.png","path":"images/icon/favicon_io_robot/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/android-chrome-512x512.png","path":"images/icon/favicon_io_robot/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/apple-touch-icon.png","path":"images/icon/favicon_io_robot/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/favicon-16x16.png","path":"images/icon/favicon_io_robot/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/favicon-32x32.png","path":"images/icon/favicon_io_robot/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/favicon.ico","path":"images/icon/favicon_io_robot/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_robot/site.webmanifest","path":"images/icon/favicon_io_robot/site.webmanifest","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/about.txt","path":"images/icon/favicon_io_ogre/about.txt","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/android-chrome-192x192.png","path":"images/icon/favicon_io_ogre/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/android-chrome-512x512.png","path":"images/icon/favicon_io_ogre/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/apple-touch-icon.png","path":"images/icon/favicon_io_ogre/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/favicon-16x16.png","path":"images/icon/favicon_io_ogre/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/favicon-32x32.png","path":"images/icon/favicon_io_ogre/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/favicon.ico","path":"images/icon/favicon_io_ogre/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/icon/favicon_io_ogre/site.webmanifest","path":"images/icon/favicon_io_ogre/site.webmanifest","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/AQS使用以及结构概览.webp","path":"images/post/java/juc/aqs/aqs详解/AQS使用以及结构概览.webp","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/ReentrantLock和AQS的组合示意图.webp","path":"images/post/java/juc/aqs/aqs详解/ReentrantLock和AQS的组合示意图.webp","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-head后继节点.png","path":"images/post/java/juc/aqs/aqs详解/取消尝试获取的node-head后继节点.png","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/acquire流程图.webp","path":"images/post/java/juc/aqs/aqs详解/acquire流程图.webp","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-中间节点.png","path":"images/post/java/juc/aqs/aqs详解/取消尝试获取的node-中间节点.png","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-尾节点.png","path":"images/post/java/juc/aqs/aqs详解/取消尝试获取的node-尾节点.png","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/同步队列示意图.webp","path":"images/post/java/juc/aqs/aqs详解/同步队列示意图.webp","modified":0,"renderable":0},{"_id":"source/images/post/java/juc/aqs/aqs详解/独占式和共享式组件的同步状态区别.webp","path":"images/post/java/juc/aqs/aqs详解/独占式和共享式组件的同步状态区别.webp","modified":0,"renderable":0},{"_id":"source/images/post/python/python-basics/python-entry/basic/python-memory.png","path":"images/post/python/python-basics/python-entry/basic/python-memory.png","modified":0,"renderable":0}],"Cache":[{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"e7e2aebec046dbeb5c8bddc9c3533a1c1f06b1ae","modified":1754347635546},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"a394861e4dd3c8ac366be62af0f4ad752f921ef3","modified":1754347635227},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"97a55ae0f4784ca80c7862da36da22b54be41ae5","modified":1754347635560},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1754347635229},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1754347635555},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1754347635552},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1754347635551},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"3cdeb46ad36f3b76703b4f39c72a8aa1a15425cb","modified":1754347635565},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"70d6df7cf6472799faf4778405b332101ea822c1","modified":1754347635558},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"bde04a89febd0dbf320eac4da4ecd81624f2f29f","modified":1754347635556},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"c93e510c7b119173226f3b0afb87c5f553f6eea8","modified":1754347635566},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"b59fedd9e1e65112d6a90dc7f55179085d0f1a6a","modified":1754347635567},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1754347635326},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1754347635352},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1754347635451},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1754347634704},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1754347635228},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1754347635464},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1754347635479},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1754347635467},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1754347635548},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"e1611a30df80cbe7ecf60be2e0cdd816ecabdd03","modified":1754347635292},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"d30413aa2a17bf31e4084f1096523ead7f2a6bf1","modified":1754347635398},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1754347635413},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1754347635553},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1754347635549},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1754347635455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"062137cb4d078b27680da1ae28d524a9c963eebc","modified":1754347635464},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"3617840416f26078117f760579fb544dce07e1bc","modified":1754347635473},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"ba98361b9d469076bfb045e5ff42eaf764a38fb1","modified":1754347635193},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1754347635562},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1754347634933},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1754347635564},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1754347635476},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1754347635000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1754347635027},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1754347635004},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"cead7891fbc0a53ffca4d68124e68efa855354a5","modified":1754347635169},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1754347635203},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1754347635225},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1754347635187},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1754347635195},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1754347634998},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1754347635002},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1754347635008},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1754347635023},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1754347635018},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1754347635037},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1754347635039},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1754347635174},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1754347635177},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1754347635198},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1754347635202},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1754347635211},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1754347635214},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1754347635533},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1754347635545},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1754347634988},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"d2878483c160999240e969a34e3ddc51a780821b","modified":1754347634985},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1754347635034},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1754347635020},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"b9af69d8998d748178348d93a19daccff0550c56","modified":1754347635179},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1754347635197},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1754347635200},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1754347635162},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"b2ed9937fd00459c0e569db709a26cf8738ab18d","modified":1754347635223},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1754347634911},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1754347635217},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1754347634887},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1754347635418},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1754347635457},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1754347635467},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1754347635266},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f478a82ba4c15d4f6a5db38eca5c61f7054fa71d","modified":1754347635460},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1754347635477},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1754347635461},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"c2156c77a011b20fafd34f03ca073397c21b099f","modified":1754347635315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1754347635378},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1754347635377},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1754347635412},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1754347635469},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1754347635468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1754347635476},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"8ef72cd688999bf3915be6724c12700a1e2724d9","modified":1754347635478},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1754347634874},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1754347635402},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1754347635463},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1754347635335},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1754347635452},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1754347635438},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1754347635278},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1754347635384},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1754347635351},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1754347635396},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1754347635475},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1754347635462},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1754347635480},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1754347635466},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1754347635472},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1754347635392},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1754347635320},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"d29ee6a07e6716c0dc1d4533c87b19b6076fefd3","modified":1754347635465},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1754347635468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1754347635478},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1754347635484},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1754347635341},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1754347635339},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1754347635337},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1754347635342},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1754347635340},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1754347635343},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1754347635346},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1754347635344},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1754347635345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1754347635348},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1754347635347},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1754347635350},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1754347635349},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1754347635451},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1754347635520},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1754347635503},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1754347635528},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1754347635499},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"5692bcf8929f7ef12b10d860da6cb90ca55752c0","modified":1754347635517},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1754347635504},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"7536c44e78115559a996d0384adec38b78d8dc25","modified":1754347635521},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1754347635536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1754347635535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1754347635537},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1754347635538},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1754347635538},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1754347635542},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1754347635539},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1754347635544},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1754347635526},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1754347635507},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1754347635543},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1754347635538},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1754347635491},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1754347635502},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1754347635495},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1754347635515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"fc26e980fedde31644ebf878967f66ef9ba32be2","modified":1754347635527},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1754347635505},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1754347635541},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1754347635543},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1754347635530},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1754347635535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1754347635521},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1754347635494},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1754347635522},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1754347635522},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1754347635533},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1754347635534},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1754347635535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1754347635542},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1754347635541},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1754347635545},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1754347634795},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1754347635045},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"7df4d27cf9e576c6b9c1e4f76a100a41749ca8bb","modified":1754347635286},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1754347635443},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1754347635329},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1754347635386},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1754347635502},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1754347635469},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1754347634960},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"be45b522286bbc64724341f23a5056ad24d3f796","modified":1754347635482},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1754347635395},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1754347635488},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1754347635485},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1754347635381},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1754347635374},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1754347635447},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1754347635480},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1754347635331},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1754347635388},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1754347635389},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1754347635394},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1754347635403},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1754347635404},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1754347635453},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"9d84a681289175dec75a85f301d2fc9ce1b2bb7a","modified":1754347635456},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"332b532bafbaf369fde840883b77e5a23d050a39","modified":1754347635448},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1754347635444},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1754347635483},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"ea9766439b6b1936306916a8b08d2681afbc8ea9","modified":1754347635470},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1754347635486},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1754347635484},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1754347635449},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1754347635489},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1754347635359},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1754347635454},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1754347635457},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1754347635376},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1754347635459},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1754347635333},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1754347635384},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1754347635410},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1754347635449},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1754347635470},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1754347635481},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1754347635488},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1754347635489},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1754347635310},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1754347635450},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1754347635390},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1754347635450},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1754347635298},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1754347635473},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1754347635456},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1754347635528},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1754347635510},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1754347635529},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1754347635514},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1754347635534},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1754347635258},{"_id":"source/categories/index.md","hash":"1544aac8ee39fa9a1e4db0eb41bf9015c5bc7519","modified":1754346889580},{"_id":"source/_posts/hello-world.md","hash":"b3131d9249646037dd51c5b7c864d2390411424e","modified":1755039648335},{"_id":"source/images/background_pic/wallhaven-132j7v-拼图软润.webp","hash":"8eae32dad183f54b55c578d0cc028d9d2d2fd35e","modified":1754405303944},{"_id":"source/tags/index.md","hash":"07d5a7f5ba3304156d77d3a15ca052c68bdfa0c4","modified":1754346890017},{"_id":"source/link/index.md","hash":"901a65b88924400c27d0acd0476b164d66c9b3b2","modified":1754346890017},{"_id":"source/images/background_pic/wallhaven-0p6mm9-三角浅蓝.webp","hash":"a6b618d637eed6e2855b37cc27ea8b7ce2af3907","modified":1754404629868},{"_id":"source/images/background_pic/wallhaven-4g6pm3-三角蓝橙.webp","hash":"d033be7024c5aaa509d9e807b9d803b474e5dd71","modified":1754405772918},{"_id":"source/images/background_pic/wallhaven-4g1jwl-心跳线.webp","hash":"6d33654de1765334e7d01aedade2148d3a13ac73","modified":1754405066867},{"_id":"source/images/background_pic/wallhaven-gj5e23-三角蓝绿.webp","hash":"4fd497dcf8796c8f36b17fd80180dfefa76c52f3","modified":1754405359463},{"_id":"source/images/background_pic/wallhaven-n68k5l-正方形蓝.webp","hash":"a0744a6741736fe4e03e2cb4fbdcc2d9cac0a230","modified":1754405706894},{"_id":"source/images/background_pic/wallhaven-nz7ydo三角灰绿.webp","hash":"5abcef7922ed2b94df71650a326c23d412634e9f","modified":1754405506330},{"_id":"source/images/background_pic/wallhaven-p2e71j-三角深蓝.webp","hash":"f7bd1e874ecc9ea5e4c079434b496049b280a069","modified":1754405685566},{"_id":"source/images/background_pic/wallhaven-po8k89-红毛玻璃花红色.webp","hash":"e9e6a44d5d379de9c0a0f81f6ec26725bfa55164","modified":1754405533949},{"_id":"source/images/icon/favicon_io_alien_monster/about.txt","hash":"e2ec8821ec9b473a82a7be5b665e28ffc405790d","modified":1754346890002},{"_id":"source/images/icon/favicon_io_alien_monster/android-chrome-192x192.png","hash":"a3469ae053c0533ff4597b150245bdf17d3b4531","modified":1754346890002},{"_id":"source/images/background_pic/wallhaven-zxg8ky-三角紫红.webp","hash":"e1a1fa63302dc5346c2e53c2432a584ba2d47528","modified":1754405653719},{"_id":"source/images/icon/favicon_io_alien_monster/favicon-16x16.png","hash":"1fc25c3e12a97e71a179939678dc3386d431a61a","modified":1754346890003},{"_id":"source/images/icon/favicon_io_alien_monster/android-chrome-512x512.png","hash":"fcd5ad96b1cfa686fc05d7ef78053ad5b9e3c95f","modified":1754346890002},{"_id":"source/images/top_pic/helloworld.webp","hash":"f6e075382b0b3fa448b971d46087104c8c03edd6","modified":1754346890017},{"_id":"source/images/icon/favicon_io_alien_monster/favicon-32x32.png","hash":"b5e5d9a993f344ed48c1263f147289c1f98a93b0","modified":1754346890003},{"_id":"source/images/icon/favicon_io_beating_heart/about.txt","hash":"75a9f0c9a1562910e290cfc7713c4be46c9409dd","modified":1754346890004},{"_id":"source/images/icon/favicon_io_alien_monster/favicon.ico","hash":"a7391692b2f421930e1acda914ae85093bbd15a1","modified":1754346890003},{"_id":"source/images/icon/favicon_io_beating_heart/android-chrome-192x192.png","hash":"1403950f1a4050c128c721f6411b24de9ba0012d","modified":1754346890004},{"_id":"source/images/icon/favicon_io_beating_heart/apple-touch-icon.png","hash":"dcf0da0ea3f22c82373a0f9fc246553f939cb35a","modified":1754346890006},{"_id":"source/images/icon/favicon_io_beating_heart/favicon-16x16.png","hash":"7e3688179392bb3313f137b98103af8a13e80943","modified":1754346890006},{"_id":"source/images/icon/favicon_io_alien_monster/apple-touch-icon.png","hash":"6a58fa7a6ee38d4f94765024df470187558d6e16","modified":1754346890003},{"_id":"source/images/icon/favicon_io_alien_monster/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1754346890004},{"_id":"source/images/icon/favicon_io_beating_heart/android-chrome-512x512.png","hash":"38defd6d27cf036569f338d0acf6d8e0df471c11","modified":1754346890005},{"_id":"source/images/icon/favicon_io_beating_heart/favicon-32x32.png","hash":"695b198cc5cf29b8b31f83b812f5b8eac92b30de","modified":1754346890006},{"_id":"source/images/icon/favicon_io_beating_heart/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1754346890006},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/about.txt","hash":"12a8ba5c815c9225c2376b9d515e90525e2b9e07","modified":1754346890007},{"_id":"source/images/icon/favicon_io_beating_heart/favicon.ico","hash":"a2c1cfab1d178e0343e419e3a2f23c673bafffa9","modified":1754346890006},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/favicon-32x32.png","hash":"5f2e848fcf839daf45da1be78bc586253a336d5d","modified":1754346890008},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/android-chrome-192x192.png","hash":"29d5420995a8d7097b9a10beeb3a73bda01e2c79","modified":1754346890007},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/android-chrome-512x512.png","hash":"043d68829c117e4d8a1d3101ef2e7416f72f44e3","modified":1754346890008},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/favicon-16x16.png","hash":"6900922e089313cbd9b191177421f12ffa2fe3e9","modified":1754346890008},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/apple-touch-icon.png","hash":"726489dd30f1b2d6a3fc339e2ac5a81096dcdc95","modified":1754346890008},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/favicon.ico","hash":"a511d5b4757e43e98bc0a1578a25122fbfce9a30","modified":1754346890009},{"_id":"source/images/icon/favicon_io_cat_with_wry_smile/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1754346890009},{"_id":"source/images/icon/favicon_io_goblin/about.txt","hash":"ad3f5ed94d859747f24533c9133c222708de9aaa","modified":1754346890009},{"_id":"source/images/icon/favicon_io_goblin/android-chrome-192x192.png","hash":"d934a505e22b86c54c8694411bde96b30dc63a12","modified":1754346890010},{"_id":"source/images/icon/favicon_io_goblin/apple-touch-icon.png","hash":"5ab65e3211cc29388ea3a9a30e76afe27a2079bc","modified":1754346890010},{"_id":"source/images/icon/favicon_io_goblin/favicon-16x16.png","hash":"27c45c35b2a55da32f858543517dd282df1c9a39","modified":1754346890010},{"_id":"source/images/icon/favicon_io_goblin/android-chrome-512x512.png","hash":"bd68272d6cf8dede713f7992f538a42d4539dba9","modified":1754346890010},{"_id":"source/images/icon/favicon_io_goblin/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1754346890011},{"_id":"source/images/icon/favicon_io_robot/about.txt","hash":"65a65ae9d6e91ea4bb77e7294d3a8713216b116c","modified":1754346890014},{"_id":"source/images/icon/favicon_io_goblin/favicon-32x32.png","hash":"336fc071e8ccd966c0cb2e15ba8d1f52e49307b2","modified":1754346890010},{"_id":"source/images/icon/favicon_io_goblin/favicon.ico","hash":"ff0cca5f930aa1dce75c8be9d50c70fb04904d24","modified":1754346890011},{"_id":"source/images/icon/favicon_io_robot/android-chrome-192x192.png","hash":"169a7b635f443ce560c08eef0604885a113a8615","modified":1754346890015},{"_id":"source/images/icon/favicon_io_robot/apple-touch-icon.png","hash":"6bdbd5eae0c283b27436c49f211a7b5c52b5a9e0","modified":1754346890015},{"_id":"source/images/icon/favicon_io_robot/android-chrome-512x512.png","hash":"324d00add0c7e5bf6cb29ddf53e429497e121fdb","modified":1754346890015},{"_id":"source/images/icon/favicon_io_robot/favicon-32x32.png","hash":"346abc62c75e81c74b4ee070a280ade0e25d8af8","modified":1754346890016},{"_id":"source/images/icon/favicon_io_ogre/about.txt","hash":"f01d40dfff11f26fc1dd90ab0bfb2cc2449f65d5","modified":1754346890011},{"_id":"source/images/icon/favicon_io_robot/favicon-16x16.png","hash":"5bd71141a84251b41a1df14ff80cbf95a9640109","modified":1754346890016},{"_id":"source/images/icon/favicon_io_robot/favicon.ico","hash":"8f3ff39c0dc503aaa2648c5ce830bba44fa6d456","modified":1754346890016},{"_id":"source/images/icon/favicon_io_ogre/android-chrome-192x192.png","hash":"e92d833df7b47917f982e26c4f235499fcb67c1a","modified":1754346890012},{"_id":"source/images/icon/favicon_io_robot/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1754346890016},{"_id":"source/images/icon/favicon_io_ogre/apple-touch-icon.png","hash":"5f4b58373f5f459caa38165cb87a1e93a8fb816e","modified":1754346890013},{"_id":"source/images/icon/favicon_io_ogre/favicon-16x16.png","hash":"9ee7c443e376dc6a88f468e4777bf9e8530f9874","modified":1754346890013},{"_id":"source/images/icon/favicon_io_ogre/favicon-32x32.png","hash":"d682094b7e22b4b9c2b41b6c9b8b7fda8b2bc9e9","modified":1754346890013},{"_id":"source/_posts/java/juc/aqs/4.AQS & Lock 的可中断、可超时 获取.md","hash":"0507f74b6b3a7473c5ae43fd9d6a341f7cac2686","modified":1755126821048},{"_id":"source/images/icon/favicon_io_ogre/favicon.ico","hash":"fe4b1c58d0b60e661c8d4c81470aad83c325acf1","modified":1754346890013},{"_id":"source/_posts/java/juc/aqs/3.AQS.release & Lock.unlock 方法实现详解.md","hash":"a804d16cc140d165adca03bebcabde7324f4ddce","modified":1755126818631},{"_id":"source/images/icon/favicon_io_ogre/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1754346890013},{"_id":"source/_posts/java/juc/aqs/2.AQS.acquire&Lock.lock方法实现详解.md","hash":"5b837f77de3f875aee221f5440b1cde415add571","modified":1755126730917},{"_id":"source/_posts/python/python-basics/computer-basics/computer-basics.md","hash":"91571bbe2920761f5f3ff5f8f33ece3121eec110","modified":1755040361264},{"_id":"source/_posts/java/juc/aqs/1.AQS使用以及结构概览.md","hash":"dd763cab644a9296477ff52ccb39db18ad154518","modified":1755125153761},{"_id":"source/_posts/python/python-basics/python-entry/基本语法&数据类型&对象内存结构.md","hash":"9b4c84965fbc2699dcf8efb323f10ddf4af189ca","modified":1755040361297},{"_id":"source/images/post/java/juc/aqs/aqs详解/ReentrantLock和AQS的组合示意图.webp","hash":"33bb071cb3c05e30bf0864ef52c8f743bd40723a","modified":1755124735166},{"_id":"source/_posts/python/python-basics/python-entry/计算机语言&Python介绍.md","hash":"c5f4d5d2bd12fd87fa3dc8c3378f3c01204962b4","modified":1755040361264},{"_id":"source/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-head后继节点.png","hash":"2bfa50e52906b46f33c97a3685653e9698872053","modified":1755125861829},{"_id":"source/_posts/python/python-basics/python-entry/运算符(操作符).md","hash":"c7c077ad946612f4028664b926471beb50f7b5a9","modified":1755040361264},{"_id":"source/images/post/java/juc/aqs/aqs详解/AQS使用以及结构概览.webp","hash":"7efbe1077b7d3806b11da9e0c20b729796403842","modified":1755124845722},{"_id":"source/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-尾节点.png","hash":"3262be313db9fef98de391973b25877ca0278fe6","modified":1755125790916},{"_id":"source/images/post/java/juc/aqs/aqs详解/acquire流程图.webp","hash":"fde54e5d6df7e030c694b6f1d286bdaca22a8806","modified":1755125912120},{"_id":"source/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-中间节点.png","hash":"86fb805abc6de8d3e41f93ff7f897654282275c1","modified":1755125883995},{"_id":"source/images/post/java/juc/aqs/aqs详解/独占式和共享式组件的同步状态区别.webp","hash":"adc26ac49b1c73b14ba7b8bee149066abaa190a7","modified":1755124866554},{"_id":"source/images/post/java/juc/aqs/aqs详解/同步队列示意图.webp","hash":"b5620d0bd40135411622febc3468e29a6289f9b9","modified":1755124823556},{"_id":"source/images/post/python/python-basics/python-entry/basic/python-memory.png","hash":"02b1cd0c5cd8581b118171730898f7d18d3ac062","modified":1754520573272},{"_id":"source/images/background_pic/wallhaven-6lkq5l-草原少年.webp","hash":"e2ab6cb4db9e99226e24903c62b71fbb8ee62129","modified":1754405174547},{"_id":"source/images/background_pic/wallhaven-6lklwl-朝阳.webp","hash":"1d20b59e2ce9907d1777a909382e4657533cdce1","modified":1754405153236},{"_id":"source/images/background_pic/wallhaven-6lkdmq-傍晚云.webp","hash":"4219d1efaf427a5ad024384a7e8255c397b8092e","modified":1754405133133},{"_id":"source/images/background_pic/wallhaven-qdj5rl-点线对指.webp","hash":"7711f87e505f77a38016a54e514c2503b10adf45","modified":1754405551895},{"_id":"source/images/background_pic/wallhaven-mldl19-黑洞.webp","hash":"397402c11df2c4e7f005f1c83880194ddcdf4116","modified":1754405428335},{"_id":"source/images/icon/favicon_io_ogre/android-chrome-512x512.png","hash":"ab7038c0b7cb71c4bf3316705330e7ff450862f3","modified":1754346890012},{"_id":"source/images/background_pic/wallhaven-2erpym-电子线.webp","hash":"c95e1a71aa43b672ffc07a38205741f5841950b5","modified":1754404947014},{"_id":"source/images/background_pic/wallhaven-3q9qky-夜路边.webp","hash":"27eba78cc995cdeab302242a659ad4a30237f3a9","modified":1754405038371},{"_id":"source/images/background_pic/wallhaven-je5pxy-眼睛窥视.webp","hash":"7251e18eb5ef524879ece98a6cbbfb31d2cf7a48","modified":1754405383460},{"_id":"source/images/background_pic/wallhaven-qr6z7d-夕阳棕榈树.webp","hash":"ebaaad24a322d493aaf8e487337269720c036d65","modified":1754405571188},{"_id":"source/images/background_pic/wallhaven-4379q6-电塔道路.webp","hash":"3df5aa43da481dd62af4ee21ae083b6492319d0d","modified":1754405339194},{"_id":"source/images/background_pic/wallhaven-vg2y5p-多彩玻璃暗.webp","hash":"fb7803d99d2c511ea71f18dbd338fa3c13dbc2e7","modified":1754405593761},{"_id":"source/images/background_pic/wallhaven-8g35ek-草原电线杆.webp","hash":"10dc1444bf51df9f5bc1890b9e28c04fe9651935","modified":1754405746206},{"_id":"source/images/background_pic/wallhaven-kxmp76-色道调料盘.webp","hash":"547d8f675e69c7bac720f98639aedc3262d32654","modified":1754405405030},{"_id":"source/images/background_pic/wallhaven-49vwlk-三角红上帝.webp","hash":"05ca39295fbf571bd66c362d112c37afe97dc5d5","modified":1754405265507},{"_id":"source/images/background_pic/wallhaven-3l65w9-蓝天路明亮.webp","hash":"12830daf48615fe1c4442ac70f4546e04ae8f108","modified":1754404971982},{"_id":"public/search.json","hash":"fda15ec44fb068591be3287852d2542c135bd62b","modified":1755126825938},{"_id":"public/categories/index.html","hash":"b7a7aee8f5743b62fddcd83341ee8a9a40a8f651","modified":1755126825938},{"_id":"public/link/index.html","hash":"55b2f77766c72af8f66640372268ebb51b7d4857","modified":1755126825938},{"_id":"public/tags/index.html","hash":"68702abae6d027ce35a66b702445eb525788eb07","modified":1755126825938},{"_id":"public/websit/hexo/hello-world/index.html","hash":"50593e072c1e7596cc038ae2546ecc2e36c896e6","modified":1755126825938},{"_id":"public/python/python-basics/computer-basics/python-python-basics-computer-basics-computer-basics/index.html","hash":"23d224ccec177e3af38be5e6686f7ac3b249c744","modified":1755126825938},{"_id":"public/python/python-basics/python-entry/python-python-basics-python-entry-计算机语言-Python介绍/index.html","hash":"9c33a23ffc9611871947ed5d05456bf94e7b814c","modified":1755126825938},{"_id":"public/python/python-basics/python-entry/python-python-basics-python-entry-基本语法-数据类型-对象内存结构/index.html","hash":"a00590844bb4a05e0e95103b54d5f5aa1c50d0a3","modified":1755126825938},{"_id":"public/python/python-basics/python-entry/python-python-basics-python-entry-运算符-操作符/index.html","hash":"03fad6372ea0badb42535fec5e077a15fe488113","modified":1755126825938},{"_id":"public/java/juc/aqs/java-juc-aqs-1-AQS使用以及结构概览/index.html","hash":"f2ca47ddf4938b311569a6828f8ab4183721eb6a","modified":1755126825938},{"_id":"public/java/juc/aqs/java-juc-aqs-2-AQS-acquire-Lock-lock方法实现详解/index.html","hash":"91c5969a9694f3f8db7e5c9ea2d491b4388b5dbd","modified":1755126825938},{"_id":"public/java/juc/aqs/java-juc-aqs-3-AQS-release-Lock-unlock-方法实现详解/index.html","hash":"47bae7702b65ceeb3b1e0deb79f13fd5305c9d47","modified":1755126825938},{"_id":"public/java/juc/aqs/java-juc-aqs-4-AQS-Lock-的可中断、可超时-获取/index.html","hash":"17985e24dda4f40ec27e3effd06fdac00d5fea17","modified":1755126825938},{"_id":"public/archives/index.html","hash":"4215cb9e5cbb5a6c020695448ce60aee193bfa60","modified":1755126825938},{"_id":"public/archives/2025/index.html","hash":"d66b2b2f91e597a5b18abdd5e0fd9585ad87398d","modified":1755126825938},{"_id":"public/archives/2025/07/index.html","hash":"de1401bed8dd9291e8c44060aeee8d3b006e5827","modified":1755126825938},{"_id":"public/archives/2025/08/index.html","hash":"c1321d225da1dd5c574d05663c82d80878529ca5","modified":1755126825938},{"_id":"public/index.html","hash":"ee255cb62e04114ff79be62e6179f60cfa3e9413","modified":1755126825938},{"_id":"public/categories/websit/index.html","hash":"7e81850cb9f9c56f9b392b46e453e100c5807b03","modified":1755126825938},{"_id":"public/categories/java/index.html","hash":"ee0bd71c521b71d51e62c7837681837c65a6e7ca","modified":1755126825938},{"_id":"public/categories/websit/hexo/index.html","hash":"53c991385d15dc074213826b9d7fdaf42699e38e","modified":1755126825938},{"_id":"public/categories/python/index.html","hash":"bd1fca2adc2690218fc9788cba10d2a24c717b28","modified":1755126825938},{"_id":"public/categories/java/juc/index.html","hash":"e56732f3eeb4fe368ea46274a8f26dc607229429","modified":1755126825938},{"_id":"public/categories/python/python-basics/index.html","hash":"9e9037159cfa8ee01794ae615824f9d3e650fd30","modified":1755126825938},{"_id":"public/categories/java/juc/aqs/index.html","hash":"32c851b09bb87da5c45ba1cd0b2b361316ebd401","modified":1755126825938},{"_id":"public/categories/python/python-basics/computer-basics/index.html","hash":"23c2d0b52c43b2607106ad766f459108bc3e7035","modified":1755126825938},{"_id":"public/categories/python/python-basics/python-entry/index.html","hash":"1c367f7714fbd6dcaa95aa024480ec991eee984b","modified":1755126825938},{"_id":"public/tags/test/index.html","hash":"b0899137e6ea0a321ed7a9d70c44382e3f38e332","modified":1755126825938},{"_id":"public/tags/java/index.html","hash":"5f6693d601c9e26a84407215b26b28596d5a80a7","modified":1755126825938},{"_id":"public/tags/juc/index.html","hash":"31425a83febec370683a2bd2b402e5bc7e89983c","modified":1755126825938},{"_id":"public/tags/python/index.html","hash":"30c32cf6f959700598147f239dd4344d506a8dbf","modified":1755126825938},{"_id":"public/tags/basics/index.html","hash":"728b2985a088759641595c7722e958d07e927684","modified":1755126825938},{"_id":"public/tags/computer/index.html","hash":"ab8aea373726096fe749450705edc45d7c403ce5","modified":1755126825938},{"_id":"public/tags/grammar/index.html","hash":"4e3eb68eefbe7fe0ea0e6a182da5e446a61f3921","modified":1755126825938},{"_id":"public/tags/data-structure/index.html","hash":"494e1ff91f26530e3eaa6c6f34abda0fdf373545","modified":1755126825938},{"_id":"public/tags/data-type/index.html","hash":"f7d476958fcf9cd3f4c5bd1ac7361622cd17186b","modified":1755126825938},{"_id":"public/tags/operator/index.html","hash":"167b9982c4b51d58f8f2eef67ae0b827153b8625","modified":1755126825938},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1755126825938},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1755126825938},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-0p6mm9-三角浅蓝.webp","hash":"a6b618d637eed6e2855b37cc27ea8b7ce2af3907","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-132j7v-拼图软润.webp","hash":"8eae32dad183f54b55c578d0cc028d9d2d2fd35e","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-4g1jwl-心跳线.webp","hash":"6d33654de1765334e7d01aedade2148d3a13ac73","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-4g6pm3-三角蓝橙.webp","hash":"d033be7024c5aaa509d9e807b9d803b474e5dd71","modified":1755126825938},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-gj5e23-三角蓝绿.webp","hash":"4fd497dcf8796c8f36b17fd80180dfefa76c52f3","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-n68k5l-正方形蓝.webp","hash":"a0744a6741736fe4e03e2cb4fbdcc2d9cac0a230","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-nz7ydo三角灰绿.webp","hash":"5abcef7922ed2b94df71650a326c23d412634e9f","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-po8k89-红毛玻璃花红色.webp","hash":"e9e6a44d5d379de9c0a0f81f6ec26725bfa55164","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-p2e71j-三角深蓝.webp","hash":"f7bd1e874ecc9ea5e4c079434b496049b280a069","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/about.txt","hash":"e2ec8821ec9b473a82a7be5b665e28ffc405790d","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-zxg8ky-三角紫红.webp","hash":"e1a1fa63302dc5346c2e53c2432a584ba2d47528","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/android-chrome-512x512.png","hash":"fcd5ad96b1cfa686fc05d7ef78053ad5b9e3c95f","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/android-chrome-192x192.png","hash":"a3469ae053c0533ff4597b150245bdf17d3b4531","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/apple-touch-icon.png","hash":"6a58fa7a6ee38d4f94765024df470187558d6e16","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/favicon-16x16.png","hash":"1fc25c3e12a97e71a179939678dc3386d431a61a","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/favicon-32x32.png","hash":"b5e5d9a993f344ed48c1263f147289c1f98a93b0","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/favicon.ico","hash":"a7391692b2f421930e1acda914ae85093bbd15a1","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/about.txt","hash":"75a9f0c9a1562910e290cfc7713c4be46c9409dd","modified":1755126825938},{"_id":"public/images/icon/favicon_io_alien_monster/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/android-chrome-192x192.png","hash":"1403950f1a4050c128c721f6411b24de9ba0012d","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/apple-touch-icon.png","hash":"dcf0da0ea3f22c82373a0f9fc246553f939cb35a","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/favicon-16x16.png","hash":"7e3688179392bb3313f137b98103af8a13e80943","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/android-chrome-512x512.png","hash":"38defd6d27cf036569f338d0acf6d8e0df471c11","modified":1755126825938},{"_id":"public/images/top_pic/helloworld.webp","hash":"f6e075382b0b3fa448b971d46087104c8c03edd6","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/favicon.ico","hash":"a2c1cfab1d178e0343e419e3a2f23c673bafffa9","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1755126825938},{"_id":"public/images/icon/favicon_io_beating_heart/favicon-32x32.png","hash":"695b198cc5cf29b8b31f83b812f5b8eac92b30de","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/about.txt","hash":"12a8ba5c815c9225c2376b9d515e90525e2b9e07","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/android-chrome-192x192.png","hash":"29d5420995a8d7097b9a10beeb3a73bda01e2c79","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/favicon-16x16.png","hash":"6900922e089313cbd9b191177421f12ffa2fe3e9","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/android-chrome-512x512.png","hash":"043d68829c117e4d8a1d3101ef2e7416f72f44e3","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/apple-touch-icon.png","hash":"726489dd30f1b2d6a3fc339e2ac5a81096dcdc95","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/favicon-32x32.png","hash":"5f2e848fcf839daf45da1be78bc586253a336d5d","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/favicon.ico","hash":"a511d5b4757e43e98bc0a1578a25122fbfce9a30","modified":1755126825938},{"_id":"public/images/icon/favicon_io_cat_with_wry_smile/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/about.txt","hash":"ad3f5ed94d859747f24533c9133c222708de9aaa","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/android-chrome-192x192.png","hash":"d934a505e22b86c54c8694411bde96b30dc63a12","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/favicon-16x16.png","hash":"27c45c35b2a55da32f858543517dd282df1c9a39","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/android-chrome-512x512.png","hash":"bd68272d6cf8dede713f7992f538a42d4539dba9","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/apple-touch-icon.png","hash":"5ab65e3211cc29388ea3a9a30e76afe27a2079bc","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/favicon-32x32.png","hash":"336fc071e8ccd966c0cb2e15ba8d1f52e49307b2","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/favicon.ico","hash":"ff0cca5f930aa1dce75c8be9d50c70fb04904d24","modified":1755126825938},{"_id":"public/images/icon/favicon_io_goblin/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/about.txt","hash":"65a65ae9d6e91ea4bb77e7294d3a8713216b116c","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/android-chrome-192x192.png","hash":"169a7b635f443ce560c08eef0604885a113a8615","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/android-chrome-512x512.png","hash":"324d00add0c7e5bf6cb29ddf53e429497e121fdb","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/apple-touch-icon.png","hash":"6bdbd5eae0c283b27436c49f211a7b5c52b5a9e0","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/favicon-16x16.png","hash":"5bd71141a84251b41a1df14ff80cbf95a9640109","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/favicon.ico","hash":"8f3ff39c0dc503aaa2648c5ce830bba44fa6d456","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/favicon-32x32.png","hash":"346abc62c75e81c74b4ee070a280ade0e25d8af8","modified":1755126825938},{"_id":"public/images/icon/favicon_io_robot/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/about.txt","hash":"f01d40dfff11f26fc1dd90ab0bfb2cc2449f65d5","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/android-chrome-192x192.png","hash":"e92d833df7b47917f982e26c4f235499fcb67c1a","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/apple-touch-icon.png","hash":"5f4b58373f5f459caa38165cb87a1e93a8fb816e","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/favicon-16x16.png","hash":"9ee7c443e376dc6a88f468e4777bf9e8530f9874","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/favicon-32x32.png","hash":"d682094b7e22b4b9c2b41b6c9b8b7fda8b2bc9e9","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/favicon.ico","hash":"fe4b1c58d0b60e661c8d4c81470aad83c325acf1","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/AQS使用以及结构概览.webp","hash":"7efbe1077b7d3806b11da9e0c20b729796403842","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/ReentrantLock和AQS的组合示意图.webp","hash":"33bb071cb3c05e30bf0864ef52c8f743bd40723a","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-head后继节点.png","hash":"2bfa50e52906b46f33c97a3685653e9698872053","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/acquire流程图.webp","hash":"fde54e5d6df7e030c694b6f1d286bdaca22a8806","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-中间节点.png","hash":"86fb805abc6de8d3e41f93ff7f897654282275c1","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/同步队列示意图.webp","hash":"b5620d0bd40135411622febc3468e29a6289f9b9","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-尾节点.png","hash":"3262be313db9fef98de391973b25877ca0278fe6","modified":1755126825938},{"_id":"public/images/post/java/juc/aqs/aqs详解/独占式和共享式组件的同步状态区别.webp","hash":"adc26ac49b1c73b14ba7b8bee149066abaa190a7","modified":1755126825938},{"_id":"public/images/post/python/python-basics/python-entry/basic/python-memory.png","hash":"02b1cd0c5cd8581b118171730898f7d18d3ac062","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-6lkdmq-傍晚云.webp","hash":"4219d1efaf427a5ad024384a7e8255c397b8092e","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-6lklwl-朝阳.webp","hash":"1d20b59e2ce9907d1777a909382e4657533cdce1","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-6lkq5l-草原少年.webp","hash":"e2ab6cb4db9e99226e24903c62b71fbb8ee62129","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-mldl19-黑洞.webp","hash":"397402c11df2c4e7f005f1c83880194ddcdf4116","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-qdj5rl-点线对指.webp","hash":"7711f87e505f77a38016a54e514c2503b10adf45","modified":1755126825938},{"_id":"public/images/icon/favicon_io_ogre/android-chrome-512x512.png","hash":"ab7038c0b7cb71c4bf3316705330e7ff450862f3","modified":1755126825938},{"_id":"public/css/index.css","hash":"0e5a6d80f11d6b27e351d91d6daf664e78b71f97","modified":1755126825938},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1755126825938},{"_id":"public/js/utils.js","hash":"ce898acc9081131cdc3a97baf43cb7b1a25da47f","modified":1755126825938},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1755126825938},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1755126825938},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1755126825938},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-2erpym-电子线.webp","hash":"c95e1a71aa43b672ffc07a38205741f5841950b5","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-3q9qky-夜路边.webp","hash":"27eba78cc995cdeab302242a659ad4a30237f3a9","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-je5pxy-眼睛窥视.webp","hash":"7251e18eb5ef524879ece98a6cbbfb31d2cf7a48","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-qr6z7d-夕阳棕榈树.webp","hash":"ebaaad24a322d493aaf8e487337269720c036d65","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-4379q6-电塔道路.webp","hash":"3df5aa43da481dd62af4ee21ae083b6492319d0d","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-vg2y5p-多彩玻璃暗.webp","hash":"fb7803d99d2c511ea71f18dbd338fa3c13dbc2e7","modified":1755126825938},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-8g35ek-草原电线杆.webp","hash":"10dc1444bf51df9f5bc1890b9e28c04fe9651935","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-kxmp76-色道调料盘.webp","hash":"547d8f675e69c7bac720f98639aedc3262d32654","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-3l65w9-蓝天路明亮.webp","hash":"12830daf48615fe1c4442ac70f4546e04ae8f108","modified":1755126825938},{"_id":"public/images/background_pic/wallhaven-49vwlk-三角红上帝.webp","hash":"05ca39295fbf571bd66c362d112c37afe97dc5d5","modified":1755126825938}],"Category":[{"name":"websit","_id":"cmeal74gj0004jrcifa20hmxc"},{"name":"java","_id":"cmeal74gn000ajrci5lpzbyd5"},{"name":"hexo","parent":"cmeal74gj0004jrcifa20hmxc","_id":"cmeal74gt000mjrci63rq7yx1"},{"name":"python","_id":"cmeal74gu000tjrci8uzufz40"},{"name":"juc","parent":"cmeal74gn000ajrci5lpzbyd5","_id":"cmeal74gv000yjrci9gundse4"},{"name":"python-basics","parent":"cmeal74gu000tjrci8uzufz40","_id":"cmeal74gy001ijrci1zwu609p"},{"name":"aqs","parent":"cmeal74gv000yjrci9gundse4","_id":"cmeal74gy001kjrcih04a3zwf"},{"name":"computer-basics","parent":"cmeal74gy001ijrci1zwu609p","_id":"cmeal74h10029jrci0faobllh"},{"name":"python-entry","parent":"cmeal74gy001ijrci1zwu609p","_id":"cmeal74h2002fjrci7062htcu"}],"Data":[],"Page":[{"title":"categories","date":"2025-07-24T22:33:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-07-25 06:33:54\ntype: \"categories\"\n\n#comments:\n#description:\n#keywords:\n#top_img:\n#mathjax:\n#katex:\n#aside: true\n#aplayer:\n#highlight_shrink:\n#random:\n#limit:\n#    type:\n#    value:\n\n---\n","updated":"2025-08-04T22:34:49.580Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmeal74gd0000jrcihqxj71mq","content":"","excerpt":"","more":""},{"title":"link","date":"2025-07-24T22:37:21.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2025-07-25 06:37:21\n---\n","updated":"2025-08-04T22:34:50.017Z","path":"link/index.html","comments":1,"layout":"page","_id":"cmeal74gh0002jrci7sca95f3","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-07-24T22:31:54.000Z","type":"tags","orderby":"name","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-07-25 06:31:54\ntype: \"tags\"\norderby: name\norder: 1\n---\n","updated":"2025-08-04T22:34:50.017Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmeal74gk0006jrci7yvcftnv","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2025-07-24T22:33:54.000Z","top_img":null,"aside":true,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2025-07-25 06:33:54\ntags: test\ncategory: \n    - websit\n    - hexo\n#categories:\n#keywords:\n#description:\ntop_img: \n#comments:\n#cover:\n#toc:\n#toc_number:\n#toc_style_simple:k\n#copyright:\n#copyright_author:\n#copyright_author_href:\n#copyright_url:\n#copyright_info:\n#mathjax:\n#katex:\n#aplayer:\n#highlight_shrink:\naside: true\n#abcjs:\n#noticeOutdate:\n\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2025-08-12T23:00:48.335Z","comments":1,"layout":"post","photos":[],"_id":"cmeal74gf0001jrci07v54qtx","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"1.AQS使用以及结构概览","date":"2025-08-12T23:02:07.000Z","_content":"\n# JUC Lock 和 synchronized对比\n## ReentryLock 和 synchronized 对比概览\n| | ReentrantLock | synchronized |\n| --- | --- | --- |\n| 锁实现机制 | **依赖AQS** | **监视器模式** |\n| 释放形式 | **必须显示调用unlock()释放锁** | 自动释放监视器 |\n| 锁类型 | **公平锁**、非公平锁 | 非公平锁 |\n| 可重入性 | 可重入 | 可重入 |\n| 条件队列 | 可关联多个条件队列 | 仅能关联一个条件队列 |\n| 灵活性 | + 响应中断：lockInterruptibly()<br/>+ 超时获取：<font style=\"color:rgb(63, 63, 63);\">tryLock(long time, timeUnit)</font><br/>+ <font style=\"color:rgb(63, 63, 63);\">非阻塞尝试获取：tryLock()</font> | 阻塞式、不能响应中断、不可超时，不灵活 |\n\n\n## 使用方式样例说明\n### ReentrantLock使用方式：\n```java\n    private void lockDemo(){\n        Lock lock = new ReentrantLock();\n        lock.lock();//block until hold lock\n        try{\n            //method body...\n        }finally{\n            lock.unlock(); // must in finally unlock\n        }\n    }\n```\n\n\n\n### synchronized\n```java\n\npublic class SynchronizationTest {\n    /**\n     * 同步静态方法，synchronized 监视器为 所在class对象\n     */\n    public synchronized static void lockStatic(){\n        //method body...\n    }\n\n    /**\n     * 同步实例方法，synchronized 监视器为 this实例对象\n     */\n    public synchronized void lock(){\n        // method body\n    }\n    \n    private final Object lock = new Object();\n\n    /**\n     * 同步代码块，synchronized 监视器为 指定lock对象\n     */\n    public void lockBlock(){\n        synchronized(lock){\n            //block\n        }\n    }\n}\n\n```\n\n\n\n## ReentrantLock 和 AQS 组合以及方法概览\n### Lock接口定义\n从接口定义中可以看出JUC Lock 方法比synchronized锁的使用上，有更多灵活选择\n\n```java\npublic interface Lock {\n\n    void lock();\n\n    void lockInterruptibly() throws InterruptedException;\n\n    boolean tryLock();\n\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n\n    void unlock();\n\n    Condition newCondition();\n}\n\n```\n\n\n\n### ReentrantLock 聚合 AQS实现\nReentrantLock 内部成员变量：`Sync sync`同步器继承AbstractQueuedSynchronizer，通过AQS模板方法，实现Lock接口功能\n\n\n\n```java\npublic class ReentrantLock implements Lock, java.io.Serializable {\n\n    /**\n    * 内部组合 队列同步器实现，作为锁的底层实现\n    * 避免直接继承AQS，灵活性，且屏蔽底层实现对外暴露\n    */\n    private final Sync sync;\n\n    /**\n     * 同步器实现\n     */\n    abstract static class Sync extends AbstractQueuedSynchronizer {\n        \n    }\n\n    /**\n     *非公平-同步器\n     */\n    static final class NonfairSync extends Sync {\n        \n    }\n\n    /**\n     * 公平-同步器\n     */\n    static final class FairSync extends Sync {\n        \n    }\n}\n```\n\n\n\n从此可以分析得出ReentrantLock和AQS的组合示意图如下：\n\n\n\n![](/images/post/java/juc/aqs/aqs详解/ReentrantLock和AQS的组合示意图.webp)\n\n# AQS 结构以及方法分析\n## AQS队列结构\n### AQS属性说明\nAbstractQueuedSynchronizer 是一个抽象类，很多方法定义为`final`模板方法，一些方法定义为`abstract`抽象方法，由子类选择实现，由此提供不能能力\n\n1. AQS内部成员变量 Node类型的：`head``tail`头尾节点指针，用户记录队列的首尾node对象引用\n2. AQS等待队列(同步队列 & 条件队列 )为 `\"CLH\" `队列变体的虚拟双向队列（FIFO），用于阻塞和队列线程对同步状态的操作\n3. int类型 `state`状态字段，记录同步器临界资源的状态数据\n4. 所有属性均有`**volatile**`关键字修饰，保证多线中的可见性\n\n```java\npublic abstract class AbstractQueuedSynchronizer\n    extends AbstractOwnableSynchronizer\n    implements java.io.Serializable {\n\n    /**\n     * 头节点\n     */\n    private transient volatile Node head;\n\n    /**\n     * 尾部节点\n     */\n    private transient volatile Node tail;\n\n    /**\n     * 同步器状态\n     */\n    private volatile int state;\n```\n\n### 同步队列示意图：\n![](/images/post/java/juc/aqs/aqs详解/同步队列示意图.webp)\n\n\n\n## Node节点\n### Node节点属性说明\n内部类Node节点为对列中的每一个节点对象\n\n1. Node类型的：`prev`前驱节点指针、`next`后继节点指针、`nextWaiter`节点处于条件队列时的后继节点指针，用于构成双向队列\n2. int 类型的 `waitStatus`等待状态，记录节点的状态，可能时值为：-3、-2、-1、0、1\n3. Thread类型的`thread`对象，为此Node对应的线程对象，用于阻塞和唤醒\n4. nextWaiter 在获取所同步状态后才能进去条件等待队列，因此不涉及多线程操作，没有使用 `volatile`关键字修饰\n5. 其他字段属性均有`**volatile**`关键字修饰，保证多线中的可见性\n\n```java\n    static final class Node {\n\n        volatile int waitStatus;\n\n        volatile Node prev;\n\n        volatile Node next;\n\n        volatile Thread thread;\n\n        Node nextWaiter;\n\n    }\n```\n\n| 方法和属性值 | 含义 |\n| --- | --- |\n| waitStatus | 当前节点在队列中的状态 |\n| thread | 表示处于该节点的线程 |\n| prev | 前驱指针 |\n| next | 后继指针 |\n| nextWaiter | 指向下一个处于CONDITION状态的节点（Condition Queue队列） |\n\n\n### Node节点状态说明\n| waitStatus枚举 | 状态说明 |\n| --- | --- |\n|  CANCELLED =  1 | 由于超时或中断，线程取消获取请求，节点状态不会再变化 |\n| SIGNAL    = -1 | 后继node线程需要唤醒 |\n| CONDITION = -2 | 节点在等待队列中，等待被唤醒 |\n| PROPAGATE = -3 | 当前线程处在SHARED情况下，指示sh<font style=\"background-color:#FBF5CB;\"></font>are共享状态获取应该传播 |\n| 0 | 初始化默认值，方便程序状态判断 |\n\n\n\n\n### Node节点示意图\n![](/images/post/java/juc/aqs/aqs详解/AQS使用以及结构概览.webp)\n\n\n\n## 方法分析\n### 同步状态state操作方法\n队列状态获取和操作方法为`protected final`，不对外暴露部，子类可以直接使用，禁止子类重写\n\n| **<font style=\"color:rgb(255, 255, 255);\">方法名</font>** | **<font style=\"color:rgb(255, 255, 255);\">描述</font>** |\n| :--- | --- |\n| <font style=\"color:rgb(34, 34, 34);\">protected final int getState()</font> | <font style=\"color:rgb(34, 34, 34);\">获取State的值</font> |\n| <font style=\"color:rgb(34, 34, 34);\">protected final void setState(int newState)</font> | <font style=\"color:rgb(34, 34, 34);\">设置State的值</font> |\n| <font style=\"color:rgb(34, 34, 34);background-color:#FBDE28;\">protected final boolean compareAndSetState(int expect, int update)</font> | <font style=\"color:rgb(34, 34, 34);\">使用CAS方式更新State，原子更新，成功或失败</font> |\n\n\n同步组件或者锁可以分为\n\n+ 独占式\n+ 共享式\n\n独占式和共享式组件的同步状态区别也很明显：\n\n独占式 ：state 0--1\n\n共享式： state 0--N\n\n![](/images/post/java/juc/aqs/aqs详解/独占式和共享式组件的同步状态区别.webp)\n\n### AQS模板方法\n模板方法为`public final`定义编排好模板方法流程，外部可以直接调用，禁止子类重写。此处的模板方法也分为两类：独占式、共享式\n\n+ acquire 获取同步状态，和响应中断以及超时的版本\n+ 释放同步状态\n\n| 方法名 | 描述 |\n| --- | --- |\n| void acquire(int arg) | <font style=\"background-color:#FBDE28;\">独占式</font>获取同步状态，获取成功则返回，获取失败则进入同步队列，阻塞式（park()）等待，直到获取到锁 |\n|  void acquireInterruptibly(int arg) | 可中断获取同步状态，同acquire方法，不过可以响应中断，如果线程在获取同步状态时（获取前或队列中等待时）被中断，则取消获取同步状态，抛出InterruptedException |\n| boolean tryAcquireNanos(int arg, long nanosTimeout) | 在acquireInterruptibly基础上，增加超时功能，如果在指定时间获取到同步状态，则返回true，否则返回false |\n| boolean release(int arg) | <font style=\"background-color:#FBDE28;\">独占式</font>释放同步状态 |\n| void acquireShared(int arg) | <font style=\"background-color:#FBDE28;\">共享式</font>获取同步状态，与acquire的区别是，同一时刻可以有多个线程获取到同步状态 |\n| void acquireSharedInterruptibly(int arg) | 与acquireShared相同，支持响应中断 |\n| boolean tryAcquireSharedNanos(int arg, long nanosTimeout) | 与acquireInteruptibly相同，支持超时返回 |\n| boolean releaseShared(int arg) | <font style=\"background-color:#FBDE28;\">共享式</font>释放同步状态 |\n\n\n### 同步器组件重写方法\n同步器组件也可以根据独占式和共享式的分类方式，选择重写的方法类型，AQS中需要重写的方法使用异常的方式作为默认实现，避免子类重写不需要的方法\n\n```java\n    protected boolean tryAcquire(int arg) {\n        throw new UnsupportedOperationException();\n    }\n```\n\n\n\n| 方法名 | 描述 |\n| --- | --- |\n|  boolean tryAcquire(int arg) | 独占式获取同步状态<br/>获取成功则返回true，否则返回false |\n| boolean tryRelease(int arg) | 独占式释放同步状态<br/>完全释放则返回true，否则返回false |\n| boolean isHeldExclusively() | 该线程是否正在独占资源，使用Condition时实现此方法 |\n| int tryAcquireShared(int arg) | 共享式获取同步状态<br/>返回值 < 0 获取失败<br/>返回值 = 0 获取成功，且无剩余资源<br/>返回值 > 0 获取成功，且有剩余资源，其他线程可继续获取 |\n| boolean tryReleaseShared(int arg) | 共享式释放同步状态，<br/>如果释放后允许后续线程获取（shared、exclusive）则返回true<br/>否则返回false |\n\n\n# \n","source":"_posts/java/juc/aqs/1.AQS使用以及结构概览.md","raw":"---\ntitle: 1.AQS使用以及结构概览\ndate: 2025-08-13 07:02:07\ntags:\n- java\n- juc\n\ncategory:\n- java\n- juc\n- aqs\n\n---\n\n# JUC Lock 和 synchronized对比\n## ReentryLock 和 synchronized 对比概览\n| | ReentrantLock | synchronized |\n| --- | --- | --- |\n| 锁实现机制 | **依赖AQS** | **监视器模式** |\n| 释放形式 | **必须显示调用unlock()释放锁** | 自动释放监视器 |\n| 锁类型 | **公平锁**、非公平锁 | 非公平锁 |\n| 可重入性 | 可重入 | 可重入 |\n| 条件队列 | 可关联多个条件队列 | 仅能关联一个条件队列 |\n| 灵活性 | + 响应中断：lockInterruptibly()<br/>+ 超时获取：<font style=\"color:rgb(63, 63, 63);\">tryLock(long time, timeUnit)</font><br/>+ <font style=\"color:rgb(63, 63, 63);\">非阻塞尝试获取：tryLock()</font> | 阻塞式、不能响应中断、不可超时，不灵活 |\n\n\n## 使用方式样例说明\n### ReentrantLock使用方式：\n```java\n    private void lockDemo(){\n        Lock lock = new ReentrantLock();\n        lock.lock();//block until hold lock\n        try{\n            //method body...\n        }finally{\n            lock.unlock(); // must in finally unlock\n        }\n    }\n```\n\n\n\n### synchronized\n```java\n\npublic class SynchronizationTest {\n    /**\n     * 同步静态方法，synchronized 监视器为 所在class对象\n     */\n    public synchronized static void lockStatic(){\n        //method body...\n    }\n\n    /**\n     * 同步实例方法，synchronized 监视器为 this实例对象\n     */\n    public synchronized void lock(){\n        // method body\n    }\n    \n    private final Object lock = new Object();\n\n    /**\n     * 同步代码块，synchronized 监视器为 指定lock对象\n     */\n    public void lockBlock(){\n        synchronized(lock){\n            //block\n        }\n    }\n}\n\n```\n\n\n\n## ReentrantLock 和 AQS 组合以及方法概览\n### Lock接口定义\n从接口定义中可以看出JUC Lock 方法比synchronized锁的使用上，有更多灵活选择\n\n```java\npublic interface Lock {\n\n    void lock();\n\n    void lockInterruptibly() throws InterruptedException;\n\n    boolean tryLock();\n\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n\n    void unlock();\n\n    Condition newCondition();\n}\n\n```\n\n\n\n### ReentrantLock 聚合 AQS实现\nReentrantLock 内部成员变量：`Sync sync`同步器继承AbstractQueuedSynchronizer，通过AQS模板方法，实现Lock接口功能\n\n\n\n```java\npublic class ReentrantLock implements Lock, java.io.Serializable {\n\n    /**\n    * 内部组合 队列同步器实现，作为锁的底层实现\n    * 避免直接继承AQS，灵活性，且屏蔽底层实现对外暴露\n    */\n    private final Sync sync;\n\n    /**\n     * 同步器实现\n     */\n    abstract static class Sync extends AbstractQueuedSynchronizer {\n        \n    }\n\n    /**\n     *非公平-同步器\n     */\n    static final class NonfairSync extends Sync {\n        \n    }\n\n    /**\n     * 公平-同步器\n     */\n    static final class FairSync extends Sync {\n        \n    }\n}\n```\n\n\n\n从此可以分析得出ReentrantLock和AQS的组合示意图如下：\n\n\n\n![](/images/post/java/juc/aqs/aqs详解/ReentrantLock和AQS的组合示意图.webp)\n\n# AQS 结构以及方法分析\n## AQS队列结构\n### AQS属性说明\nAbstractQueuedSynchronizer 是一个抽象类，很多方法定义为`final`模板方法，一些方法定义为`abstract`抽象方法，由子类选择实现，由此提供不能能力\n\n1. AQS内部成员变量 Node类型的：`head``tail`头尾节点指针，用户记录队列的首尾node对象引用\n2. AQS等待队列(同步队列 & 条件队列 )为 `\"CLH\" `队列变体的虚拟双向队列（FIFO），用于阻塞和队列线程对同步状态的操作\n3. int类型 `state`状态字段，记录同步器临界资源的状态数据\n4. 所有属性均有`**volatile**`关键字修饰，保证多线中的可见性\n\n```java\npublic abstract class AbstractQueuedSynchronizer\n    extends AbstractOwnableSynchronizer\n    implements java.io.Serializable {\n\n    /**\n     * 头节点\n     */\n    private transient volatile Node head;\n\n    /**\n     * 尾部节点\n     */\n    private transient volatile Node tail;\n\n    /**\n     * 同步器状态\n     */\n    private volatile int state;\n```\n\n### 同步队列示意图：\n![](/images/post/java/juc/aqs/aqs详解/同步队列示意图.webp)\n\n\n\n## Node节点\n### Node节点属性说明\n内部类Node节点为对列中的每一个节点对象\n\n1. Node类型的：`prev`前驱节点指针、`next`后继节点指针、`nextWaiter`节点处于条件队列时的后继节点指针，用于构成双向队列\n2. int 类型的 `waitStatus`等待状态，记录节点的状态，可能时值为：-3、-2、-1、0、1\n3. Thread类型的`thread`对象，为此Node对应的线程对象，用于阻塞和唤醒\n4. nextWaiter 在获取所同步状态后才能进去条件等待队列，因此不涉及多线程操作，没有使用 `volatile`关键字修饰\n5. 其他字段属性均有`**volatile**`关键字修饰，保证多线中的可见性\n\n```java\n    static final class Node {\n\n        volatile int waitStatus;\n\n        volatile Node prev;\n\n        volatile Node next;\n\n        volatile Thread thread;\n\n        Node nextWaiter;\n\n    }\n```\n\n| 方法和属性值 | 含义 |\n| --- | --- |\n| waitStatus | 当前节点在队列中的状态 |\n| thread | 表示处于该节点的线程 |\n| prev | 前驱指针 |\n| next | 后继指针 |\n| nextWaiter | 指向下一个处于CONDITION状态的节点（Condition Queue队列） |\n\n\n### Node节点状态说明\n| waitStatus枚举 | 状态说明 |\n| --- | --- |\n|  CANCELLED =  1 | 由于超时或中断，线程取消获取请求，节点状态不会再变化 |\n| SIGNAL    = -1 | 后继node线程需要唤醒 |\n| CONDITION = -2 | 节点在等待队列中，等待被唤醒 |\n| PROPAGATE = -3 | 当前线程处在SHARED情况下，指示sh<font style=\"background-color:#FBF5CB;\"></font>are共享状态获取应该传播 |\n| 0 | 初始化默认值，方便程序状态判断 |\n\n\n\n\n### Node节点示意图\n![](/images/post/java/juc/aqs/aqs详解/AQS使用以及结构概览.webp)\n\n\n\n## 方法分析\n### 同步状态state操作方法\n队列状态获取和操作方法为`protected final`，不对外暴露部，子类可以直接使用，禁止子类重写\n\n| **<font style=\"color:rgb(255, 255, 255);\">方法名</font>** | **<font style=\"color:rgb(255, 255, 255);\">描述</font>** |\n| :--- | --- |\n| <font style=\"color:rgb(34, 34, 34);\">protected final int getState()</font> | <font style=\"color:rgb(34, 34, 34);\">获取State的值</font> |\n| <font style=\"color:rgb(34, 34, 34);\">protected final void setState(int newState)</font> | <font style=\"color:rgb(34, 34, 34);\">设置State的值</font> |\n| <font style=\"color:rgb(34, 34, 34);background-color:#FBDE28;\">protected final boolean compareAndSetState(int expect, int update)</font> | <font style=\"color:rgb(34, 34, 34);\">使用CAS方式更新State，原子更新，成功或失败</font> |\n\n\n同步组件或者锁可以分为\n\n+ 独占式\n+ 共享式\n\n独占式和共享式组件的同步状态区别也很明显：\n\n独占式 ：state 0--1\n\n共享式： state 0--N\n\n![](/images/post/java/juc/aqs/aqs详解/独占式和共享式组件的同步状态区别.webp)\n\n### AQS模板方法\n模板方法为`public final`定义编排好模板方法流程，外部可以直接调用，禁止子类重写。此处的模板方法也分为两类：独占式、共享式\n\n+ acquire 获取同步状态，和响应中断以及超时的版本\n+ 释放同步状态\n\n| 方法名 | 描述 |\n| --- | --- |\n| void acquire(int arg) | <font style=\"background-color:#FBDE28;\">独占式</font>获取同步状态，获取成功则返回，获取失败则进入同步队列，阻塞式（park()）等待，直到获取到锁 |\n|  void acquireInterruptibly(int arg) | 可中断获取同步状态，同acquire方法，不过可以响应中断，如果线程在获取同步状态时（获取前或队列中等待时）被中断，则取消获取同步状态，抛出InterruptedException |\n| boolean tryAcquireNanos(int arg, long nanosTimeout) | 在acquireInterruptibly基础上，增加超时功能，如果在指定时间获取到同步状态，则返回true，否则返回false |\n| boolean release(int arg) | <font style=\"background-color:#FBDE28;\">独占式</font>释放同步状态 |\n| void acquireShared(int arg) | <font style=\"background-color:#FBDE28;\">共享式</font>获取同步状态，与acquire的区别是，同一时刻可以有多个线程获取到同步状态 |\n| void acquireSharedInterruptibly(int arg) | 与acquireShared相同，支持响应中断 |\n| boolean tryAcquireSharedNanos(int arg, long nanosTimeout) | 与acquireInteruptibly相同，支持超时返回 |\n| boolean releaseShared(int arg) | <font style=\"background-color:#FBDE28;\">共享式</font>释放同步状态 |\n\n\n### 同步器组件重写方法\n同步器组件也可以根据独占式和共享式的分类方式，选择重写的方法类型，AQS中需要重写的方法使用异常的方式作为默认实现，避免子类重写不需要的方法\n\n```java\n    protected boolean tryAcquire(int arg) {\n        throw new UnsupportedOperationException();\n    }\n```\n\n\n\n| 方法名 | 描述 |\n| --- | --- |\n|  boolean tryAcquire(int arg) | 独占式获取同步状态<br/>获取成功则返回true，否则返回false |\n| boolean tryRelease(int arg) | 独占式释放同步状态<br/>完全释放则返回true，否则返回false |\n| boolean isHeldExclusively() | 该线程是否正在独占资源，使用Condition时实现此方法 |\n| int tryAcquireShared(int arg) | 共享式获取同步状态<br/>返回值 < 0 获取失败<br/>返回值 = 0 获取成功，且无剩余资源<br/>返回值 > 0 获取成功，且有剩余资源，其他线程可继续获取 |\n| boolean tryReleaseShared(int arg) | 共享式释放同步状态，<br/>如果释放后允许后续线程获取（shared、exclusive）则返回true<br/>否则返回false |\n\n\n# \n","slug":"java-juc-aqs-1-AQS使用以及结构概览","published":1,"updated":"2025-08-13T22:45:53.761Z","comments":1,"layout":"post","photos":[],"_id":"cmeal74gh0003jrci1lif2l33","content":"<h1 id=\"JUC-Lock-和-synchronized对比\"><a href=\"#JUC-Lock-和-synchronized对比\" class=\"headerlink\" title=\"JUC Lock 和 synchronized对比\"></a>JUC Lock 和 synchronized对比</h1><h2 id=\"ReentryLock-和-synchronized-对比概览\"><a href=\"#ReentryLock-和-synchronized-对比概览\" class=\"headerlink\" title=\"ReentryLock 和 synchronized 对比概览\"></a>ReentryLock 和 synchronized 对比概览</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>ReentrantLock</th>\n<th>synchronized</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>锁实现机制</td>\n<td><strong>依赖AQS</strong></td>\n<td><strong>监视器模式</strong></td>\n</tr>\n<tr>\n<td>释放形式</td>\n<td><strong>必须显示调用unlock()释放锁</strong></td>\n<td>自动释放监视器</td>\n</tr>\n<tr>\n<td>锁类型</td>\n<td><strong>公平锁</strong>、非公平锁</td>\n<td>非公平锁</td>\n</tr>\n<tr>\n<td>可重入性</td>\n<td>可重入</td>\n<td>可重入</td>\n</tr>\n<tr>\n<td>条件队列</td>\n<td>可关联多个条件队列</td>\n<td>仅能关联一个条件队列</td>\n</tr>\n<tr>\n<td>灵活性</td>\n<td>+ 响应中断：lockInterruptibly()<br/>+ 超时获取：<font style=\"color:rgb(63, 63, 63);\">tryLock(long time, timeUnit)</font><br/>+ <font style=\"color:rgb(63, 63, 63);\">非阻塞尝试获取：tryLock()</font></td>\n<td>阻塞式、不能响应中断、不可超时，不灵活</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用方式样例说明\"><a href=\"#使用方式样例说明\" class=\"headerlink\" title=\"使用方式样例说明\"></a>使用方式样例说明</h2><h3 id=\"ReentrantLock使用方式：\"><a href=\"#ReentrantLock使用方式：\" class=\"headerlink\" title=\"ReentrantLock使用方式：\"></a>ReentrantLock使用方式：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockDemo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    lock.lock();<span class=\"comment\">//block until hold lock</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//method body...</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock(); <span class=\"comment\">// must in finally unlock</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SynchronizationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步静态方法，synchronized 监视器为 所在class对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockStatic</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//method body...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步实例方法，synchronized 监视器为 this实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// method body</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步代码块，synchronized 监视器为 指定lock对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockBlock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//block</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ReentrantLock-和-AQS-组合以及方法概览\"><a href=\"#ReentrantLock-和-AQS-组合以及方法概览\" class=\"headerlink\" title=\"ReentrantLock 和 AQS 组合以及方法概览\"></a>ReentrantLock 和 AQS 组合以及方法概览</h2><h3 id=\"Lock接口定义\"><a href=\"#Lock接口定义\" class=\"headerlink\" title=\"Lock接口定义\"></a>Lock接口定义</h3><p>从接口定义中可以看出JUC Lock 方法比synchronized锁的使用上，有更多灵活选择</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Lock</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Condition <span class=\"title function_\">newCondition</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ReentrantLock-聚合-AQS实现\"><a href=\"#ReentrantLock-聚合-AQS实现\" class=\"headerlink\" title=\"ReentrantLock 聚合 AQS实现\"></a>ReentrantLock 聚合 AQS实现</h3><p>ReentrantLock 内部成员变量：<code>Sync sync</code>同步器继承AbstractQueuedSynchronizer，通过AQS模板方法，实现Lock接口功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Lock</span>, java.io.Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 内部组合 队列同步器实现，作为锁的底层实现</span></span><br><span class=\"line\"><span class=\"comment\">    * 避免直接继承AQS，灵活性，且屏蔽底层实现对外暴露</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sync sync;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步器实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *非公平-同步器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Sync</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 公平-同步器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Sync</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从此可以分析得出ReentrantLock和AQS的组合示意图如下：</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/ReentrantLock%E5%92%8CAQS%E7%9A%84%E7%BB%84%E5%90%88%E7%A4%BA%E6%84%8F%E5%9B%BE.webp\"></p>\n<h1 id=\"AQS-结构以及方法分析\"><a href=\"#AQS-结构以及方法分析\" class=\"headerlink\" title=\"AQS 结构以及方法分析\"></a>AQS 结构以及方法分析</h1><h2 id=\"AQS队列结构\"><a href=\"#AQS队列结构\" class=\"headerlink\" title=\"AQS队列结构\"></a>AQS队列结构</h2><h3 id=\"AQS属性说明\"><a href=\"#AQS属性说明\" class=\"headerlink\" title=\"AQS属性说明\"></a>AQS属性说明</h3><p>AbstractQueuedSynchronizer 是一个抽象类，很多方法定义为<code>final</code>模板方法，一些方法定义为<code>abstract</code>抽象方法，由子类选择实现，由此提供不能能力</p>\n<ol>\n<li>AQS内部成员变量 Node类型的：<code>head``tail</code>头尾节点指针，用户记录队列的首尾node对象引用</li>\n<li>AQS等待队列(同步队列 &amp; 条件队列 )为 <code>&quot;CLH&quot; </code>队列变体的虚拟双向队列（FIFO），用于阻塞和队列线程对同步状态的操作</li>\n<li>int类型 <code>state</code>状态字段，记录同步器临界资源的状态数据</li>\n<li>所有属性均有<code>**volatile**</code>关键字修饰，保证多线中的可见性</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractOwnableSynchronizer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 头节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 尾部节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步器状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> state;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同步队列示意图：\"><a href=\"#同步队列示意图：\" class=\"headerlink\" title=\"同步队列示意图：\"></a>同步队列示意图：</h3><p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE.webp\"></p>\n<h2 id=\"Node节点\"><a href=\"#Node节点\" class=\"headerlink\" title=\"Node节点\"></a>Node节点</h2><h3 id=\"Node节点属性说明\"><a href=\"#Node节点属性说明\" class=\"headerlink\" title=\"Node节点属性说明\"></a>Node节点属性说明</h3><p>内部类Node节点为对列中的每一个节点对象</p>\n<ol>\n<li>Node类型的：<code>prev</code>前驱节点指针、<code>next</code>后继节点指针、<code>nextWaiter</code>节点处于条件队列时的后继节点指针，用于构成双向队列</li>\n<li>int 类型的 <code>waitStatus</code>等待状态，记录节点的状态，可能时值为：-3、-2、-1、0、1</li>\n<li>Thread类型的<code>thread</code>对象，为此Node对应的线程对象，用于阻塞和唤醒</li>\n<li>nextWaiter 在获取所同步状态后才能进去条件等待队列，因此不涉及多线程操作，没有使用 <code>volatile</code>关键字修饰</li>\n<li>其他字段属性均有<code>**volatile**</code>关键字修饰，保证多线中的可见性</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Thread thread;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node nextWaiter;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方法和属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>waitStatus</td>\n<td>当前节点在队列中的状态</td>\n</tr>\n<tr>\n<td>thread</td>\n<td>表示处于该节点的线程</td>\n</tr>\n<tr>\n<td>prev</td>\n<td>前驱指针</td>\n</tr>\n<tr>\n<td>next</td>\n<td>后继指针</td>\n</tr>\n<tr>\n<td>nextWaiter</td>\n<td>指向下一个处于CONDITION状态的节点（Condition Queue队列）</td>\n</tr>\n</tbody></table>\n<h3 id=\"Node节点状态说明\"><a href=\"#Node节点状态说明\" class=\"headerlink\" title=\"Node节点状态说明\"></a>Node节点状态说明</h3><table>\n<thead>\n<tr>\n<th>waitStatus枚举</th>\n<th>状态说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CANCELLED &#x3D;  1</td>\n<td>由于超时或中断，线程取消获取请求，节点状态不会再变化</td>\n</tr>\n<tr>\n<td>SIGNAL    &#x3D; -1</td>\n<td>后继node线程需要唤醒</td>\n</tr>\n<tr>\n<td>CONDITION &#x3D; -2</td>\n<td>节点在等待队列中，等待被唤醒</td>\n</tr>\n<tr>\n<td>PROPAGATE &#x3D; -3</td>\n<td>当前线程处在SHARED情况下，指示sh<font style=\"background-color:#FBF5CB;\"></font>are共享状态获取应该传播</td>\n</tr>\n<tr>\n<td>0</td>\n<td>初始化默认值，方便程序状态判断</td>\n</tr>\n</tbody></table>\n<h3 id=\"Node节点示意图\"><a href=\"#Node节点示意图\" class=\"headerlink\" title=\"Node节点示意图\"></a>Node节点示意图</h3><p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/AQS%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88.webp\"></p>\n<h2 id=\"方法分析\"><a href=\"#方法分析\" class=\"headerlink\" title=\"方法分析\"></a>方法分析</h2><h3 id=\"同步状态state操作方法\"><a href=\"#同步状态state操作方法\" class=\"headerlink\" title=\"同步状态state操作方法\"></a>同步状态state操作方法</h3><p>队列状态获取和操作方法为<code>protected final</code>，不对外暴露部，子类可以直接使用，禁止子类重写</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong><font style=\"color:rgb(255, 255, 255);\">方法名</font></strong></th>\n<th><strong><font style=\"color:rgb(255, 255, 255);\">描述</font></strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><font style=\"color:rgb(34, 34, 34);\">protected final int getState()</font></td>\n<td><font style=\"color:rgb(34, 34, 34);\">获取State的值</font></td>\n</tr>\n<tr>\n<td align=\"left\"><font style=\"color:rgb(34, 34, 34);\">protected final void setState(int newState)</font></td>\n<td><font style=\"color:rgb(34, 34, 34);\">设置State的值</font></td>\n</tr>\n<tr>\n<td align=\"left\"><font style=\"color:rgb(34, 34, 34);background-color:#FBDE28;\">protected final boolean compareAndSetState(int expect, int update)</font></td>\n<td><font style=\"color:rgb(34, 34, 34);\">使用CAS方式更新State，原子更新，成功或失败</font></td>\n</tr>\n</tbody></table>\n<p>同步组件或者锁可以分为</p>\n<ul>\n<li>独占式</li>\n<li>共享式</li>\n</ul>\n<p>独占式和共享式组件的同步状态区别也很明显：</p>\n<p>独占式 ：state 0–1</p>\n<p>共享式： state 0–N</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E7%8B%AC%E5%8D%A0%E5%BC%8F%E5%92%8C%E5%85%B1%E4%BA%AB%E5%BC%8F%E7%BB%84%E4%BB%B6%E7%9A%84%E5%90%8C%E6%AD%A5%E7%8A%B6%E6%80%81%E5%8C%BA%E5%88%AB.webp\"></p>\n<h3 id=\"AQS模板方法\"><a href=\"#AQS模板方法\" class=\"headerlink\" title=\"AQS模板方法\"></a>AQS模板方法</h3><p>模板方法为<code>public final</code>定义编排好模板方法流程，外部可以直接调用，禁止子类重写。此处的模板方法也分为两类：独占式、共享式</p>\n<ul>\n<li>acquire 获取同步状态，和响应中断以及超时的版本</li>\n<li>释放同步状态</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void acquire(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">独占式</font>获取同步状态，获取成功则返回，获取失败则进入同步队列，阻塞式（park()）等待，直到获取到锁</td>\n</tr>\n<tr>\n<td>void acquireInterruptibly(int arg)</td>\n<td>可中断获取同步状态，同acquire方法，不过可以响应中断，如果线程在获取同步状态时（获取前或队列中等待时）被中断，则取消获取同步状态，抛出InterruptedException</td>\n</tr>\n<tr>\n<td>boolean tryAcquireNanos(int arg, long nanosTimeout)</td>\n<td>在acquireInterruptibly基础上，增加超时功能，如果在指定时间获取到同步状态，则返回true，否则返回false</td>\n</tr>\n<tr>\n<td>boolean release(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">独占式</font>释放同步状态</td>\n</tr>\n<tr>\n<td>void acquireShared(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">共享式</font>获取同步状态，与acquire的区别是，同一时刻可以有多个线程获取到同步状态</td>\n</tr>\n<tr>\n<td>void acquireSharedInterruptibly(int arg)</td>\n<td>与acquireShared相同，支持响应中断</td>\n</tr>\n<tr>\n<td>boolean tryAcquireSharedNanos(int arg, long nanosTimeout)</td>\n<td>与acquireInteruptibly相同，支持超时返回</td>\n</tr>\n<tr>\n<td>boolean releaseShared(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">共享式</font>释放同步状态</td>\n</tr>\n</tbody></table>\n<h3 id=\"同步器组件重写方法\"><a href=\"#同步器组件重写方法\" class=\"headerlink\" title=\"同步器组件重写方法\"></a>同步器组件重写方法</h3><p>同步器组件也可以根据独占式和共享式的分类方式，选择重写的方法类型，AQS中需要重写的方法使用异常的方式作为默认实现，避免子类重写不需要的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>boolean tryAcquire(int arg)</td>\n<td>独占式获取同步状态<br/>获取成功则返回true，否则返回false</td>\n</tr>\n<tr>\n<td>boolean tryRelease(int arg)</td>\n<td>独占式释放同步状态<br/>完全释放则返回true，否则返回false</td>\n</tr>\n<tr>\n<td>boolean isHeldExclusively()</td>\n<td>该线程是否正在独占资源，使用Condition时实现此方法</td>\n</tr>\n<tr>\n<td>int tryAcquireShared(int arg)</td>\n<td>共享式获取同步状态<br/>返回值 &lt; 0 获取失败<br/>返回值 &#x3D; 0 获取成功，且无剩余资源<br/>返回值 &gt; 0 获取成功，且有剩余资源，其他线程可继续获取</td>\n</tr>\n<tr>\n<td>boolean tryReleaseShared(int arg)</td>\n<td>共享式释放同步状态，<br/>如果释放后允许后续线程获取（shared、exclusive）则返回true<br/>否则返回false</td>\n</tr>\n</tbody></table>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","excerpt":"","more":"<h1 id=\"JUC-Lock-和-synchronized对比\"><a href=\"#JUC-Lock-和-synchronized对比\" class=\"headerlink\" title=\"JUC Lock 和 synchronized对比\"></a>JUC Lock 和 synchronized对比</h1><h2 id=\"ReentryLock-和-synchronized-对比概览\"><a href=\"#ReentryLock-和-synchronized-对比概览\" class=\"headerlink\" title=\"ReentryLock 和 synchronized 对比概览\"></a>ReentryLock 和 synchronized 对比概览</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>ReentrantLock</th>\n<th>synchronized</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>锁实现机制</td>\n<td><strong>依赖AQS</strong></td>\n<td><strong>监视器模式</strong></td>\n</tr>\n<tr>\n<td>释放形式</td>\n<td><strong>必须显示调用unlock()释放锁</strong></td>\n<td>自动释放监视器</td>\n</tr>\n<tr>\n<td>锁类型</td>\n<td><strong>公平锁</strong>、非公平锁</td>\n<td>非公平锁</td>\n</tr>\n<tr>\n<td>可重入性</td>\n<td>可重入</td>\n<td>可重入</td>\n</tr>\n<tr>\n<td>条件队列</td>\n<td>可关联多个条件队列</td>\n<td>仅能关联一个条件队列</td>\n</tr>\n<tr>\n<td>灵活性</td>\n<td>+ 响应中断：lockInterruptibly()<br/>+ 超时获取：<font style=\"color:rgb(63, 63, 63);\">tryLock(long time, timeUnit)</font><br/>+ <font style=\"color:rgb(63, 63, 63);\">非阻塞尝试获取：tryLock()</font></td>\n<td>阻塞式、不能响应中断、不可超时，不灵活</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用方式样例说明\"><a href=\"#使用方式样例说明\" class=\"headerlink\" title=\"使用方式样例说明\"></a>使用方式样例说明</h2><h3 id=\"ReentrantLock使用方式：\"><a href=\"#ReentrantLock使用方式：\" class=\"headerlink\" title=\"ReentrantLock使用方式：\"></a>ReentrantLock使用方式：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockDemo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    lock.lock();<span class=\"comment\">//block until hold lock</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//method body...</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock(); <span class=\"comment\">// must in finally unlock</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SynchronizationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步静态方法，synchronized 监视器为 所在class对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockStatic</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//method body...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步实例方法，synchronized 监视器为 this实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// method body</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步代码块，synchronized 监视器为 指定lock对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockBlock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//block</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ReentrantLock-和-AQS-组合以及方法概览\"><a href=\"#ReentrantLock-和-AQS-组合以及方法概览\" class=\"headerlink\" title=\"ReentrantLock 和 AQS 组合以及方法概览\"></a>ReentrantLock 和 AQS 组合以及方法概览</h2><h3 id=\"Lock接口定义\"><a href=\"#Lock接口定义\" class=\"headerlink\" title=\"Lock接口定义\"></a>Lock接口定义</h3><p>从接口定义中可以看出JUC Lock 方法比synchronized锁的使用上，有更多灵活选择</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Lock</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Condition <span class=\"title function_\">newCondition</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ReentrantLock-聚合-AQS实现\"><a href=\"#ReentrantLock-聚合-AQS实现\" class=\"headerlink\" title=\"ReentrantLock 聚合 AQS实现\"></a>ReentrantLock 聚合 AQS实现</h3><p>ReentrantLock 内部成员变量：<code>Sync sync</code>同步器继承AbstractQueuedSynchronizer，通过AQS模板方法，实现Lock接口功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Lock</span>, java.io.Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 内部组合 队列同步器实现，作为锁的底层实现</span></span><br><span class=\"line\"><span class=\"comment\">    * 避免直接继承AQS，灵活性，且屏蔽底层实现对外暴露</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sync sync;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步器实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *非公平-同步器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Sync</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 公平-同步器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Sync</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从此可以分析得出ReentrantLock和AQS的组合示意图如下：</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/ReentrantLock%E5%92%8CAQS%E7%9A%84%E7%BB%84%E5%90%88%E7%A4%BA%E6%84%8F%E5%9B%BE.webp\"></p>\n<h1 id=\"AQS-结构以及方法分析\"><a href=\"#AQS-结构以及方法分析\" class=\"headerlink\" title=\"AQS 结构以及方法分析\"></a>AQS 结构以及方法分析</h1><h2 id=\"AQS队列结构\"><a href=\"#AQS队列结构\" class=\"headerlink\" title=\"AQS队列结构\"></a>AQS队列结构</h2><h3 id=\"AQS属性说明\"><a href=\"#AQS属性说明\" class=\"headerlink\" title=\"AQS属性说明\"></a>AQS属性说明</h3><p>AbstractQueuedSynchronizer 是一个抽象类，很多方法定义为<code>final</code>模板方法，一些方法定义为<code>abstract</code>抽象方法，由子类选择实现，由此提供不能能力</p>\n<ol>\n<li>AQS内部成员变量 Node类型的：<code>head``tail</code>头尾节点指针，用户记录队列的首尾node对象引用</li>\n<li>AQS等待队列(同步队列 &amp; 条件队列 )为 <code>&quot;CLH&quot; </code>队列变体的虚拟双向队列（FIFO），用于阻塞和队列线程对同步状态的操作</li>\n<li>int类型 <code>state</code>状态字段，记录同步器临界资源的状态数据</li>\n<li>所有属性均有<code>**volatile**</code>关键字修饰，保证多线中的可见性</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractOwnableSynchronizer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 头节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 尾部节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步器状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> state;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同步队列示意图：\"><a href=\"#同步队列示意图：\" class=\"headerlink\" title=\"同步队列示意图：\"></a>同步队列示意图：</h3><p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE.webp\"></p>\n<h2 id=\"Node节点\"><a href=\"#Node节点\" class=\"headerlink\" title=\"Node节点\"></a>Node节点</h2><h3 id=\"Node节点属性说明\"><a href=\"#Node节点属性说明\" class=\"headerlink\" title=\"Node节点属性说明\"></a>Node节点属性说明</h3><p>内部类Node节点为对列中的每一个节点对象</p>\n<ol>\n<li>Node类型的：<code>prev</code>前驱节点指针、<code>next</code>后继节点指针、<code>nextWaiter</code>节点处于条件队列时的后继节点指针，用于构成双向队列</li>\n<li>int 类型的 <code>waitStatus</code>等待状态，记录节点的状态，可能时值为：-3、-2、-1、0、1</li>\n<li>Thread类型的<code>thread</code>对象，为此Node对应的线程对象，用于阻塞和唤醒</li>\n<li>nextWaiter 在获取所同步状态后才能进去条件等待队列，因此不涉及多线程操作，没有使用 <code>volatile</code>关键字修饰</li>\n<li>其他字段属性均有<code>**volatile**</code>关键字修饰，保证多线中的可见性</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Thread thread;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node nextWaiter;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方法和属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>waitStatus</td>\n<td>当前节点在队列中的状态</td>\n</tr>\n<tr>\n<td>thread</td>\n<td>表示处于该节点的线程</td>\n</tr>\n<tr>\n<td>prev</td>\n<td>前驱指针</td>\n</tr>\n<tr>\n<td>next</td>\n<td>后继指针</td>\n</tr>\n<tr>\n<td>nextWaiter</td>\n<td>指向下一个处于CONDITION状态的节点（Condition Queue队列）</td>\n</tr>\n</tbody></table>\n<h3 id=\"Node节点状态说明\"><a href=\"#Node节点状态说明\" class=\"headerlink\" title=\"Node节点状态说明\"></a>Node节点状态说明</h3><table>\n<thead>\n<tr>\n<th>waitStatus枚举</th>\n<th>状态说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CANCELLED &#x3D;  1</td>\n<td>由于超时或中断，线程取消获取请求，节点状态不会再变化</td>\n</tr>\n<tr>\n<td>SIGNAL    &#x3D; -1</td>\n<td>后继node线程需要唤醒</td>\n</tr>\n<tr>\n<td>CONDITION &#x3D; -2</td>\n<td>节点在等待队列中，等待被唤醒</td>\n</tr>\n<tr>\n<td>PROPAGATE &#x3D; -3</td>\n<td>当前线程处在SHARED情况下，指示sh<font style=\"background-color:#FBF5CB;\"></font>are共享状态获取应该传播</td>\n</tr>\n<tr>\n<td>0</td>\n<td>初始化默认值，方便程序状态判断</td>\n</tr>\n</tbody></table>\n<h3 id=\"Node节点示意图\"><a href=\"#Node节点示意图\" class=\"headerlink\" title=\"Node节点示意图\"></a>Node节点示意图</h3><p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/AQS%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88.webp\"></p>\n<h2 id=\"方法分析\"><a href=\"#方法分析\" class=\"headerlink\" title=\"方法分析\"></a>方法分析</h2><h3 id=\"同步状态state操作方法\"><a href=\"#同步状态state操作方法\" class=\"headerlink\" title=\"同步状态state操作方法\"></a>同步状态state操作方法</h3><p>队列状态获取和操作方法为<code>protected final</code>，不对外暴露部，子类可以直接使用，禁止子类重写</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong><font style=\"color:rgb(255, 255, 255);\">方法名</font></strong></th>\n<th><strong><font style=\"color:rgb(255, 255, 255);\">描述</font></strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><font style=\"color:rgb(34, 34, 34);\">protected final int getState()</font></td>\n<td><font style=\"color:rgb(34, 34, 34);\">获取State的值</font></td>\n</tr>\n<tr>\n<td align=\"left\"><font style=\"color:rgb(34, 34, 34);\">protected final void setState(int newState)</font></td>\n<td><font style=\"color:rgb(34, 34, 34);\">设置State的值</font></td>\n</tr>\n<tr>\n<td align=\"left\"><font style=\"color:rgb(34, 34, 34);background-color:#FBDE28;\">protected final boolean compareAndSetState(int expect, int update)</font></td>\n<td><font style=\"color:rgb(34, 34, 34);\">使用CAS方式更新State，原子更新，成功或失败</font></td>\n</tr>\n</tbody></table>\n<p>同步组件或者锁可以分为</p>\n<ul>\n<li>独占式</li>\n<li>共享式</li>\n</ul>\n<p>独占式和共享式组件的同步状态区别也很明显：</p>\n<p>独占式 ：state 0–1</p>\n<p>共享式： state 0–N</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E7%8B%AC%E5%8D%A0%E5%BC%8F%E5%92%8C%E5%85%B1%E4%BA%AB%E5%BC%8F%E7%BB%84%E4%BB%B6%E7%9A%84%E5%90%8C%E6%AD%A5%E7%8A%B6%E6%80%81%E5%8C%BA%E5%88%AB.webp\"></p>\n<h3 id=\"AQS模板方法\"><a href=\"#AQS模板方法\" class=\"headerlink\" title=\"AQS模板方法\"></a>AQS模板方法</h3><p>模板方法为<code>public final</code>定义编排好模板方法流程，外部可以直接调用，禁止子类重写。此处的模板方法也分为两类：独占式、共享式</p>\n<ul>\n<li>acquire 获取同步状态，和响应中断以及超时的版本</li>\n<li>释放同步状态</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void acquire(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">独占式</font>获取同步状态，获取成功则返回，获取失败则进入同步队列，阻塞式（park()）等待，直到获取到锁</td>\n</tr>\n<tr>\n<td>void acquireInterruptibly(int arg)</td>\n<td>可中断获取同步状态，同acquire方法，不过可以响应中断，如果线程在获取同步状态时（获取前或队列中等待时）被中断，则取消获取同步状态，抛出InterruptedException</td>\n</tr>\n<tr>\n<td>boolean tryAcquireNanos(int arg, long nanosTimeout)</td>\n<td>在acquireInterruptibly基础上，增加超时功能，如果在指定时间获取到同步状态，则返回true，否则返回false</td>\n</tr>\n<tr>\n<td>boolean release(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">独占式</font>释放同步状态</td>\n</tr>\n<tr>\n<td>void acquireShared(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">共享式</font>获取同步状态，与acquire的区别是，同一时刻可以有多个线程获取到同步状态</td>\n</tr>\n<tr>\n<td>void acquireSharedInterruptibly(int arg)</td>\n<td>与acquireShared相同，支持响应中断</td>\n</tr>\n<tr>\n<td>boolean tryAcquireSharedNanos(int arg, long nanosTimeout)</td>\n<td>与acquireInteruptibly相同，支持超时返回</td>\n</tr>\n<tr>\n<td>boolean releaseShared(int arg)</td>\n<td><font style=\"background-color:#FBDE28;\">共享式</font>释放同步状态</td>\n</tr>\n</tbody></table>\n<h3 id=\"同步器组件重写方法\"><a href=\"#同步器组件重写方法\" class=\"headerlink\" title=\"同步器组件重写方法\"></a>同步器组件重写方法</h3><p>同步器组件也可以根据独占式和共享式的分类方式，选择重写的方法类型，AQS中需要重写的方法使用异常的方式作为默认实现，避免子类重写不需要的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>boolean tryAcquire(int arg)</td>\n<td>独占式获取同步状态<br/>获取成功则返回true，否则返回false</td>\n</tr>\n<tr>\n<td>boolean tryRelease(int arg)</td>\n<td>独占式释放同步状态<br/>完全释放则返回true，否则返回false</td>\n</tr>\n<tr>\n<td>boolean isHeldExclusively()</td>\n<td>该线程是否正在独占资源，使用Condition时实现此方法</td>\n</tr>\n<tr>\n<td>int tryAcquireShared(int arg)</td>\n<td>共享式获取同步状态<br/>返回值 &lt; 0 获取失败<br/>返回值 &#x3D; 0 获取成功，且无剩余资源<br/>返回值 &gt; 0 获取成功，且有剩余资源，其他线程可继续获取</td>\n</tr>\n<tr>\n<td>boolean tryReleaseShared(int arg)</td>\n<td>共享式释放同步状态，<br/>如果释放后允许后续线程获取（shared、exclusive）则返回true<br/>否则返回false</td>\n</tr>\n</tbody></table>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"2.AQS.acquire&Lock.lock方法实现详解","date":"2025-08-13T23:02:07.000Z","_content":"\n# AQS 方法实现\n根据上述方法介绍，我们自定义实现一个Lock类Reentrant\n\nReentrantLock 实现简略版本，从这里可以看出：\n\nLock：面向使用者，接口定义简单易用，隐藏实现细节\n\nAQS：面向同步器开发者，简化了同步器实现步骤，屏蔽了底层同步状态管理，线程队列，等待、唤醒等操作\n\n\n\n**Lock实现核心API分析：**\n\n| | 加锁 | 解锁 |\n| --- | --- | --- |\n| 面向用户 | lock | unlock |\n| AQS核心模板方法 | acquire | release |\n| 自定义同步器实现方法 | truAcquire | tryRelease |\n\n\nLock简单实现源码\n\n```java\n\npublic class MyLock implements Lock {\n    /**\n     * 聚合AQS同步器实现\n     */\n    private Sync sync = new Sync();\n\n    /**\n     * 自定义AQS同步器实现类\n     */\n    static class Sync extends AbstractQueuedSynchronizer {\n\n        @Override\n        protected boolean tryAcquire(int acquires) {\n            //获取同步状态\n            int state = getState();\n            //判断同步器无其他线程占用\n            if (state == 0) {\n                //cas设置共享状态，不阻塞，返回设置结果\n                if (compareAndSetState(0, acquires)) {\n                    //获取成功，将当前线程设置为独占线程\n                    setExclusiveOwnerThread(Thread.currentThread());\n                    return true;\n                }\n            }\n            //当前同步器被占用，判断独占线程是否为当前线程\n            else if (isHeldExclusively()) {\n                int nextc = state + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                //独占同步器时其他线程无法操作同步状态，没有并发问题\n                //直接设置state+acquires\n                setState(nextc);\n                return true;\n            }\n            // 尝试获取失败\n            return false;\n        }\n\n        @Override\n        protected boolean tryRelease(int arg) {\n            //目标同步状态\n            int state = getState() - arg;\n            //是否完全释放同步器\n            boolean free = false;\n            //判断调用线程是否为独占线程\n            if (!isHeldExclusively()) {\n                //不独占同步器的线程不能操作释放操作\n                throw new IllegalMonitorStateException();\n            }\n            //同步状态为0，完全释放同步器器\n            if (state == 0) {\n                // 完全释放标志为true\n                free = true;\n                //去除独占线程\n                setExclusiveOwnerThread(null);\n            }\n            //独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state\n            setState(state);\n            //返回是否完全释放同步状态\n            return free;\n        }\n\n        @Override\n        protected boolean isHeldExclusively() {\n            //是否独占同步状态\n            return getExclusiveOwnerThread() == Thread.currentThread();\n        }\n    }\n\n    @Override\n    public void lock() {\n        //AQS模板方法：同步器阻塞获取同步状态\n        sync.acquire(1);\n    }\n\n    @Override\n    public void lockInterruptibly() throws InterruptedException {\n        //AQS模板方法：同步器可中断获取\n        sync.acquireInterruptibly(1);\n    }\n\n    @Override\n    public boolean tryLock() {\n        //自定义尝试获取同步状态方法\n        return sync.tryAcquire(1);\n    }\n\n    @Override\n    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {\n        //AQS模板方法：同步器超时可中断获取\n        return sync.tryAcquireNanos(1, unit.toNanos(time));\n    }\n\n    @Override\n    public void unlock() {\n        //AQS模板方法：释放同步状态\n        sync.release(1);\n    }\n\n    @Override\n    public Condition newCondition() {\n        // 创建条件对象，用于条件等待\n        return sync.new ConditionObject();\n    }\n\n}\n```\n\n\n\n## 独占式获取同步状态\n### Lock.lock\n从Lock.lock来看,调用AQS.acquire方法来实现\n\n```java\n    public void lock() {\n        //AQS模板方法：同步器阻塞获取同步状态\n        sync.acquire(1);\n    }\n```\n\n### AQS acquire\n进入AQS的acquire方法来看：\n\n从这里可以看出acquire模板方法的实现逻辑：\n\n1. 首先尝试获取（子类实现tryAcquire），如果成功则返回\n2. 尝试获取失败后\n+ 将线程node造节点加入等待队列尾部\n+ 从已经入队的节点执行获取\n\n```java\n    public final void acquire(int arg) {\n        // 首先调用子类实现的尝试获取方法，如果失败则进入队列等待获取\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\n\n\n\n### AQS addWaiter\n从`addWaiter`和`enq`可以看出，addWaiter为快速一次尝试，尝试失败则进入enq 循环操作直到成功  \n\n加入到等待队列的操作主要可以分为：\n\n1. 使用当前线程构造指定模式（shared、exclusive）node\n2. 确保队列已经初始化\n+ 未初始化则使用空node（虚节点、哨兵节点）初始化head和tail\n3. 将node节点加入到队列尾部\n+ 首先将node的prev指向tail\n+ cas原子操作将tail指针指向node节点\n+ 成功后将原始tail的next指向node\n\n\n\n```java\n        private Node addWaiter(Node mode) {\n        // 获取当前线程，构造不同类型的node节点\n        Node node = new Node(Thread.currentThread(), mode);\n        // Try the fast path of enq; backup to full enq on failure\n        // 尝试直接将node设置为同步队列tail尾部节点，失败后调用全量enq方法\n        Node pred = tail;\n        //tail存在，队列已经初始化\n        if (pred != null) {\n            // 先设置 node 的 prev前驱为 tail\n            node.prev = pred;\n            // cas 尝试设置 tail 为当前 node\n            if (compareAndSetTail(pred, node)) {\n                // 设置成功后 将 tail的next后继指向 node\n                pred.next = node;\n                return node;\n            }\n        }\n        // 设置失败，进入full enq方法\n        enq(node);\n        // 返回node\n        return node;\n    }\n\n    private Node enq(final Node node) {\n        // 循环执行\n        for (;;) {\n            Node t = tail;\n            if (t == null) { // Must initialize\n                //如果队列尚未初始化，使用空node初始化head和tail\n                if (compareAndSetHead(new Node()))\n                    tail = head;\n            } else {\n                // 和 addWaiter 的 快速 enq 方法类似，在for循环中尝试执行直到成功\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {\n                    t.next = node;\n                    // 返回 node 的 prev前驱\n                    return t;\n                }\n            }\n        }\n    }\n```\n\n\n\n### AQS acquireQueued\n`acquireQueued`用户exclusive和uninterruptible的获取，主要是在loop循环中进行tryAcquire和park\n\nacquire loop 主要逻辑：\n\n1. 获取node的pred\n2. 如果pred为head 并且 tryAquire 成功\n+ 则设置node为head，标记获取成功，返回中断标志\n3. pred不是head 或 tryAcquire 失败\n+ 则判断是否应该park，如果需要park，则进行park（被阻塞条件：前驱节点的waitStatus为SIGNAL）\n+ 对中断标志进行赋值\n\n\n\n```java\n\n    /**\n     * Acquires in exclusive uninterruptible mode for thread already in\n     * queue. Used by condition wait methods as well as acquire.\n     * 用于已经在队列中的线程执行独占不可中断的获取\n     */\n    final boolean acquireQueued(final Node node, int arg) {\n        //失败标志\n        boolean failed = true;\n        try {\n            // 中断标志，是否被中断\n            boolean interrupted = false;\n            for (;;) { // acquire loop\n                //获取node的前驱node\n                final Node p = node.predecessor();\n                // 如果前驱为head，则尝试获取\n                if (p == head && tryAcquire(arg)) {\n                    //获取成功\n                    setHead(node);\n                    // head的next指针置空\n                    p.next = null; // help GC\n                    failed = false;\n                    //返回中断标识\n                    return interrupted;\n                }\n                // node不是head的下一个 或 尝试获取失败，\n                // 则根据prev和node的状态判断是否可以阻塞等待，然后执行阻塞\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            // 如果最终获取失败\n            if (failed)\n                // 则取消节点\n                cancelAcquire(node);\n        }\n    }\n\n```\n\n### setHead、selfInterrupt、parkAndCheckInterrupt\n便捷方法：\n\nsetHead：<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">setHead方法是把当前节点置为虚节点，但并没有修改waitStatus，因为它是一直需要用的数据</font>\n\n```java\n    /**\n     * 将bode设置为head，实现出队操作\n     * 将未使用的字段设置为空，方便GC以及避免不必要的遍历\n     *\n     */\n    private void setHead(Node node) {\n        // head 指向 node\n        head = node;\n        // 释放线程\n        node.thread = null;\n        // node的prev即指向head的指针置空\n        node.prev = null;\n    }\n\n    /**\n     * Convenience method to interrupt current thread.\n     * \n     * 便捷方法 interrupt 当前线程\n     */\n    static void selfInterrupt() {\n        Thread.currentThread().interrupt();\n    }\n\n    /**\n     * Convenience method to park and then check if interrupted\n     *\n     * 便捷方法暂停并且检查是否中断\n     */\n    private final boolean parkAndCheckInterrupt() {\n        // 将当前线程进行block\n        // 从park中返回的条件：\n        // 1. 其他线程对当前线程调用unpark方法\n        // 2. 其他线程interrupts 当前线程\n        // 3. 没有任何原因的虚假唤醒\n        // 因此外层需要重新检查线程的运行条件\n        // 一般的范式为：while 中判循环断 执行park，满足条件后跳出循环\n        LockSupport.park(this);\n        // 清理中断标志，并且返回线程是否中断\n        return Thread.interrupted();\n    }\n```\n\n### AQS shouldParkAfterFailedAcquire\n判断是否应该park，是acquire loop 中的主要信号控制\n\n1. 如果pred的status为SIGNAL，pred释放后通知node，node可安全park\n2. 如果pred已经cancelled，则node一直向前寻找第一个node不为cancelled的node，链接到该node后，把取消节点从队列中剔除\n3. 最后，此时pred的status可能为：0或PROPAGATE，cas尝试修改为SIGNAL，但是不park，再次返回acquire loop中retry，\n\n```java\n\n    /**\n     * Checks and updates status for a node that failed to acquire.\n     * Returns true if thread should block. This is the main signal\n     * control in all acquire loops.  Requires that pred == node.prev.\n     * 检查并更新 tryAcquire失败的node节点的状态\n     * acquire loop中的主要状态控制\n     */\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        // 查看pred 前驱节点的状态\n         int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             * 如果node已经设置状态要求pred释放后通知它，则可以安全的暂停\n             */\n            return true;\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             * 如果prev前驱已经取消，则一直向前寻找到第一个状态不是取消的node并链接到该非取消node的后面，把取消节点从队列中剔除\n             */\n            do {\n                // 将node 的 prev 指针指向 prev的prev\n                node.prev = pred = pred.prev;\n                //判断前驱是否已经取消\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             * 此时prev的状态必定时0或传播。\n             * 将状态修改为SIGNAL，表明我们需要通知信号，\n             * 不过仍然不在暂停，调用在acquire loop中再次尝试获取\n             */\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n\n\n\n### cancelAcquire\n取消尝试获取的node\n\n1. 清除关联线程\n2. 跳过cancelled已经取消的前驱node。找到有效前驱pred\n3. 清理取消node，整理队列\n+ node为tail：则将tial指向有效pred\n+ 当前node为head的后继节点：唤醒后继node\n+ 不是hear和taill：后续node需要signal，尝试设置有效pred为SIGNAL，并将pred的next指向后继\n\n对应示意图\n\n根据当前节点的位置，考虑以下三种情况：\n\n\n\n(1) 当前节点是尾节点。\n\n![](/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-尾节点.png)\n\n(2) 当前节点是Head的后继节点。唤醒后继节点\n\n![](/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-head后继节点.png)\n\n(3) 当前节点不是Head的后继节点，也不是尾节点。\n\n![](/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-中间节点.png)\n\n此时所有操作都只操作了next指针没有操作prev指针\n\n> **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">执行cancelAcquire的时候，当前节点的前置节点可能已经从队列中出去了（其他线程已经执行过Try代码块中的shouldParkAfterFailedAcquire方法了），如果此时修改Prev指针，有可能会导致Prev指向另一个已经移除队列的Node，因此这块变化Prev指针不安全。 shouldParkAfterFailedAcquire方法中，会执行下面的代码，其实就是在处理Prev指针。shouldParkAfterFailedAcquire是获取锁失败的情况下才会执行，进入该方法后，说明共享资源已被获取，当前节点之前的节点都不会出现变化，因此这个时候变更Prev指针比较安全。</font>**\n>\n> **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font>**\n>\n\n```java\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n```\n\n**<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font>**\n\n```java\n\n    /**\n     * 取消一个尝试获取的node\n     *\n     */\n    private void cancelAcquire(Node node) {\n        // node不存在则忽略\n        if (node == null)\n            return;\n        // node关联线程清空\n        node.thread = null;\n\n        // 跳过已经取消的前驱\n        Node pred = node.prev;\n        while (pred.waitStatus > 0)\n            node.prev = pred = pred.prev;\n\n        //有效pred前驱的后继节点，后续cas替换next使用\n        Node predNext = pred.next;\n\n        // 将状态设置为cancelled,其他节点可以跳过此node\n        node.waitStatus = Node.CANCELLED;\n\n        // 如果node为tail，则将node指向有效pred\n        if (node == tail && compareAndSetTail(node, pred)) {\n            compareAndSetNext(pred, predNext, null);\n        } else {\n            //如果后继node需要信号，则尝试设置有效前驱的 next\n            //成功则后继node将获取到信号，\n            //其他情况则唤醒后继node继续处理\n            int ws;\n            if (pred != head &&\n                ((ws = pred.waitStatus) == Node.SIGNAL ||\n                 (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n                pred.thread != null) {\n                // 后继节点存在且非取消，设置为有效前驱的next\n                Node next = node.next;\n                if (next != null && next.waitStatus <= 0)\n                    compareAndSetNext(pred, predNext, next);\n            } else {\n                //条件不满足，则唤醒后继node\n                unparkSuccessor(node);\n            }\n            //node 的 next 指向自己\n            node.next = node; // help GC\n        }\n    }\n```\n\n## acquire流程图\n了解完整个acquire的代码实现，再看一下acquire的流程图\n\n![](/images/post/java/juc/aqs/aqs详解/acquire流程图.webp)\n\n> 参考链接：\n>\n> + [从ReentrantLock的实现看AQS的原理及应用](https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html)\n> + [万字超强图文讲解AQS以及ReentrantLock应用](https://mp.weixin.qq.com/s/msZXjpuT74EJ_gDY5DSOCQ)\n>\n\n\n\n","source":"_posts/java/juc/aqs/2.AQS.acquire&Lock.lock方法实现详解.md","raw":"---\ntitle: 2.AQS.acquire&Lock.lock方法实现详解\ndate: 2025-08-14 07:02:07\ntags:\n- java\n- juc\n\ncategory:\n- java\n- juc\n- aqs\n\n---\n\n# AQS 方法实现\n根据上述方法介绍，我们自定义实现一个Lock类Reentrant\n\nReentrantLock 实现简略版本，从这里可以看出：\n\nLock：面向使用者，接口定义简单易用，隐藏实现细节\n\nAQS：面向同步器开发者，简化了同步器实现步骤，屏蔽了底层同步状态管理，线程队列，等待、唤醒等操作\n\n\n\n**Lock实现核心API分析：**\n\n| | 加锁 | 解锁 |\n| --- | --- | --- |\n| 面向用户 | lock | unlock |\n| AQS核心模板方法 | acquire | release |\n| 自定义同步器实现方法 | truAcquire | tryRelease |\n\n\nLock简单实现源码\n\n```java\n\npublic class MyLock implements Lock {\n    /**\n     * 聚合AQS同步器实现\n     */\n    private Sync sync = new Sync();\n\n    /**\n     * 自定义AQS同步器实现类\n     */\n    static class Sync extends AbstractQueuedSynchronizer {\n\n        @Override\n        protected boolean tryAcquire(int acquires) {\n            //获取同步状态\n            int state = getState();\n            //判断同步器无其他线程占用\n            if (state == 0) {\n                //cas设置共享状态，不阻塞，返回设置结果\n                if (compareAndSetState(0, acquires)) {\n                    //获取成功，将当前线程设置为独占线程\n                    setExclusiveOwnerThread(Thread.currentThread());\n                    return true;\n                }\n            }\n            //当前同步器被占用，判断独占线程是否为当前线程\n            else if (isHeldExclusively()) {\n                int nextc = state + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                //独占同步器时其他线程无法操作同步状态，没有并发问题\n                //直接设置state+acquires\n                setState(nextc);\n                return true;\n            }\n            // 尝试获取失败\n            return false;\n        }\n\n        @Override\n        protected boolean tryRelease(int arg) {\n            //目标同步状态\n            int state = getState() - arg;\n            //是否完全释放同步器\n            boolean free = false;\n            //判断调用线程是否为独占线程\n            if (!isHeldExclusively()) {\n                //不独占同步器的线程不能操作释放操作\n                throw new IllegalMonitorStateException();\n            }\n            //同步状态为0，完全释放同步器器\n            if (state == 0) {\n                // 完全释放标志为true\n                free = true;\n                //去除独占线程\n                setExclusiveOwnerThread(null);\n            }\n            //独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state\n            setState(state);\n            //返回是否完全释放同步状态\n            return free;\n        }\n\n        @Override\n        protected boolean isHeldExclusively() {\n            //是否独占同步状态\n            return getExclusiveOwnerThread() == Thread.currentThread();\n        }\n    }\n\n    @Override\n    public void lock() {\n        //AQS模板方法：同步器阻塞获取同步状态\n        sync.acquire(1);\n    }\n\n    @Override\n    public void lockInterruptibly() throws InterruptedException {\n        //AQS模板方法：同步器可中断获取\n        sync.acquireInterruptibly(1);\n    }\n\n    @Override\n    public boolean tryLock() {\n        //自定义尝试获取同步状态方法\n        return sync.tryAcquire(1);\n    }\n\n    @Override\n    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {\n        //AQS模板方法：同步器超时可中断获取\n        return sync.tryAcquireNanos(1, unit.toNanos(time));\n    }\n\n    @Override\n    public void unlock() {\n        //AQS模板方法：释放同步状态\n        sync.release(1);\n    }\n\n    @Override\n    public Condition newCondition() {\n        // 创建条件对象，用于条件等待\n        return sync.new ConditionObject();\n    }\n\n}\n```\n\n\n\n## 独占式获取同步状态\n### Lock.lock\n从Lock.lock来看,调用AQS.acquire方法来实现\n\n```java\n    public void lock() {\n        //AQS模板方法：同步器阻塞获取同步状态\n        sync.acquire(1);\n    }\n```\n\n### AQS acquire\n进入AQS的acquire方法来看：\n\n从这里可以看出acquire模板方法的实现逻辑：\n\n1. 首先尝试获取（子类实现tryAcquire），如果成功则返回\n2. 尝试获取失败后\n+ 将线程node造节点加入等待队列尾部\n+ 从已经入队的节点执行获取\n\n```java\n    public final void acquire(int arg) {\n        // 首先调用子类实现的尝试获取方法，如果失败则进入队列等待获取\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\n\n\n\n### AQS addWaiter\n从`addWaiter`和`enq`可以看出，addWaiter为快速一次尝试，尝试失败则进入enq 循环操作直到成功  \n\n加入到等待队列的操作主要可以分为：\n\n1. 使用当前线程构造指定模式（shared、exclusive）node\n2. 确保队列已经初始化\n+ 未初始化则使用空node（虚节点、哨兵节点）初始化head和tail\n3. 将node节点加入到队列尾部\n+ 首先将node的prev指向tail\n+ cas原子操作将tail指针指向node节点\n+ 成功后将原始tail的next指向node\n\n\n\n```java\n        private Node addWaiter(Node mode) {\n        // 获取当前线程，构造不同类型的node节点\n        Node node = new Node(Thread.currentThread(), mode);\n        // Try the fast path of enq; backup to full enq on failure\n        // 尝试直接将node设置为同步队列tail尾部节点，失败后调用全量enq方法\n        Node pred = tail;\n        //tail存在，队列已经初始化\n        if (pred != null) {\n            // 先设置 node 的 prev前驱为 tail\n            node.prev = pred;\n            // cas 尝试设置 tail 为当前 node\n            if (compareAndSetTail(pred, node)) {\n                // 设置成功后 将 tail的next后继指向 node\n                pred.next = node;\n                return node;\n            }\n        }\n        // 设置失败，进入full enq方法\n        enq(node);\n        // 返回node\n        return node;\n    }\n\n    private Node enq(final Node node) {\n        // 循环执行\n        for (;;) {\n            Node t = tail;\n            if (t == null) { // Must initialize\n                //如果队列尚未初始化，使用空node初始化head和tail\n                if (compareAndSetHead(new Node()))\n                    tail = head;\n            } else {\n                // 和 addWaiter 的 快速 enq 方法类似，在for循环中尝试执行直到成功\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {\n                    t.next = node;\n                    // 返回 node 的 prev前驱\n                    return t;\n                }\n            }\n        }\n    }\n```\n\n\n\n### AQS acquireQueued\n`acquireQueued`用户exclusive和uninterruptible的获取，主要是在loop循环中进行tryAcquire和park\n\nacquire loop 主要逻辑：\n\n1. 获取node的pred\n2. 如果pred为head 并且 tryAquire 成功\n+ 则设置node为head，标记获取成功，返回中断标志\n3. pred不是head 或 tryAcquire 失败\n+ 则判断是否应该park，如果需要park，则进行park（被阻塞条件：前驱节点的waitStatus为SIGNAL）\n+ 对中断标志进行赋值\n\n\n\n```java\n\n    /**\n     * Acquires in exclusive uninterruptible mode for thread already in\n     * queue. Used by condition wait methods as well as acquire.\n     * 用于已经在队列中的线程执行独占不可中断的获取\n     */\n    final boolean acquireQueued(final Node node, int arg) {\n        //失败标志\n        boolean failed = true;\n        try {\n            // 中断标志，是否被中断\n            boolean interrupted = false;\n            for (;;) { // acquire loop\n                //获取node的前驱node\n                final Node p = node.predecessor();\n                // 如果前驱为head，则尝试获取\n                if (p == head && tryAcquire(arg)) {\n                    //获取成功\n                    setHead(node);\n                    // head的next指针置空\n                    p.next = null; // help GC\n                    failed = false;\n                    //返回中断标识\n                    return interrupted;\n                }\n                // node不是head的下一个 或 尝试获取失败，\n                // 则根据prev和node的状态判断是否可以阻塞等待，然后执行阻塞\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            // 如果最终获取失败\n            if (failed)\n                // 则取消节点\n                cancelAcquire(node);\n        }\n    }\n\n```\n\n### setHead、selfInterrupt、parkAndCheckInterrupt\n便捷方法：\n\nsetHead：<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">setHead方法是把当前节点置为虚节点，但并没有修改waitStatus，因为它是一直需要用的数据</font>\n\n```java\n    /**\n     * 将bode设置为head，实现出队操作\n     * 将未使用的字段设置为空，方便GC以及避免不必要的遍历\n     *\n     */\n    private void setHead(Node node) {\n        // head 指向 node\n        head = node;\n        // 释放线程\n        node.thread = null;\n        // node的prev即指向head的指针置空\n        node.prev = null;\n    }\n\n    /**\n     * Convenience method to interrupt current thread.\n     * \n     * 便捷方法 interrupt 当前线程\n     */\n    static void selfInterrupt() {\n        Thread.currentThread().interrupt();\n    }\n\n    /**\n     * Convenience method to park and then check if interrupted\n     *\n     * 便捷方法暂停并且检查是否中断\n     */\n    private final boolean parkAndCheckInterrupt() {\n        // 将当前线程进行block\n        // 从park中返回的条件：\n        // 1. 其他线程对当前线程调用unpark方法\n        // 2. 其他线程interrupts 当前线程\n        // 3. 没有任何原因的虚假唤醒\n        // 因此外层需要重新检查线程的运行条件\n        // 一般的范式为：while 中判循环断 执行park，满足条件后跳出循环\n        LockSupport.park(this);\n        // 清理中断标志，并且返回线程是否中断\n        return Thread.interrupted();\n    }\n```\n\n### AQS shouldParkAfterFailedAcquire\n判断是否应该park，是acquire loop 中的主要信号控制\n\n1. 如果pred的status为SIGNAL，pred释放后通知node，node可安全park\n2. 如果pred已经cancelled，则node一直向前寻找第一个node不为cancelled的node，链接到该node后，把取消节点从队列中剔除\n3. 最后，此时pred的status可能为：0或PROPAGATE，cas尝试修改为SIGNAL，但是不park，再次返回acquire loop中retry，\n\n```java\n\n    /**\n     * Checks and updates status for a node that failed to acquire.\n     * Returns true if thread should block. This is the main signal\n     * control in all acquire loops.  Requires that pred == node.prev.\n     * 检查并更新 tryAcquire失败的node节点的状态\n     * acquire loop中的主要状态控制\n     */\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        // 查看pred 前驱节点的状态\n         int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             * 如果node已经设置状态要求pred释放后通知它，则可以安全的暂停\n             */\n            return true;\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             * 如果prev前驱已经取消，则一直向前寻找到第一个状态不是取消的node并链接到该非取消node的后面，把取消节点从队列中剔除\n             */\n            do {\n                // 将node 的 prev 指针指向 prev的prev\n                node.prev = pred = pred.prev;\n                //判断前驱是否已经取消\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             * 此时prev的状态必定时0或传播。\n             * 将状态修改为SIGNAL，表明我们需要通知信号，\n             * 不过仍然不在暂停，调用在acquire loop中再次尝试获取\n             */\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n\n\n\n### cancelAcquire\n取消尝试获取的node\n\n1. 清除关联线程\n2. 跳过cancelled已经取消的前驱node。找到有效前驱pred\n3. 清理取消node，整理队列\n+ node为tail：则将tial指向有效pred\n+ 当前node为head的后继节点：唤醒后继node\n+ 不是hear和taill：后续node需要signal，尝试设置有效pred为SIGNAL，并将pred的next指向后继\n\n对应示意图\n\n根据当前节点的位置，考虑以下三种情况：\n\n\n\n(1) 当前节点是尾节点。\n\n![](/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-尾节点.png)\n\n(2) 当前节点是Head的后继节点。唤醒后继节点\n\n![](/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-head后继节点.png)\n\n(3) 当前节点不是Head的后继节点，也不是尾节点。\n\n![](/images/post/java/juc/aqs/aqs详解/取消尝试获取的node-中间节点.png)\n\n此时所有操作都只操作了next指针没有操作prev指针\n\n> **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">执行cancelAcquire的时候，当前节点的前置节点可能已经从队列中出去了（其他线程已经执行过Try代码块中的shouldParkAfterFailedAcquire方法了），如果此时修改Prev指针，有可能会导致Prev指向另一个已经移除队列的Node，因此这块变化Prev指针不安全。 shouldParkAfterFailedAcquire方法中，会执行下面的代码，其实就是在处理Prev指针。shouldParkAfterFailedAcquire是获取锁失败的情况下才会执行，进入该方法后，说明共享资源已被获取，当前节点之前的节点都不会出现变化，因此这个时候变更Prev指针比较安全。</font>**\n>\n> **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font>**\n>\n\n```java\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n```\n\n**<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font>**\n\n```java\n\n    /**\n     * 取消一个尝试获取的node\n     *\n     */\n    private void cancelAcquire(Node node) {\n        // node不存在则忽略\n        if (node == null)\n            return;\n        // node关联线程清空\n        node.thread = null;\n\n        // 跳过已经取消的前驱\n        Node pred = node.prev;\n        while (pred.waitStatus > 0)\n            node.prev = pred = pred.prev;\n\n        //有效pred前驱的后继节点，后续cas替换next使用\n        Node predNext = pred.next;\n\n        // 将状态设置为cancelled,其他节点可以跳过此node\n        node.waitStatus = Node.CANCELLED;\n\n        // 如果node为tail，则将node指向有效pred\n        if (node == tail && compareAndSetTail(node, pred)) {\n            compareAndSetNext(pred, predNext, null);\n        } else {\n            //如果后继node需要信号，则尝试设置有效前驱的 next\n            //成功则后继node将获取到信号，\n            //其他情况则唤醒后继node继续处理\n            int ws;\n            if (pred != head &&\n                ((ws = pred.waitStatus) == Node.SIGNAL ||\n                 (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n                pred.thread != null) {\n                // 后继节点存在且非取消，设置为有效前驱的next\n                Node next = node.next;\n                if (next != null && next.waitStatus <= 0)\n                    compareAndSetNext(pred, predNext, next);\n            } else {\n                //条件不满足，则唤醒后继node\n                unparkSuccessor(node);\n            }\n            //node 的 next 指向自己\n            node.next = node; // help GC\n        }\n    }\n```\n\n## acquire流程图\n了解完整个acquire的代码实现，再看一下acquire的流程图\n\n![](/images/post/java/juc/aqs/aqs详解/acquire流程图.webp)\n\n> 参考链接：\n>\n> + [从ReentrantLock的实现看AQS的原理及应用](https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html)\n> + [万字超强图文讲解AQS以及ReentrantLock应用](https://mp.weixin.qq.com/s/msZXjpuT74EJ_gDY5DSOCQ)\n>\n\n\n\n","slug":"java-juc-aqs-2-AQS-acquire-Lock-lock方法实现详解","published":1,"updated":"2025-08-13T23:12:10.917Z","comments":1,"layout":"post","photos":[],"_id":"cmeal74gl0007jrci1m4hej3l","content":"<h1 id=\"AQS-方法实现\"><a href=\"#AQS-方法实现\" class=\"headerlink\" title=\"AQS 方法实现\"></a>AQS 方法实现</h1><p>根据上述方法介绍，我们自定义实现一个Lock类Reentrant</p>\n<p>ReentrantLock 实现简略版本，从这里可以看出：</p>\n<p>Lock：面向使用者，接口定义简单易用，隐藏实现细节</p>\n<p>AQS：面向同步器开发者，简化了同步器实现步骤，屏蔽了底层同步状态管理，线程队列，等待、唤醒等操作</p>\n<p><strong>Lock实现核心API分析：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>加锁</th>\n<th>解锁</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>面向用户</td>\n<td>lock</td>\n<td>unlock</td>\n</tr>\n<tr>\n<td>AQS核心模板方法</td>\n<td>acquire</td>\n<td>release</td>\n</tr>\n<tr>\n<td>自定义同步器实现方法</td>\n<td>truAcquire</td>\n<td>tryRelease</td>\n</tr>\n</tbody></table>\n<p>Lock简单实现源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Lock</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 聚合AQS同步器实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Sync</span> <span class=\"variable\">sync</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sync</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义AQS同步器实现类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取同步状态</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">            <span class=\"comment\">//判断同步器无其他线程占用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//cas设置共享状态，不阻塞，返回设置结果</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取成功，将当前线程设置为独占线程</span></span><br><span class=\"line\">                    setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当前同步器被占用，判断独占线程是否为当前线程</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isHeldExclusively()) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> state + acquires;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//独占同步器时其他线程无法操作同步状态，没有并发问题</span></span><br><span class=\"line\">                <span class=\"comment\">//直接设置state+acquires</span></span><br><span class=\"line\">                setState(nextc);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 尝试获取失败</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//目标同步状态</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> getState() - arg;</span><br><span class=\"line\">            <span class=\"comment\">//是否完全释放同步器</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//判断调用线程是否为独占线程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isHeldExclusively()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//不独占同步器的线程不能操作释放操作</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//同步状态为0，完全释放同步器器</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 完全释放标志为true</span></span><br><span class=\"line\">                free = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">//去除独占线程</span></span><br><span class=\"line\">                setExclusiveOwnerThread(<span class=\"literal\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state</span></span><br><span class=\"line\">            setState(state);</span><br><span class=\"line\">            <span class=\"comment\">//返回是否完全释放同步状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHeldExclusively</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//是否独占同步状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：同步器阻塞获取同步状态</span></span><br><span class=\"line\">        sync.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：同步器可中断获取</span></span><br><span class=\"line\">        sync.acquireInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义尝试获取同步状态方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sync.tryAcquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：同步器超时可中断获取</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sync.tryAcquireNanos(<span class=\"number\">1</span>, unit.toNanos(time));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：释放同步状态</span></span><br><span class=\"line\">        sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Condition <span class=\"title function_\">newCondition</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建条件对象，用于条件等待</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sync.<span class=\"keyword\">new</span> <span class=\"title class_\">ConditionObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"独占式获取同步状态\"><a href=\"#独占式获取同步状态\" class=\"headerlink\" title=\"独占式获取同步状态\"></a>独占式获取同步状态</h2><h3 id=\"Lock-lock\"><a href=\"#Lock-lock\" class=\"headerlink\" title=\"Lock.lock\"></a>Lock.lock</h3><p>从Lock.lock来看,调用AQS.acquire方法来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：同步器阻塞获取同步状态</span></span><br><span class=\"line\">    sync.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AQS-acquire\"><a href=\"#AQS-acquire\" class=\"headerlink\" title=\"AQS acquire\"></a>AQS acquire</h3><p>进入AQS的acquire方法来看：</p>\n<p>从这里可以看出acquire模板方法的实现逻辑：</p>\n<ol>\n<li>首先尝试获取（子类实现tryAcquire），如果成功则返回</li>\n<li>尝试获取失败后</li>\n</ol>\n<ul>\n<li>将线程node造节点加入等待队列尾部</li>\n<li>从已经入队的节点执行获取</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先调用子类实现的尝试获取方法，如果失败则进入队列等待获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AQS-addWaiter\"><a href=\"#AQS-addWaiter\" class=\"headerlink\" title=\"AQS addWaiter\"></a>AQS addWaiter</h3><p>从<code>addWaiter</code>和<code>enq</code>可以看出，addWaiter为快速一次尝试，尝试失败则进入enq 循环操作直到成功  </p>\n<p>加入到等待队列的操作主要可以分为：</p>\n<ol>\n<li>使用当前线程构造指定模式（shared、exclusive）node</li>\n<li>确保队列已经初始化</li>\n</ol>\n<ul>\n<li>未初始化则使用空node（虚节点、哨兵节点）初始化head和tail</li>\n</ul>\n<ol start=\"3\">\n<li>将node节点加入到队列尾部</li>\n</ol>\n<ul>\n<li>首先将node的prev指向tail</li>\n<li>cas原子操作将tail指针指向node节点</li>\n<li>成功后将原始tail的next指向node</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程，构造不同类型的node节点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);</span><br><span class=\"line\">    <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">    <span class=\"comment\">// 尝试直接将node设置为同步队列tail尾部节点，失败后调用全量enq方法</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">    <span class=\"comment\">//tail存在，队列已经初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先设置 node 的 prev前驱为 tail</span></span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\">        <span class=\"comment\">// cas 尝试设置 tail 为当前 node</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置成功后 将 tail的next后继指向 node</span></span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置失败，进入full enq方法</span></span><br><span class=\"line\">    enq(node);</span><br><span class=\"line\">    <span class=\"comment\">// 返回node</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环执行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// Must initialize</span></span><br><span class=\"line\">            <span class=\"comment\">//如果队列尚未初始化，使用空node初始化head和tail</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>()))</span><br><span class=\"line\">                tail = head;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 和 addWaiter 的 快速 enq 方法类似，在for循环中尝试执行直到成功</span></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\">                t.next = node;</span><br><span class=\"line\">                <span class=\"comment\">// 返回 node 的 prev前驱</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AQS-acquireQueued\"><a href=\"#AQS-acquireQueued\" class=\"headerlink\" title=\"AQS acquireQueued\"></a>AQS acquireQueued</h3><p><code>acquireQueued</code>用户exclusive和uninterruptible的获取，主要是在loop循环中进行tryAcquire和park</p>\n<p>acquire loop 主要逻辑：</p>\n<ol>\n<li>获取node的pred</li>\n<li>如果pred为head 并且 tryAquire 成功</li>\n</ol>\n<ul>\n<li>则设置node为head，标记获取成功，返回中断标志</li>\n</ul>\n<ol start=\"3\">\n<li>pred不是head 或 tryAcquire 失败</li>\n</ol>\n<ul>\n<li>则判断是否应该park，如果需要park，则进行park（被阻塞条件：前驱节点的waitStatus为SIGNAL）</li>\n<li>对中断标志进行赋值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Acquires in exclusive uninterruptible mode for thread already in</span></span><br><span class=\"line\"><span class=\"comment\"> * queue. Used by condition wait methods as well as acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于已经在队列中的线程执行独占不可中断的获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//失败标志</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 中断标志，是否被中断</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123; <span class=\"comment\">// acquire loop</span></span><br><span class=\"line\">            <span class=\"comment\">//获取node的前驱node</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">// 如果前驱为head，则尝试获取</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取成功</span></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                <span class=\"comment\">// head的next指针置空</span></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"comment\">//返回中断标识</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// node不是head的下一个 或 尝试获取失败，</span></span><br><span class=\"line\">            <span class=\"comment\">// 则根据prev和node的状态判断是否可以阻塞等待，然后执行阻塞</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果最终获取失败</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            <span class=\"comment\">// 则取消节点</span></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setHead、selfInterrupt、parkAndCheckInterrupt\"><a href=\"#setHead、selfInterrupt、parkAndCheckInterrupt\" class=\"headerlink\" title=\"setHead、selfInterrupt、parkAndCheckInterrupt\"></a>setHead、selfInterrupt、parkAndCheckInterrupt</h3><p>便捷方法：</p>\n<p>setHead：<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">setHead方法是把当前节点置为虚节点，但并没有修改waitStatus，因为它是一直需要用的数据</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将bode设置为head，实现出队操作</span></span><br><span class=\"line\"><span class=\"comment\"> * 将未使用的字段设置为空，方便GC以及避免不必要的遍历</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHead</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// head 指向 node</span></span><br><span class=\"line\">    head = node;</span><br><span class=\"line\">    <span class=\"comment\">// 释放线程</span></span><br><span class=\"line\">    node.thread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// node的prev即指向head的指针置空</span></span><br><span class=\"line\">    node.prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to interrupt current thread.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 便捷方法 interrupt 当前线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selfInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Thread.currentThread().interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to park and then check if interrupted</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 便捷方法暂停并且检查是否中断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前线程进行block</span></span><br><span class=\"line\">    <span class=\"comment\">// 从park中返回的条件：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 其他线程对当前线程调用unpark方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 其他线程interrupts 当前线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 没有任何原因的虚假唤醒</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此外层需要重新检查线程的运行条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 一般的范式为：while 中判循环断 执行park，满足条件后跳出循环</span></span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 清理中断标志，并且返回线程是否中断</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AQS-shouldParkAfterFailedAcquire\"><a href=\"#AQS-shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"AQS shouldParkAfterFailedAcquire\"></a>AQS shouldParkAfterFailedAcquire</h3><p>判断是否应该park，是acquire loop 中的主要信号控制</p>\n<ol>\n<li>如果pred的status为SIGNAL，pred释放后通知node，node可安全park</li>\n<li>如果pred已经cancelled，则node一直向前寻找第一个node不为cancelled的node，链接到该node后，把取消节点从队列中剔除</li>\n<li>最后，此时pred的status可能为：0或PROPAGATE，cas尝试修改为SIGNAL，但是不park，再次返回acquire loop中retry，</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Checks and updates status for a node that failed to acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if thread should block. This is the main signal</span></span><br><span class=\"line\"><span class=\"comment\"> * control in all acquire loops.  Requires that pred == node.prev.</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查并更新 tryAcquire失败的node节点的状态</span></span><br><span class=\"line\"><span class=\"comment\"> * acquire loop中的主要状态控制</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查看pred 前驱节点的状态</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> pred.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果node已经设置状态要求pred释放后通知它，则可以安全的暂停</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果prev前驱已经取消，则一直向前寻找到第一个状态不是取消的node并链接到该非取消node的后面，把取消节点从队列中剔除</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将node 的 prev 指针指向 prev的prev</span></span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">            <span class=\"comment\">//判断前驱是否已经取消</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         * 此时prev的状态必定时0或传播。</span></span><br><span class=\"line\"><span class=\"comment\">         * 将状态修改为SIGNAL，表明我们需要通知信号，</span></span><br><span class=\"line\"><span class=\"comment\">         * 不过仍然不在暂停，调用在acquire loop中再次尝试获取</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"cancelAcquire\"><a href=\"#cancelAcquire\" class=\"headerlink\" title=\"cancelAcquire\"></a>cancelAcquire</h3><p>取消尝试获取的node</p>\n<ol>\n<li>清除关联线程</li>\n<li>跳过cancelled已经取消的前驱node。找到有效前驱pred</li>\n<li>清理取消node，整理队列</li>\n</ol>\n<ul>\n<li>node为tail：则将tial指向有效pred</li>\n<li>当前node为head的后继节点：唤醒后继node</li>\n<li>不是hear和taill：后续node需要signal，尝试设置有效pred为SIGNAL，并将pred的next指向后继</li>\n</ul>\n<p>对应示意图</p>\n<p>根据当前节点的位置，考虑以下三种情况：</p>\n<p>(1) 当前节点是尾节点。</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%8F%96%E6%B6%88%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E7%9A%84node-%E5%B0%BE%E8%8A%82%E7%82%B9.png\"></p>\n<p>(2) 当前节点是Head的后继节点。唤醒后继节点</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%8F%96%E6%B6%88%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E7%9A%84node-head%E5%90%8E%E7%BB%A7%E8%8A%82%E7%82%B9.png\"></p>\n<p>(3) 当前节点不是Head的后继节点，也不是尾节点。</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%8F%96%E6%B6%88%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E7%9A%84node-%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9.png\"></p>\n<p>此时所有操作都只操作了next指针没有操作prev指针</p>\n<blockquote>\n<p><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">执行cancelAcquire的时候，当前节点的前置节点可能已经从队列中出去了（其他线程已经执行过Try代码块中的shouldParkAfterFailedAcquire方法了），如果此时修改Prev指针，有可能会导致Prev指向另一个已经移除队列的Node，因此这块变化Prev指针不安全。 shouldParkAfterFailedAcquire方法中，会执行下面的代码，其实就是在处理Prev指针。shouldParkAfterFailedAcquire是获取锁失败的情况下才会执行，进入该方法后，说明共享资源已被获取，当前节点之前的节点都不会出现变化，因此这个时候变更Prev指针比较安全。</font></strong></p>\n<p><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font></strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    node.prev = pred = pred.prev;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取消一个尝试获取的node</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelAcquire</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// node不存在则忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// node关联线程清空</span></span><br><span class=\"line\">    node.thread = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 跳过已经取消的前驱</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> node.prev;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有效pred前驱的后继节点，后续cas替换next使用</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">predNext</span> <span class=\"operator\">=</span> pred.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将状态设置为cancelled,其他节点可以跳过此node</span></span><br><span class=\"line\">    node.waitStatus = Node.CANCELLED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果node为tail，则将node指向有效pred</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class=\"line\">        compareAndSetNext(pred, predNext, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果后继node需要信号，则尝试设置有效前驱的 next</span></span><br><span class=\"line\">        <span class=\"comment\">//成功则后继node将获取到信号，</span></span><br><span class=\"line\">        <span class=\"comment\">//其他情况则唤醒后继node继续处理</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ws;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred != head &amp;&amp;</span><br><span class=\"line\">            ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class=\"line\">             (ws &lt;= <span class=\"number\">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class=\"line\">            pred.thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 后继节点存在且非取消，设置为有效前驱的next</span></span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span> &amp;&amp; next.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                compareAndSetNext(pred, predNext, next);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//条件不满足，则唤醒后继node</span></span><br><span class=\"line\">            unparkSuccessor(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//node 的 next 指向自己</span></span><br><span class=\"line\">        node.next = node; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"acquire流程图\"><a href=\"#acquire流程图\" class=\"headerlink\" title=\"acquire流程图\"></a>acquire流程图</h2><p>了解完整个acquire的代码实现，再看一下acquire的流程图</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/acquire%E6%B5%81%E7%A8%8B%E5%9B%BE.webp\"></p>\n<blockquote>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html\">从ReentrantLock的实现看AQS的原理及应用</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/msZXjpuT74EJ_gDY5DSOCQ\">万字超强图文讲解AQS以及ReentrantLock应用</a></li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"AQS-方法实现\"><a href=\"#AQS-方法实现\" class=\"headerlink\" title=\"AQS 方法实现\"></a>AQS 方法实现</h1><p>根据上述方法介绍，我们自定义实现一个Lock类Reentrant</p>\n<p>ReentrantLock 实现简略版本，从这里可以看出：</p>\n<p>Lock：面向使用者，接口定义简单易用，隐藏实现细节</p>\n<p>AQS：面向同步器开发者，简化了同步器实现步骤，屏蔽了底层同步状态管理，线程队列，等待、唤醒等操作</p>\n<p><strong>Lock实现核心API分析：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>加锁</th>\n<th>解锁</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>面向用户</td>\n<td>lock</td>\n<td>unlock</td>\n</tr>\n<tr>\n<td>AQS核心模板方法</td>\n<td>acquire</td>\n<td>release</td>\n</tr>\n<tr>\n<td>自定义同步器实现方法</td>\n<td>truAcquire</td>\n<td>tryRelease</td>\n</tr>\n</tbody></table>\n<p>Lock简单实现源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Lock</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 聚合AQS同步器实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Sync</span> <span class=\"variable\">sync</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sync</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义AQS同步器实现类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取同步状态</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">            <span class=\"comment\">//判断同步器无其他线程占用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//cas设置共享状态，不阻塞，返回设置结果</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取成功，将当前线程设置为独占线程</span></span><br><span class=\"line\">                    setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当前同步器被占用，判断独占线程是否为当前线程</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isHeldExclusively()) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> state + acquires;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//独占同步器时其他线程无法操作同步状态，没有并发问题</span></span><br><span class=\"line\">                <span class=\"comment\">//直接设置state+acquires</span></span><br><span class=\"line\">                setState(nextc);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 尝试获取失败</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//目标同步状态</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> getState() - arg;</span><br><span class=\"line\">            <span class=\"comment\">//是否完全释放同步器</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//判断调用线程是否为独占线程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isHeldExclusively()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//不独占同步器的线程不能操作释放操作</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//同步状态为0，完全释放同步器器</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 完全释放标志为true</span></span><br><span class=\"line\">                free = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">//去除独占线程</span></span><br><span class=\"line\">                setExclusiveOwnerThread(<span class=\"literal\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state</span></span><br><span class=\"line\">            setState(state);</span><br><span class=\"line\">            <span class=\"comment\">//返回是否完全释放同步状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHeldExclusively</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//是否独占同步状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：同步器阻塞获取同步状态</span></span><br><span class=\"line\">        sync.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：同步器可中断获取</span></span><br><span class=\"line\">        sync.acquireInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义尝试获取同步状态方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sync.tryAcquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：同步器超时可中断获取</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sync.tryAcquireNanos(<span class=\"number\">1</span>, unit.toNanos(time));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AQS模板方法：释放同步状态</span></span><br><span class=\"line\">        sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Condition <span class=\"title function_\">newCondition</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建条件对象，用于条件等待</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sync.<span class=\"keyword\">new</span> <span class=\"title class_\">ConditionObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"独占式获取同步状态\"><a href=\"#独占式获取同步状态\" class=\"headerlink\" title=\"独占式获取同步状态\"></a>独占式获取同步状态</h2><h3 id=\"Lock-lock\"><a href=\"#Lock-lock\" class=\"headerlink\" title=\"Lock.lock\"></a>Lock.lock</h3><p>从Lock.lock来看,调用AQS.acquire方法来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：同步器阻塞获取同步状态</span></span><br><span class=\"line\">    sync.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AQS-acquire\"><a href=\"#AQS-acquire\" class=\"headerlink\" title=\"AQS acquire\"></a>AQS acquire</h3><p>进入AQS的acquire方法来看：</p>\n<p>从这里可以看出acquire模板方法的实现逻辑：</p>\n<ol>\n<li>首先尝试获取（子类实现tryAcquire），如果成功则返回</li>\n<li>尝试获取失败后</li>\n</ol>\n<ul>\n<li>将线程node造节点加入等待队列尾部</li>\n<li>从已经入队的节点执行获取</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先调用子类实现的尝试获取方法，如果失败则进入队列等待获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AQS-addWaiter\"><a href=\"#AQS-addWaiter\" class=\"headerlink\" title=\"AQS addWaiter\"></a>AQS addWaiter</h3><p>从<code>addWaiter</code>和<code>enq</code>可以看出，addWaiter为快速一次尝试，尝试失败则进入enq 循环操作直到成功  </p>\n<p>加入到等待队列的操作主要可以分为：</p>\n<ol>\n<li>使用当前线程构造指定模式（shared、exclusive）node</li>\n<li>确保队列已经初始化</li>\n</ol>\n<ul>\n<li>未初始化则使用空node（虚节点、哨兵节点）初始化head和tail</li>\n</ul>\n<ol start=\"3\">\n<li>将node节点加入到队列尾部</li>\n</ol>\n<ul>\n<li>首先将node的prev指向tail</li>\n<li>cas原子操作将tail指针指向node节点</li>\n<li>成功后将原始tail的next指向node</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程，构造不同类型的node节点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);</span><br><span class=\"line\">    <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">    <span class=\"comment\">// 尝试直接将node设置为同步队列tail尾部节点，失败后调用全量enq方法</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">    <span class=\"comment\">//tail存在，队列已经初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先设置 node 的 prev前驱为 tail</span></span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\">        <span class=\"comment\">// cas 尝试设置 tail 为当前 node</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置成功后 将 tail的next后继指向 node</span></span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置失败，进入full enq方法</span></span><br><span class=\"line\">    enq(node);</span><br><span class=\"line\">    <span class=\"comment\">// 返回node</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环执行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// Must initialize</span></span><br><span class=\"line\">            <span class=\"comment\">//如果队列尚未初始化，使用空node初始化head和tail</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>()))</span><br><span class=\"line\">                tail = head;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 和 addWaiter 的 快速 enq 方法类似，在for循环中尝试执行直到成功</span></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\">                t.next = node;</span><br><span class=\"line\">                <span class=\"comment\">// 返回 node 的 prev前驱</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AQS-acquireQueued\"><a href=\"#AQS-acquireQueued\" class=\"headerlink\" title=\"AQS acquireQueued\"></a>AQS acquireQueued</h3><p><code>acquireQueued</code>用户exclusive和uninterruptible的获取，主要是在loop循环中进行tryAcquire和park</p>\n<p>acquire loop 主要逻辑：</p>\n<ol>\n<li>获取node的pred</li>\n<li>如果pred为head 并且 tryAquire 成功</li>\n</ol>\n<ul>\n<li>则设置node为head，标记获取成功，返回中断标志</li>\n</ul>\n<ol start=\"3\">\n<li>pred不是head 或 tryAcquire 失败</li>\n</ol>\n<ul>\n<li>则判断是否应该park，如果需要park，则进行park（被阻塞条件：前驱节点的waitStatus为SIGNAL）</li>\n<li>对中断标志进行赋值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Acquires in exclusive uninterruptible mode for thread already in</span></span><br><span class=\"line\"><span class=\"comment\"> * queue. Used by condition wait methods as well as acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于已经在队列中的线程执行独占不可中断的获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//失败标志</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 中断标志，是否被中断</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123; <span class=\"comment\">// acquire loop</span></span><br><span class=\"line\">            <span class=\"comment\">//获取node的前驱node</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">// 如果前驱为head，则尝试获取</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取成功</span></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                <span class=\"comment\">// head的next指针置空</span></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"comment\">//返回中断标识</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// node不是head的下一个 或 尝试获取失败，</span></span><br><span class=\"line\">            <span class=\"comment\">// 则根据prev和node的状态判断是否可以阻塞等待，然后执行阻塞</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果最终获取失败</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            <span class=\"comment\">// 则取消节点</span></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setHead、selfInterrupt、parkAndCheckInterrupt\"><a href=\"#setHead、selfInterrupt、parkAndCheckInterrupt\" class=\"headerlink\" title=\"setHead、selfInterrupt、parkAndCheckInterrupt\"></a>setHead、selfInterrupt、parkAndCheckInterrupt</h3><p>便捷方法：</p>\n<p>setHead：<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">setHead方法是把当前节点置为虚节点，但并没有修改waitStatus，因为它是一直需要用的数据</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将bode设置为head，实现出队操作</span></span><br><span class=\"line\"><span class=\"comment\"> * 将未使用的字段设置为空，方便GC以及避免不必要的遍历</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHead</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// head 指向 node</span></span><br><span class=\"line\">    head = node;</span><br><span class=\"line\">    <span class=\"comment\">// 释放线程</span></span><br><span class=\"line\">    node.thread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// node的prev即指向head的指针置空</span></span><br><span class=\"line\">    node.prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to interrupt current thread.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 便捷方法 interrupt 当前线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selfInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Thread.currentThread().interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to park and then check if interrupted</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 便捷方法暂停并且检查是否中断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前线程进行block</span></span><br><span class=\"line\">    <span class=\"comment\">// 从park中返回的条件：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 其他线程对当前线程调用unpark方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 其他线程interrupts 当前线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 没有任何原因的虚假唤醒</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此外层需要重新检查线程的运行条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 一般的范式为：while 中判循环断 执行park，满足条件后跳出循环</span></span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 清理中断标志，并且返回线程是否中断</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AQS-shouldParkAfterFailedAcquire\"><a href=\"#AQS-shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"AQS shouldParkAfterFailedAcquire\"></a>AQS shouldParkAfterFailedAcquire</h3><p>判断是否应该park，是acquire loop 中的主要信号控制</p>\n<ol>\n<li>如果pred的status为SIGNAL，pred释放后通知node，node可安全park</li>\n<li>如果pred已经cancelled，则node一直向前寻找第一个node不为cancelled的node，链接到该node后，把取消节点从队列中剔除</li>\n<li>最后，此时pred的status可能为：0或PROPAGATE，cas尝试修改为SIGNAL，但是不park，再次返回acquire loop中retry，</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Checks and updates status for a node that failed to acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if thread should block. This is the main signal</span></span><br><span class=\"line\"><span class=\"comment\"> * control in all acquire loops.  Requires that pred == node.prev.</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查并更新 tryAcquire失败的node节点的状态</span></span><br><span class=\"line\"><span class=\"comment\"> * acquire loop中的主要状态控制</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查看pred 前驱节点的状态</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> pred.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果node已经设置状态要求pred释放后通知它，则可以安全的暂停</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果prev前驱已经取消，则一直向前寻找到第一个状态不是取消的node并链接到该非取消node的后面，把取消节点从队列中剔除</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将node 的 prev 指针指向 prev的prev</span></span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">            <span class=\"comment\">//判断前驱是否已经取消</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         * 此时prev的状态必定时0或传播。</span></span><br><span class=\"line\"><span class=\"comment\">         * 将状态修改为SIGNAL，表明我们需要通知信号，</span></span><br><span class=\"line\"><span class=\"comment\">         * 不过仍然不在暂停，调用在acquire loop中再次尝试获取</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"cancelAcquire\"><a href=\"#cancelAcquire\" class=\"headerlink\" title=\"cancelAcquire\"></a>cancelAcquire</h3><p>取消尝试获取的node</p>\n<ol>\n<li>清除关联线程</li>\n<li>跳过cancelled已经取消的前驱node。找到有效前驱pred</li>\n<li>清理取消node，整理队列</li>\n</ol>\n<ul>\n<li>node为tail：则将tial指向有效pred</li>\n<li>当前node为head的后继节点：唤醒后继node</li>\n<li>不是hear和taill：后续node需要signal，尝试设置有效pred为SIGNAL，并将pred的next指向后继</li>\n</ul>\n<p>对应示意图</p>\n<p>根据当前节点的位置，考虑以下三种情况：</p>\n<p>(1) 当前节点是尾节点。</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%8F%96%E6%B6%88%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E7%9A%84node-%E5%B0%BE%E8%8A%82%E7%82%B9.png\"></p>\n<p>(2) 当前节点是Head的后继节点。唤醒后继节点</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%8F%96%E6%B6%88%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E7%9A%84node-head%E5%90%8E%E7%BB%A7%E8%8A%82%E7%82%B9.png\"></p>\n<p>(3) 当前节点不是Head的后继节点，也不是尾节点。</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/%E5%8F%96%E6%B6%88%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E7%9A%84node-%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9.png\"></p>\n<p>此时所有操作都只操作了next指针没有操作prev指针</p>\n<blockquote>\n<p><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">执行cancelAcquire的时候，当前节点的前置节点可能已经从队列中出去了（其他线程已经执行过Try代码块中的shouldParkAfterFailedAcquire方法了），如果此时修改Prev指针，有可能会导致Prev指向另一个已经移除队列的Node，因此这块变化Prev指针不安全。 shouldParkAfterFailedAcquire方法中，会执行下面的代码，其实就是在处理Prev指针。shouldParkAfterFailedAcquire是获取锁失败的情况下才会执行，进入该方法后，说明共享资源已被获取，当前节点之前的节点都不会出现变化，因此这个时候变更Prev指针比较安全。</font></strong></p>\n<p><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font></strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    node.prev = pred = pred.prev;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\"></font></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取消一个尝试获取的node</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelAcquire</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// node不存在则忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// node关联线程清空</span></span><br><span class=\"line\">    node.thread = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 跳过已经取消的前驱</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> node.prev;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有效pred前驱的后继节点，后续cas替换next使用</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">predNext</span> <span class=\"operator\">=</span> pred.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将状态设置为cancelled,其他节点可以跳过此node</span></span><br><span class=\"line\">    node.waitStatus = Node.CANCELLED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果node为tail，则将node指向有效pred</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class=\"line\">        compareAndSetNext(pred, predNext, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果后继node需要信号，则尝试设置有效前驱的 next</span></span><br><span class=\"line\">        <span class=\"comment\">//成功则后继node将获取到信号，</span></span><br><span class=\"line\">        <span class=\"comment\">//其他情况则唤醒后继node继续处理</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ws;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred != head &amp;&amp;</span><br><span class=\"line\">            ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class=\"line\">             (ws &lt;= <span class=\"number\">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class=\"line\">            pred.thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 后继节点存在且非取消，设置为有效前驱的next</span></span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span> &amp;&amp; next.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                compareAndSetNext(pred, predNext, next);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//条件不满足，则唤醒后继node</span></span><br><span class=\"line\">            unparkSuccessor(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//node 的 next 指向自己</span></span><br><span class=\"line\">        node.next = node; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"acquire流程图\"><a href=\"#acquire流程图\" class=\"headerlink\" title=\"acquire流程图\"></a>acquire流程图</h2><p>了解完整个acquire的代码实现，再看一下acquire的流程图</p>\n<p><img src=\"/images/post/java/juc/aqs/aqs%E8%AF%A6%E8%A7%A3/acquire%E6%B5%81%E7%A8%8B%E5%9B%BE.webp\"></p>\n<blockquote>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html\">从ReentrantLock的实现看AQS的原理及应用</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/msZXjpuT74EJ_gDY5DSOCQ\">万字超强图文讲解AQS以及ReentrantLock应用</a></li>\n</ul>\n</blockquote>\n"},{"title":"3.AQS.release & Lock.unlock 方法实现详解","date":"2025-08-13T23:08:07.000Z","_content":"\n# 独占式释放同步状态\n## ReentranLock的unlock方法\n1. 通过调用AQS的release方法实现解锁\n\n```java\n    public void unlock() {\n        //AQS模板方法：释放同步状态\n        sync.release(1);\n    }\n```\n\n\n\n## 通过调用AQS的release模板方法完成同步状态释放\n1. 调用子类实现tryRelase释放同步状态\n2. 如果同步状态完全释放\n+ 判断head存在且状态为非初始化\n+ 唤醒后继node\n\n判断是否唤醒node时候的判断条件：\n\n<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">这里的判断条件为什么是h != null && h.waitStatus != 0？</font>\n\n> 1. **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h == null Head还没初始化。初始情况下，head == null，第一个节点入队，Head会被初始化一个虚拟节点。所以说，这里如果还没来得及入队，就会出现head == null 的情况。</font>**\n> 2. **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h != null && waitStatus == 0 表明后继节点对应的线程仍在运行中，不需要唤醒。</font>**\n> 3. **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h != null && waitStatus < 0 表明后继节点可能被阻塞了，需要唤醒。</font>**\n>\n\n\n\n```java\n\n    /**\n     * 独占模式释放，如果tryRelease放回true，解除后继节点阻塞（唤醒后继节点）\n     */\n    public final boolean release(int arg) {\n        //尝试释放同步状态\n        if (tryRelease(arg)) {// 如果同步状态完全释放\n            Node h = head;\n            // 查看head（此线程对应的node即为head）状态\n            if (h != null && h.waitStatus != 0)\n                //唤醒通知后继几点\n                unparkSuccessor(h);\n            return true;\n        }\n        return false;\n    }\n```\n\n## Lock的Sync同步器实现的tryRelease方法\n1. 首先判断线程是否获取了同步状态，为当前独占线程\n+ 不是独占线程不允许执行释放操作，抛出 IllegalMonitorStateException\n2. 根据是否后的同步状态判断是否完全释放\n+ 已经完全释放同步状态后：清理独占线程、标记完全释放\n3. 设置同步状态\n\n```java\n\n        @Override\n        protected boolean tryRelease(int arg) {\n            //目标同步状态\n            int state = getState() - arg;\n            //是否完全释放同步器\n            boolean free = false;\n            //判断调用线程是否为独占线程\n            if (getExclusiveOwnerThread() != Thread.currentThread()) {\n                //不独占同步器的线程不能操作释放操作\n                throw new IllegalMonitorStateException();\n            }\n            //同步状态为0，完全释放同步器器\n            if (state == 0) {\n                // 完全释放标志为true\n                free = true;\n                //去除独占线程\n                setExclusiveOwnerThread(null);\n            }\n            //独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state\n            setState(state);\n            //返回是否完全释放同步状态\n            return free;\n        }\n\n```\n\n## 再看如何unparSuccessor取消后继节点的挂起\n1. 获取node的状态\n+ 如果节点状态为signal，清理状态为初始化，准备发送通知\n2. 获取后继节点\n+ 如果后继节点为取消，则从tail向前遍历，找到队列中第一个为非cancelled的node\n3. 唤醒后继节点\n\n```java\n\n    /**\n     * 唤醒后继节点\n     */\n    private void unparkSuccessor(Node node) {\n        // 获取head状态\n        int ws = node.waitStatus;\n        // 如果head 状态 <0 即需要signal\n        if (ws < 0)\n            // 清理signal状态，准备发送信号（唤醒后继node），\n            // 设置状态为0初始化（尝试更新，失败也无影响）\n            compareAndSetWaitStatus(node, ws, 0);\n\n        // 获取后继node\n        Node s = node.next;\n        //如果后继node为null或者已经cancelled\n        if (s == null || s.waitStatus > 0) {\n            s = null;\n            //从tail向前遍历找，找到队列头部第一个非cancelled node\n            for (Node t = tail; t != null && t != node; t = t.prev)\n                if (t.waitStatus <= 0)\n                    s = t;\n        }\n        if (s != null)\n            // 唤醒非cancelled node\n            LockSupport.unpark(s.thread);\n    }\n```\n\n为什么查询非取消节点要从后向前遍历\n\n1. 节点入队时先操作prev指针，再操作next指针，非原子方法\n+ <font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">node.prev = pred; compareAndSetTail(pred, node) 这两个地方可以看作Tail入队的原子操作，但是此时pred.next = node;还没执行</font>    \n\n```java\nprivate Node addWaiter(Node mode) {\n\tNode node = new Node(Thread.currentThread(), mode);\n\t// Try the fast path of enq; backup to full enq on failure\n\tNode pred = tail;\n\tif (pred != null) {\n\t\tnode.prev = pred;\n\t\tif (compareAndSetTail(pred, node)) {\n\t\t\tpred.next = node;\n\t\t\treturn node;\n\t\t}\n\t}\n\tenq(node);\n\treturn node;\n}\n```\n\n2. 节点取消时，先修改prev指针,再修改next指针，所以要从后使用prev指针进行便利\n\n```java\n\n        // Skip cancelled predecessors\n        Node pred = node.prev;\n        while (pred.waitStatus > 0)\n            node.prev = pred = pred.prev;\n\n            // 省略代码......\n            compareAndSetNext(pred, predNext, null);\n            // 省略代码......\n            node.next = node; // help GC\n        \n\n```\n\n# 取消挂起后继续执行\n节点从挂起处被唤醒，继续执行，清理并返回是否被中断\n\n```java\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n\n返回到acquireQueued方法，继续acquire loop,记录中断标志，在循环当中tryAcqire\n\n```java\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n获取同步状态成功后，将node设置为head，返回中断标志\n\n```java\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\n\n如果获取过过程被其他线程中断过，由于在acquire loop 中清理了中断标志，此处进行中断标志的设置，恢复当前线程中断状态\n\n```java\n    /**\n     * Convenience method to interrupt current thread.\n     */\n    static void selfInterrupt() {\n        Thread.currentThread().interrupt();\n    }\n```\n\n至此，锁的获取和释放逻辑已经完全讲解结束\n\n","source":"_posts/java/juc/aqs/3.AQS.release & Lock.unlock 方法实现详解.md","raw":"\n---\ntitle: 3.AQS.release & Lock.unlock 方法实现详解\ndate: 2025-08-14 07:08:07\ntags:\n- java\n- juc\n\ncategory:\n- java\n- juc\n- aqs\n\n---\n\n# 独占式释放同步状态\n## ReentranLock的unlock方法\n1. 通过调用AQS的release方法实现解锁\n\n```java\n    public void unlock() {\n        //AQS模板方法：释放同步状态\n        sync.release(1);\n    }\n```\n\n\n\n## 通过调用AQS的release模板方法完成同步状态释放\n1. 调用子类实现tryRelase释放同步状态\n2. 如果同步状态完全释放\n+ 判断head存在且状态为非初始化\n+ 唤醒后继node\n\n判断是否唤醒node时候的判断条件：\n\n<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">这里的判断条件为什么是h != null && h.waitStatus != 0？</font>\n\n> 1. **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h == null Head还没初始化。初始情况下，head == null，第一个节点入队，Head会被初始化一个虚拟节点。所以说，这里如果还没来得及入队，就会出现head == null 的情况。</font>**\n> 2. **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h != null && waitStatus == 0 表明后继节点对应的线程仍在运行中，不需要唤醒。</font>**\n> 3. **<font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h != null && waitStatus < 0 表明后继节点可能被阻塞了，需要唤醒。</font>**\n>\n\n\n\n```java\n\n    /**\n     * 独占模式释放，如果tryRelease放回true，解除后继节点阻塞（唤醒后继节点）\n     */\n    public final boolean release(int arg) {\n        //尝试释放同步状态\n        if (tryRelease(arg)) {// 如果同步状态完全释放\n            Node h = head;\n            // 查看head（此线程对应的node即为head）状态\n            if (h != null && h.waitStatus != 0)\n                //唤醒通知后继几点\n                unparkSuccessor(h);\n            return true;\n        }\n        return false;\n    }\n```\n\n## Lock的Sync同步器实现的tryRelease方法\n1. 首先判断线程是否获取了同步状态，为当前独占线程\n+ 不是独占线程不允许执行释放操作，抛出 IllegalMonitorStateException\n2. 根据是否后的同步状态判断是否完全释放\n+ 已经完全释放同步状态后：清理独占线程、标记完全释放\n3. 设置同步状态\n\n```java\n\n        @Override\n        protected boolean tryRelease(int arg) {\n            //目标同步状态\n            int state = getState() - arg;\n            //是否完全释放同步器\n            boolean free = false;\n            //判断调用线程是否为独占线程\n            if (getExclusiveOwnerThread() != Thread.currentThread()) {\n                //不独占同步器的线程不能操作释放操作\n                throw new IllegalMonitorStateException();\n            }\n            //同步状态为0，完全释放同步器器\n            if (state == 0) {\n                // 完全释放标志为true\n                free = true;\n                //去除独占线程\n                setExclusiveOwnerThread(null);\n            }\n            //独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state\n            setState(state);\n            //返回是否完全释放同步状态\n            return free;\n        }\n\n```\n\n## 再看如何unparSuccessor取消后继节点的挂起\n1. 获取node的状态\n+ 如果节点状态为signal，清理状态为初始化，准备发送通知\n2. 获取后继节点\n+ 如果后继节点为取消，则从tail向前遍历，找到队列中第一个为非cancelled的node\n3. 唤醒后继节点\n\n```java\n\n    /**\n     * 唤醒后继节点\n     */\n    private void unparkSuccessor(Node node) {\n        // 获取head状态\n        int ws = node.waitStatus;\n        // 如果head 状态 <0 即需要signal\n        if (ws < 0)\n            // 清理signal状态，准备发送信号（唤醒后继node），\n            // 设置状态为0初始化（尝试更新，失败也无影响）\n            compareAndSetWaitStatus(node, ws, 0);\n\n        // 获取后继node\n        Node s = node.next;\n        //如果后继node为null或者已经cancelled\n        if (s == null || s.waitStatus > 0) {\n            s = null;\n            //从tail向前遍历找，找到队列头部第一个非cancelled node\n            for (Node t = tail; t != null && t != node; t = t.prev)\n                if (t.waitStatus <= 0)\n                    s = t;\n        }\n        if (s != null)\n            // 唤醒非cancelled node\n            LockSupport.unpark(s.thread);\n    }\n```\n\n为什么查询非取消节点要从后向前遍历\n\n1. 节点入队时先操作prev指针，再操作next指针，非原子方法\n+ <font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">node.prev = pred; compareAndSetTail(pred, node) 这两个地方可以看作Tail入队的原子操作，但是此时pred.next = node;还没执行</font>    \n\n```java\nprivate Node addWaiter(Node mode) {\n\tNode node = new Node(Thread.currentThread(), mode);\n\t// Try the fast path of enq; backup to full enq on failure\n\tNode pred = tail;\n\tif (pred != null) {\n\t\tnode.prev = pred;\n\t\tif (compareAndSetTail(pred, node)) {\n\t\t\tpred.next = node;\n\t\t\treturn node;\n\t\t}\n\t}\n\tenq(node);\n\treturn node;\n}\n```\n\n2. 节点取消时，先修改prev指针,再修改next指针，所以要从后使用prev指针进行便利\n\n```java\n\n        // Skip cancelled predecessors\n        Node pred = node.prev;\n        while (pred.waitStatus > 0)\n            node.prev = pred = pred.prev;\n\n            // 省略代码......\n            compareAndSetNext(pred, predNext, null);\n            // 省略代码......\n            node.next = node; // help GC\n        \n\n```\n\n# 取消挂起后继续执行\n节点从挂起处被唤醒，继续执行，清理并返回是否被中断\n\n```java\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n\n返回到acquireQueued方法，继续acquire loop,记录中断标志，在循环当中tryAcqire\n\n```java\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n获取同步状态成功后，将node设置为head，返回中断标志\n\n```java\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\n\n如果获取过过程被其他线程中断过，由于在acquire loop 中清理了中断标志，此处进行中断标志的设置，恢复当前线程中断状态\n\n```java\n    /**\n     * Convenience method to interrupt current thread.\n     */\n    static void selfInterrupt() {\n        Thread.currentThread().interrupt();\n    }\n```\n\n至此，锁的获取和释放逻辑已经完全讲解结束\n\n","slug":"java-juc-aqs-3-AQS-release-Lock-unlock-方法实现详解","published":1,"updated":"2025-08-13T23:15:20.612Z","_id":"cmeal74gl0008jrciaxq72hro","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"独占式释放同步状态\"><a href=\"#独占式释放同步状态\" class=\"headerlink\" title=\"独占式释放同步状态\"></a>独占式释放同步状态</h1><h2 id=\"ReentranLock的unlock方法\"><a href=\"#ReentranLock的unlock方法\" class=\"headerlink\" title=\"ReentranLock的unlock方法\"></a>ReentranLock的unlock方法</h2><ol>\n<li>通过调用AQS的release方法实现解锁</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：释放同步状态</span></span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"通过调用AQS的release模板方法完成同步状态释放\"><a href=\"#通过调用AQS的release模板方法完成同步状态释放\" class=\"headerlink\" title=\"通过调用AQS的release模板方法完成同步状态释放\"></a>通过调用AQS的release模板方法完成同步状态释放</h2><ol>\n<li>调用子类实现tryRelase释放同步状态</li>\n<li>如果同步状态完全释放</li>\n</ol>\n<ul>\n<li>判断head存在且状态为非初始化</li>\n<li>唤醒后继node</li>\n</ul>\n<p>判断是否唤醒node时候的判断条件：</p>\n<p><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">这里的判断条件为什么是h !&#x3D; null &amp;&amp; h.waitStatus !&#x3D; 0？</font></p>\n<blockquote>\n<ol>\n<li><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h &#x3D;&#x3D; null Head还没初始化。初始情况下，head &#x3D;&#x3D; null，第一个节点入队，Head会被初始化一个虚拟节点。所以说，这里如果还没来得及入队，就会出现head &#x3D;&#x3D; null 的情况。</font></strong></li>\n<li><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h !&#x3D; null &amp;&amp; waitStatus &#x3D;&#x3D; 0 表明后继节点对应的线程仍在运行中，不需要唤醒。</font></strong></li>\n<li><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h !&#x3D; null &amp;&amp; waitStatus &lt; 0 表明后继节点可能被阻塞了，需要唤醒。</font></strong></li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 独占模式释放，如果tryRelease放回true，解除后继节点阻塞（唤醒后继节点）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//尝试释放同步状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;<span class=\"comment\">// 如果同步状态完全释放</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"comment\">// 查看head（此线程对应的node即为head）状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//唤醒通知后继几点</span></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lock的Sync同步器实现的tryRelease方法\"><a href=\"#Lock的Sync同步器实现的tryRelease方法\" class=\"headerlink\" title=\"Lock的Sync同步器实现的tryRelease方法\"></a>Lock的Sync同步器实现的tryRelease方法</h2><ol>\n<li>首先判断线程是否获取了同步状态，为当前独占线程</li>\n</ol>\n<ul>\n<li>不是独占线程不允许执行释放操作，抛出 IllegalMonitorStateException</li>\n</ul>\n<ol start=\"2\">\n<li>根据是否后的同步状态判断是否完全释放</li>\n</ol>\n<ul>\n<li>已经完全释放同步状态后：清理独占线程、标记完全释放</li>\n</ul>\n<ol start=\"3\">\n<li>设置同步状态</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//目标同步状态</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> getState() - arg;</span><br><span class=\"line\">    <span class=\"comment\">//是否完全释放同步器</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断调用线程是否为独占线程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getExclusiveOwnerThread() != Thread.currentThread()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不独占同步器的线程不能操作释放操作</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//同步状态为0，完全释放同步器器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 完全释放标志为true</span></span><br><span class=\"line\">        free = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//去除独占线程</span></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state</span></span><br><span class=\"line\">    setState(state);</span><br><span class=\"line\">    <span class=\"comment\">//返回是否完全释放同步状态</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"再看如何unparSuccessor取消后继节点的挂起\"><a href=\"#再看如何unparSuccessor取消后继节点的挂起\" class=\"headerlink\" title=\"再看如何unparSuccessor取消后继节点的挂起\"></a>再看如何unparSuccessor取消后继节点的挂起</h2><ol>\n<li>获取node的状态</li>\n</ol>\n<ul>\n<li>如果节点状态为signal，清理状态为初始化，准备发送通知</li>\n</ul>\n<ol start=\"2\">\n<li>获取后继节点</li>\n</ol>\n<ul>\n<li>如果后继节点为取消，则从tail向前遍历，找到队列中第一个为非cancelled的node</li>\n</ul>\n<ol start=\"3\">\n<li>唤醒后继节点</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 唤醒后继节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取head状态</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 如果head 状态 &lt;0 即需要signal</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 清理signal状态，准备发送信号（唤醒后继node），</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置状态为0初始化（尝试更新，失败也无影响）</span></span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取后继node</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">    <span class=\"comment\">//如果后继node为null或者已经cancelled</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//从tail向前遍历找，找到队列头部第一个非cancelled node</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 唤醒非cancelled node</span></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为什么查询非取消节点要从后向前遍历</p>\n<ol>\n<li>节点入队时先操作prev指针，再操作next指针，非原子方法</li>\n</ol>\n<ul>\n<li><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">node.prev &#x3D; pred; compareAndSetTail(pred, node) 这两个地方可以看作Tail入队的原子操作，但是此时pred.next &#x3D; node;还没执行</font></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);</span><br><span class=\"line\">\t<span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">\t<span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tnode.prev = pred;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">\t\t\tpred.next = node;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tenq(node);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>节点取消时，先修改prev指针,再修改next指针，所以要从后使用prev指针进行便利</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Skip cancelled predecessors</span></span><br><span class=\"line\"><span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> node.prev;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略代码......</span></span><br><span class=\"line\">    compareAndSetNext(pred, predNext, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 省略代码......</span></span><br><span class=\"line\">    node.next = node; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"取消挂起后继续执行\"><a href=\"#取消挂起后继续执行\" class=\"headerlink\" title=\"取消挂起后继续执行\"></a>取消挂起后继续执行</h1><p>节点从挂起处被唤醒，继续执行，清理并返回是否被中断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回到acquireQueued方法，继续acquire loop,记录中断标志，在循环当中tryAcqire</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取同步状态成功后，将node设置为head，返回中断标志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果获取过过程被其他线程中断过，由于在acquire loop 中清理了中断标志，此处进行中断标志的设置，恢复当前线程中断状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to interrupt current thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selfInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Thread.currentThread().interrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，锁的获取和释放逻辑已经完全讲解结束</p>\n","excerpt":"","more":"<h1 id=\"独占式释放同步状态\"><a href=\"#独占式释放同步状态\" class=\"headerlink\" title=\"独占式释放同步状态\"></a>独占式释放同步状态</h1><h2 id=\"ReentranLock的unlock方法\"><a href=\"#ReentranLock的unlock方法\" class=\"headerlink\" title=\"ReentranLock的unlock方法\"></a>ReentranLock的unlock方法</h2><ol>\n<li>通过调用AQS的release方法实现解锁</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：释放同步状态</span></span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"通过调用AQS的release模板方法完成同步状态释放\"><a href=\"#通过调用AQS的release模板方法完成同步状态释放\" class=\"headerlink\" title=\"通过调用AQS的release模板方法完成同步状态释放\"></a>通过调用AQS的release模板方法完成同步状态释放</h2><ol>\n<li>调用子类实现tryRelase释放同步状态</li>\n<li>如果同步状态完全释放</li>\n</ol>\n<ul>\n<li>判断head存在且状态为非初始化</li>\n<li>唤醒后继node</li>\n</ul>\n<p>判断是否唤醒node时候的判断条件：</p>\n<p><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">这里的判断条件为什么是h !&#x3D; null &amp;&amp; h.waitStatus !&#x3D; 0？</font></p>\n<blockquote>\n<ol>\n<li><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h &#x3D;&#x3D; null Head还没初始化。初始情况下，head &#x3D;&#x3D; null，第一个节点入队，Head会被初始化一个虚拟节点。所以说，这里如果还没来得及入队，就会出现head &#x3D;&#x3D; null 的情况。</font></strong></li>\n<li><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h !&#x3D; null &amp;&amp; waitStatus &#x3D;&#x3D; 0 表明后继节点对应的线程仍在运行中，不需要唤醒。</font></strong></li>\n<li><strong><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">h !&#x3D; null &amp;&amp; waitStatus &lt; 0 表明后继节点可能被阻塞了，需要唤醒。</font></strong></li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 独占模式释放，如果tryRelease放回true，解除后继节点阻塞（唤醒后继节点）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//尝试释放同步状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;<span class=\"comment\">// 如果同步状态完全释放</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"comment\">// 查看head（此线程对应的node即为head）状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//唤醒通知后继几点</span></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lock的Sync同步器实现的tryRelease方法\"><a href=\"#Lock的Sync同步器实现的tryRelease方法\" class=\"headerlink\" title=\"Lock的Sync同步器实现的tryRelease方法\"></a>Lock的Sync同步器实现的tryRelease方法</h2><ol>\n<li>首先判断线程是否获取了同步状态，为当前独占线程</li>\n</ol>\n<ul>\n<li>不是独占线程不允许执行释放操作，抛出 IllegalMonitorStateException</li>\n</ul>\n<ol start=\"2\">\n<li>根据是否后的同步状态判断是否完全释放</li>\n</ol>\n<ul>\n<li>已经完全释放同步状态后：清理独占线程、标记完全释放</li>\n</ul>\n<ol start=\"3\">\n<li>设置同步状态</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//目标同步状态</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> getState() - arg;</span><br><span class=\"line\">    <span class=\"comment\">//是否完全释放同步器</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断调用线程是否为独占线程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getExclusiveOwnerThread() != Thread.currentThread()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不独占同步器的线程不能操作释放操作</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//同步状态为0，完全释放同步器器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 完全释放标志为true</span></span><br><span class=\"line\">        free = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//去除独占线程</span></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//独占同步器时其他线程无法操作同步状态，没有并发问题，直接设置state</span></span><br><span class=\"line\">    setState(state);</span><br><span class=\"line\">    <span class=\"comment\">//返回是否完全释放同步状态</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"再看如何unparSuccessor取消后继节点的挂起\"><a href=\"#再看如何unparSuccessor取消后继节点的挂起\" class=\"headerlink\" title=\"再看如何unparSuccessor取消后继节点的挂起\"></a>再看如何unparSuccessor取消后继节点的挂起</h2><ol>\n<li>获取node的状态</li>\n</ol>\n<ul>\n<li>如果节点状态为signal，清理状态为初始化，准备发送通知</li>\n</ul>\n<ol start=\"2\">\n<li>获取后继节点</li>\n</ol>\n<ul>\n<li>如果后继节点为取消，则从tail向前遍历，找到队列中第一个为非cancelled的node</li>\n</ul>\n<ol start=\"3\">\n<li>唤醒后继节点</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 唤醒后继节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取head状态</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 如果head 状态 &lt;0 即需要signal</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 清理signal状态，准备发送信号（唤醒后继node），</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置状态为0初始化（尝试更新，失败也无影响）</span></span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取后继node</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">    <span class=\"comment\">//如果后继node为null或者已经cancelled</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//从tail向前遍历找，找到队列头部第一个非cancelled node</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 唤醒非cancelled node</span></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为什么查询非取消节点要从后向前遍历</p>\n<ol>\n<li>节点入队时先操作prev指针，再操作next指针，非原子方法</li>\n</ol>\n<ul>\n<li><font style=\"color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);\">node.prev &#x3D; pred; compareAndSetTail(pred, node) 这两个地方可以看作Tail入队的原子操作，但是此时pred.next &#x3D; node;还没执行</font></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);</span><br><span class=\"line\">\t<span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">\t<span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tnode.prev = pred;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">\t\t\tpred.next = node;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tenq(node);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>节点取消时，先修改prev指针,再修改next指针，所以要从后使用prev指针进行便利</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Skip cancelled predecessors</span></span><br><span class=\"line\"><span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> node.prev;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略代码......</span></span><br><span class=\"line\">    compareAndSetNext(pred, predNext, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 省略代码......</span></span><br><span class=\"line\">    node.next = node; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"取消挂起后继续执行\"><a href=\"#取消挂起后继续执行\" class=\"headerlink\" title=\"取消挂起后继续执行\"></a>取消挂起后继续执行</h1><p>节点从挂起处被唤醒，继续执行，清理并返回是否被中断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回到acquireQueued方法，继续acquire loop,记录中断标志，在循环当中tryAcqire</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取同步状态成功后，将node设置为head，返回中断标志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果获取过过程被其他线程中断过，由于在acquire loop 中清理了中断标志，此处进行中断标志的设置，恢复当前线程中断状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to interrupt current thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selfInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Thread.currentThread().interrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，锁的获取和释放逻辑已经完全讲解结束</p>\n"},{"title":"4.AQS & Lock 的可中断、可超时 获取","date":"2025-08-13T23:12:07.000Z","_content":"\n# 可中断获取\n## lock Interruptibly\n首先查看lock代码的可中断获取\n\n```java\n\n    @Override\n    public void lockInterruptibly() throws InterruptedException {\n        //AQS模板方法：同步器可中断获取\n        sync.acquireInterruptibly(1);\n    }\n```\n\n## AQS acquireInterruptibly\n进行可中断获取\n\n1. 首先进入方法判断是否已经interrupted\n2. 尝试获取，如果失败则进入acquire loop中循环尝试获取\n\n```java\n\n    /**\n     * exclusive模式获取，如果interrupted则中止并抛出InterruptedException\n     */\n    public final void acquireInterruptibly(int arg)\n            throws InterruptedException {\n        //入口判断线程是否中断\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        // 尝试获取，如果失败，则在acquire loop中进行尝试获取\n        if (!tryAcquire(arg))\n            doAcquireInterruptibly(arg);\n    }\n```\n\n## doAcquireInterruptibly\n可中断获取循环，与普通acquire loop 不同之处在于检查到中断后直接抛出异常\n\n```java\n\n    /**\n     * 循环可中断获取\n     */\n    private void doAcquireInterruptibly(int arg)\n        throws InterruptedException {\n        final Node node = addWaiter(Node.EXCLUSIVE);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    // 检查到中断后，不再设置中断状态，而是直接抛出异常\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n# 可超时、中断 获取\n## Lock tryLock(time,timeUnit)\n尝试在给定时间内获取锁，返回是否获取成功。\n\n返回的三种条件：\n\n1. 当前线程获取锁成功\n2. 当前线程被interrupted\n3. 已经达到指定时间\n\n```java\n    @Override\n    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {\n        //AQS模板方法：同步器超时可中断获取\n        return sync.tryAcquireNanos(1, unit.toNanos(time));\n    }\n\n```\n\n## AQS doAcquireNanos\n尝试超时获取\n\n1. 方法入口判断是否interrupted\n2. 尝试获取，如果失败则进入acquire loop中循环尝试获取\n\n```java\n\n    /**\n     * 超时独占模式获取\n     */\n    public final boolean tryAcquireNanos(int arg, long nanosTimeout)\n            throws InterruptedException {\n        //入口判断线程是否中断\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        // 尝试获取，如果失败，则在acquire loop中进行尝试获取\n        return tryAcquire(arg) ||\n            doAcquireNanos(arg, nanosTimeout);\n    }\n```\n\n与可中断获取的acquire loop 对比多了对于时间的判断逻辑\n\n1. 计算deadline，用于判断指定时间\n2. 每次park前比较dealine是否已经达到\n    -  已经达到超时时间则直接返回false\n3. 如果线程需要挂起，判断剩余时间是否达到自旋阈值\n    - 剩余时间 > 自旋阈值 ，则park 剩余时间\n    - 剩余时间<=自旋阈值，则不park，在acquire loop 中自旋直到超时\n\n```java\n\n    /**\n     * 独占超时模式获取\n     */\n    private boolean doAcquireNanos(int arg, long nanosTimeout)\n            throws InterruptedException {\n        // 已经超时\n        if (nanosTimeout <= 0L)\n            return false;\n        // 计算deadline\n        final long deadline = System.nanoTime() + nanosTimeout;\n        final Node node = addWaiter(Node.EXCLUSIVE);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return true;\n                }\n                //计算剩余时间\n                nanosTimeout = deadline - System.nanoTime();\n                if (nanosTimeout <= 0L)\n                    // 超时直接返回\n                    return false;\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        // 判断剩余超时时间是否大于自旋阈值，用于自旋或挂起\n                    nanosTimeout > spinForTimeoutThreshold)\n                    // 线程挂起到剩余时间\n                    LockSupport.parkNanos(this, nanosTimeout);\n                if (Thread.interrupted())\n                    // 检测到中断直接抛出异常\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n```\n\n自旋判断逻辑: 剩余时间非常短是没有必要进行park，直接进行自旋\n\n```java\n    /**\n     * The number of nanoseconds for which it is faster to spin\n     * rather than to use timed park. A rough estimate suffices\n     * to improve responsiveness with very short timeouts.\n     */\n    static final long spinForTimeoutThreshold = 1000L;\n```\n\n","source":"_posts/java/juc/aqs/4.AQS & Lock 的可中断、可超时 获取.md","raw":"---\ntitle: 4.AQS & Lock 的可中断、可超时 获取\ndate: 2025-08-14 07:12:07\ntags:\n- java\n- juc\n\ncategory:\n- java\n- juc\n- aqs\n\n---\n\n# 可中断获取\n## lock Interruptibly\n首先查看lock代码的可中断获取\n\n```java\n\n    @Override\n    public void lockInterruptibly() throws InterruptedException {\n        //AQS模板方法：同步器可中断获取\n        sync.acquireInterruptibly(1);\n    }\n```\n\n## AQS acquireInterruptibly\n进行可中断获取\n\n1. 首先进入方法判断是否已经interrupted\n2. 尝试获取，如果失败则进入acquire loop中循环尝试获取\n\n```java\n\n    /**\n     * exclusive模式获取，如果interrupted则中止并抛出InterruptedException\n     */\n    public final void acquireInterruptibly(int arg)\n            throws InterruptedException {\n        //入口判断线程是否中断\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        // 尝试获取，如果失败，则在acquire loop中进行尝试获取\n        if (!tryAcquire(arg))\n            doAcquireInterruptibly(arg);\n    }\n```\n\n## doAcquireInterruptibly\n可中断获取循环，与普通acquire loop 不同之处在于检查到中断后直接抛出异常\n\n```java\n\n    /**\n     * 循环可中断获取\n     */\n    private void doAcquireInterruptibly(int arg)\n        throws InterruptedException {\n        final Node node = addWaiter(Node.EXCLUSIVE);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    // 检查到中断后，不再设置中断状态，而是直接抛出异常\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n# 可超时、中断 获取\n## Lock tryLock(time,timeUnit)\n尝试在给定时间内获取锁，返回是否获取成功。\n\n返回的三种条件：\n\n1. 当前线程获取锁成功\n2. 当前线程被interrupted\n3. 已经达到指定时间\n\n```java\n    @Override\n    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {\n        //AQS模板方法：同步器超时可中断获取\n        return sync.tryAcquireNanos(1, unit.toNanos(time));\n    }\n\n```\n\n## AQS doAcquireNanos\n尝试超时获取\n\n1. 方法入口判断是否interrupted\n2. 尝试获取，如果失败则进入acquire loop中循环尝试获取\n\n```java\n\n    /**\n     * 超时独占模式获取\n     */\n    public final boolean tryAcquireNanos(int arg, long nanosTimeout)\n            throws InterruptedException {\n        //入口判断线程是否中断\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        // 尝试获取，如果失败，则在acquire loop中进行尝试获取\n        return tryAcquire(arg) ||\n            doAcquireNanos(arg, nanosTimeout);\n    }\n```\n\n与可中断获取的acquire loop 对比多了对于时间的判断逻辑\n\n1. 计算deadline，用于判断指定时间\n2. 每次park前比较dealine是否已经达到\n    -  已经达到超时时间则直接返回false\n3. 如果线程需要挂起，判断剩余时间是否达到自旋阈值\n    - 剩余时间 > 自旋阈值 ，则park 剩余时间\n    - 剩余时间<=自旋阈值，则不park，在acquire loop 中自旋直到超时\n\n```java\n\n    /**\n     * 独占超时模式获取\n     */\n    private boolean doAcquireNanos(int arg, long nanosTimeout)\n            throws InterruptedException {\n        // 已经超时\n        if (nanosTimeout <= 0L)\n            return false;\n        // 计算deadline\n        final long deadline = System.nanoTime() + nanosTimeout;\n        final Node node = addWaiter(Node.EXCLUSIVE);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return true;\n                }\n                //计算剩余时间\n                nanosTimeout = deadline - System.nanoTime();\n                if (nanosTimeout <= 0L)\n                    // 超时直接返回\n                    return false;\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        // 判断剩余超时时间是否大于自旋阈值，用于自旋或挂起\n                    nanosTimeout > spinForTimeoutThreshold)\n                    // 线程挂起到剩余时间\n                    LockSupport.parkNanos(this, nanosTimeout);\n                if (Thread.interrupted())\n                    // 检测到中断直接抛出异常\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n```\n\n自旋判断逻辑: 剩余时间非常短是没有必要进行park，直接进行自旋\n\n```java\n    /**\n     * The number of nanoseconds for which it is faster to spin\n     * rather than to use timed park. A rough estimate suffices\n     * to improve responsiveness with very short timeouts.\n     */\n    static final long spinForTimeoutThreshold = 1000L;\n```\n\n","slug":"java-juc-aqs-4-AQS-Lock-的可中断、可超时-获取","published":1,"updated":"2025-08-13T23:16:13.624Z","_id":"cmeal74gm0009jrci1wpeh2bz","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"可中断获取\"><a href=\"#可中断获取\" class=\"headerlink\" title=\"可中断获取\"></a>可中断获取</h1><h2 id=\"lock-Interruptibly\"><a href=\"#lock-Interruptibly\" class=\"headerlink\" title=\"lock Interruptibly\"></a>lock Interruptibly</h2><p>首先查看lock代码的可中断获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：同步器可中断获取</span></span><br><span class=\"line\">    sync.acquireInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AQS-acquireInterruptibly\"><a href=\"#AQS-acquireInterruptibly\" class=\"headerlink\" title=\"AQS acquireInterruptibly\"></a>AQS acquireInterruptibly</h2><p>进行可中断获取</p>\n<ol>\n<li>首先进入方法判断是否已经interrupted</li>\n<li>尝试获取，如果失败则进入acquire loop中循环尝试获取</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * exclusive模式获取，如果interrupted则中止并抛出InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquireInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//入口判断线程是否中断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 尝试获取，如果失败，则在acquire loop中进行尝试获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg))</span><br><span class=\"line\">        doAcquireInterruptibly(arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"doAcquireInterruptibly\"><a href=\"#doAcquireInterruptibly\" class=\"headerlink\" title=\"doAcquireInterruptibly\"></a>doAcquireInterruptibly</h2><p>可中断获取循环，与普通acquire loop 不同之处在于检查到中断后直接抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 循环可中断获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAcquireInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.EXCLUSIVE);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                <span class=\"comment\">// 检查到中断后，不再设置中断状态，而是直接抛出异常</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"可超时、中断-获取\"><a href=\"#可超时、中断-获取\" class=\"headerlink\" title=\"可超时、中断 获取\"></a>可超时、中断 获取</h1><h2 id=\"Lock-tryLock-time-timeUnit\"><a href=\"#Lock-tryLock-time-timeUnit\" class=\"headerlink\" title=\"Lock tryLock(time,timeUnit)\"></a>Lock tryLock(time,timeUnit)</h2><p>尝试在给定时间内获取锁，返回是否获取成功。</p>\n<p>返回的三种条件：</p>\n<ol>\n<li>当前线程获取锁成功</li>\n<li>当前线程被interrupted</li>\n<li>已经达到指定时间</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：同步器超时可中断获取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sync.tryAcquireNanos(<span class=\"number\">1</span>, unit.toNanos(time));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AQS-doAcquireNanos\"><a href=\"#AQS-doAcquireNanos\" class=\"headerlink\" title=\"AQS doAcquireNanos\"></a>AQS doAcquireNanos</h2><p>尝试超时获取</p>\n<ol>\n<li>方法入口判断是否interrupted</li>\n<li>尝试获取，如果失败则进入acquire loop中循环尝试获取</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 超时独占模式获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquireNanos</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">long</span> nanosTimeout)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//入口判断线程是否中断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 尝试获取，如果失败，则在acquire loop中进行尝试获取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tryAcquire(arg) ||</span><br><span class=\"line\">        doAcquireNanos(arg, nanosTimeout);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与可中断获取的acquire loop 对比多了对于时间的判断逻辑</p>\n<ol>\n<li>计算deadline，用于判断指定时间</li>\n<li>每次park前比较dealine是否已经达到<ul>\n<li>已经达到超时时间则直接返回false</li>\n</ul>\n</li>\n<li>如果线程需要挂起，判断剩余时间是否达到自旋阈值<ul>\n<li>剩余时间 &gt; 自旋阈值 ，则park 剩余时间</li>\n<li>剩余时间&lt;&#x3D;自旋阈值，则不park，在acquire loop 中自旋直到超时</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 独占超时模式获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">doAcquireNanos</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">long</span> nanosTimeout)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 已经超时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nanosTimeout &lt;= <span class=\"number\">0L</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 计算deadline</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">deadline</span> <span class=\"operator\">=</span> System.nanoTime() + nanosTimeout;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.EXCLUSIVE);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//计算剩余时间</span></span><br><span class=\"line\">            nanosTimeout = deadline - System.nanoTime();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nanosTimeout &lt;= <span class=\"number\">0L</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 超时直接返回</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                    <span class=\"comment\">// 判断剩余超时时间是否大于自旋阈值，用于自旋或挂起</span></span><br><span class=\"line\">                nanosTimeout &gt; spinForTimeoutThreshold)</span><br><span class=\"line\">                <span class=\"comment\">// 线程挂起到剩余时间</span></span><br><span class=\"line\">                LockSupport.parkNanos(<span class=\"built_in\">this</span>, nanosTimeout);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">                <span class=\"comment\">// 检测到中断直接抛出异常</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>自旋判断逻辑: 剩余时间非常短是没有必要进行park，直接进行自旋</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The number of nanoseconds for which it is faster to spin</span></span><br><span class=\"line\"><span class=\"comment\"> * rather than to use timed park. A rough estimate suffices</span></span><br><span class=\"line\"><span class=\"comment\"> * to improve responsiveness with very short timeouts.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">spinForTimeoutThreshold</span> <span class=\"operator\">=</span> <span class=\"number\">1000L</span>;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"可中断获取\"><a href=\"#可中断获取\" class=\"headerlink\" title=\"可中断获取\"></a>可中断获取</h1><h2 id=\"lock-Interruptibly\"><a href=\"#lock-Interruptibly\" class=\"headerlink\" title=\"lock Interruptibly\"></a>lock Interruptibly</h2><p>首先查看lock代码的可中断获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：同步器可中断获取</span></span><br><span class=\"line\">    sync.acquireInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AQS-acquireInterruptibly\"><a href=\"#AQS-acquireInterruptibly\" class=\"headerlink\" title=\"AQS acquireInterruptibly\"></a>AQS acquireInterruptibly</h2><p>进行可中断获取</p>\n<ol>\n<li>首先进入方法判断是否已经interrupted</li>\n<li>尝试获取，如果失败则进入acquire loop中循环尝试获取</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * exclusive模式获取，如果interrupted则中止并抛出InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquireInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//入口判断线程是否中断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 尝试获取，如果失败，则在acquire loop中进行尝试获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg))</span><br><span class=\"line\">        doAcquireInterruptibly(arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"doAcquireInterruptibly\"><a href=\"#doAcquireInterruptibly\" class=\"headerlink\" title=\"doAcquireInterruptibly\"></a>doAcquireInterruptibly</h2><p>可中断获取循环，与普通acquire loop 不同之处在于检查到中断后直接抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 循环可中断获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAcquireInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.EXCLUSIVE);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                <span class=\"comment\">// 检查到中断后，不再设置中断状态，而是直接抛出异常</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"可超时、中断-获取\"><a href=\"#可超时、中断-获取\" class=\"headerlink\" title=\"可超时、中断 获取\"></a>可超时、中断 获取</h1><h2 id=\"Lock-tryLock-time-timeUnit\"><a href=\"#Lock-tryLock-time-timeUnit\" class=\"headerlink\" title=\"Lock tryLock(time,timeUnit)\"></a>Lock tryLock(time,timeUnit)</h2><p>尝试在给定时间内获取锁，返回是否获取成功。</p>\n<p>返回的三种条件：</p>\n<ol>\n<li>当前线程获取锁成功</li>\n<li>当前线程被interrupted</li>\n<li>已经达到指定时间</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//AQS模板方法：同步器超时可中断获取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sync.tryAcquireNanos(<span class=\"number\">1</span>, unit.toNanos(time));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AQS-doAcquireNanos\"><a href=\"#AQS-doAcquireNanos\" class=\"headerlink\" title=\"AQS doAcquireNanos\"></a>AQS doAcquireNanos</h2><p>尝试超时获取</p>\n<ol>\n<li>方法入口判断是否interrupted</li>\n<li>尝试获取，如果失败则进入acquire loop中循环尝试获取</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 超时独占模式获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquireNanos</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">long</span> nanosTimeout)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//入口判断线程是否中断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 尝试获取，如果失败，则在acquire loop中进行尝试获取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tryAcquire(arg) ||</span><br><span class=\"line\">        doAcquireNanos(arg, nanosTimeout);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与可中断获取的acquire loop 对比多了对于时间的判断逻辑</p>\n<ol>\n<li>计算deadline，用于判断指定时间</li>\n<li>每次park前比较dealine是否已经达到<ul>\n<li>已经达到超时时间则直接返回false</li>\n</ul>\n</li>\n<li>如果线程需要挂起，判断剩余时间是否达到自旋阈值<ul>\n<li>剩余时间 &gt; 自旋阈值 ，则park 剩余时间</li>\n<li>剩余时间&lt;&#x3D;自旋阈值，则不park，在acquire loop 中自旋直到超时</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 独占超时模式获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">doAcquireNanos</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">long</span> nanosTimeout)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 已经超时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nanosTimeout &lt;= <span class=\"number\">0L</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 计算deadline</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">deadline</span> <span class=\"operator\">=</span> System.nanoTime() + nanosTimeout;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.EXCLUSIVE);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//计算剩余时间</span></span><br><span class=\"line\">            nanosTimeout = deadline - System.nanoTime();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nanosTimeout &lt;= <span class=\"number\">0L</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 超时直接返回</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                    <span class=\"comment\">// 判断剩余超时时间是否大于自旋阈值，用于自旋或挂起</span></span><br><span class=\"line\">                nanosTimeout &gt; spinForTimeoutThreshold)</span><br><span class=\"line\">                <span class=\"comment\">// 线程挂起到剩余时间</span></span><br><span class=\"line\">                LockSupport.parkNanos(<span class=\"built_in\">this</span>, nanosTimeout);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">                <span class=\"comment\">// 检测到中断直接抛出异常</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>自旋判断逻辑: 剩余时间非常短是没有必要进行park，直接进行自旋</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The number of nanoseconds for which it is faster to spin</span></span><br><span class=\"line\"><span class=\"comment\"> * rather than to use timed park. A rough estimate suffices</span></span><br><span class=\"line\"><span class=\"comment\"> * to improve responsiveness with very short timeouts.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">spinForTimeoutThreshold</span> <span class=\"operator\">=</span> <span class=\"number\">1000L</span>;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"计算机基础","slug":"python-python-basics-computer-basics-computer-basics","date":"2025-08-05T22:43:07.000Z","_content":"\n# \n## 课程介绍\n```plain\n课程名称：Python基础视频教程\n讲师：尚硅谷教育，李立超（lichao.li@foxmail.com）\n面向的层次：From Zero to Hero（从入门到精通）\n学习方法：认真听讲，多敲代码\n必备技能：\n    ① 计算机基本操作\n    ② 打字的速度\n    ③ 英语（能阅读基本的英文文档）\n   \n```\n\n## 计算机是什么\n```plain\n在现实生活中，越来越无法离开计算机了\n    电脑、笔记本、手机、游戏机、汽车导航、智能电视 。。。\n计算机就是一个用来计算的机器！\n目前来讲，计算机只能根据人类的指令来完成各种操作，人让它干嘛他就得干嘛\n所以我们学习计算机，就是学习如何控制计算机！\n```\n\n## 计算机的组成\n```plain\n计算机由两部分组成：硬件 和 软件\n硬件包含：键盘、鼠标、显示器、CPU、主板、内存、硬盘 。。。\n    硬件是看的见摸得着的\n软件包含：系统软件（windows、macOS、Linux）和应用软件（office 、QQ、绝地求生）\n    软件是看的见摸不着的，软件负责控制计算机中的硬件    \n```\n\n## 计算机的使用方式\n```plain\n我们必须要通过软件来对计算机完成各种操作，\n    但是注意，软件中并不是所有的功能都会对用户开放，\n        用户需要调用软件提供的接口（Interface 交互界面）来操作计算机\n\n用户界面分成两种：TUI（文本交互界面）和 GUI（图形化交互界面）\n```\n\n## windows的命令行\n\n命令行就是文本交互界面，通过命令行可以使用一个一个的指令来操作计算机\n任何的计算机的操作系统中都包含有命令行（windows、linux、macOS）\n命令行有多个不同的名字：\n    命令行、命令行窗口、DOS窗口、命令提示符、CMD窗口、Shell、终端、Terminal\n    练习1：\n        通过搜索引擎来搜索一下，各个操作系统当中的命令行窗口的样式\n\n1.如何进入到命令行\n    win键 + R 出现运行窗口，输入cmd，然后回车\n2.命令行的结构\n    - 版本及版权声明（一般没有什么用）\n        Microsoft Windows [版本 10.0.16299.431]\n        (c) 2017 Microsoft Corporation。保留所有权利。\n\n    - 命令提示符\n        C:\\Users\\lilichao>  \n            C:  \n                - 当前所在的磁盘根目录\n                - 可以通过 x: 来切换盘符（x表示你的盘符）\n\n            \\Users\\lilichao\n                - 所在磁盘的路径，当前所在的文件夹\n                - cd 来切换目录\n            >\n                - 命令提示符，在大于号后边可以直接输入指令\n\n    练习2：尝试使用多种方式进入到你的系统的命令行，并且观察你的和我的有什么区别？ \n\n3.常用的dos命令\n```\ndir 查看当前目录下的所有文件（夹）\ncd 进入到指定的目录\n    . 表示当前目录\n    .. 表示上一级目录\nmd 创建一个目录\nrd 删除一个目录    \ndel 删除一个文件\ncls 清除屏幕\n```\n\n    命令的语法\n        命令 [参数] [选项]\n\n    练习3：通过搜索引擎搜索一下其他的一些常用DOS命令，并尝试使用一些命令的选项    \n\n4.小技巧\n- 方向键上下，查看命令的历史记录\n- tab键自动补全命令        \n\n\n## 环境变量（environment variable）\n```plain\n环境变量指的就是操作系统当中的一些变量。\n可以通过修改环境变量，来对计算机进行配置（主要是来配置一些路径的）\n1.查看环境变量\n    > 右键 计算机（此电脑），选择属性\n    > 系统界面左侧选择 高级系统设置\n    > 选择环境变量\n    环境变量界面分成了两个部分，上边是用户环境变量，下边是系统环境变量\n        建议只修改用户的环境变量，不要修改系统的环境变量\n\n2.添加环境变量\n    > 通过新建按钮添加环境变量\n    > 一个环境变量可以由多个值，值与值之间使用;（英文）隔开\n\n3.修改环境变量\n    > 通过编辑按钮来修改环境变量\n\n4.删除环境变量\n    > 通过删除按钮来删除环境变量\n\n练习4：进入到环境变量的界面，创建一个USERNAME环境变量，\n    修改USERNAME环境变量，并尝试添加多个值，然后删除USERNAME环境变量    \n```\n\n## path环境变量\n```plain\npath环境变量中保存的是一个一个的路径。\n当我们在命令行中输入一个命令（或访问一个文件时），\n    系统会首先在当前目录下寻找，如果找到了则直接执行或打开\n    如果没有找到，则会依次去path环境变量的路径中去寻找，直到找到为止\n    如果path环境变量中的路径都没有找到，则报错\n        'xxx' 不是内部或外部命令，也不是可运行的程序或批处理文件。\n我们可以将一些经常需要访问到的文件会程序的路径，添加到path环境变量中，\n    这样我们就可以在任意的位置访问到这些文件了\n\n注意事项：\n    1.如果环境变量中没有path，可以手动添加\n    2.path环境变量不区分大小写 PATH Path path   \n    3.修改完环境变量必须重新启动命令行窗口\n    4.多个路径之间使用;隔开\n\n练习5：在桌面创建一个hello文件夹，文件中创建一个abc.txt输入随意的内容\n        然后将hello的路径添加到path环境变量中，尝试在任意位置访问abc.txt\n        最后将hello路径从path环境变量中删除。             \n```\n\n## 进制\n```plain\n- 十进制（最常用的进制）\n    - 十进制就是满十进一的进制\n    - 十进制当中一共有10个数字\n        0 1 2 3 4 5 6 7 8 9\n    - 十进制如何计数\n        0 1 2 3 4 5 6 7 8 9 10 11 12 。。。 19 20 。。。29 30\n\n- 二进制（计算机底层使用的进制）\n    - 满二进一\n    - 二进制中一共有2个数字\n        0 1\n    - 二进制如何计数\n        0 1 10 11 100 101 110 111 1000\n    - 所有的数据在计算机底层都是以二进制的形式保存的，计算机只认二进制\n    - 可以将内存想象为一个一个的小格子，小格子中可以存储一个0或一个1\n    - 内存中的每一个小格子，我们称为1bit（位）    \n        bit是计算机中的最小的单位\n        byte是我们最小的可操作的单位\n        8bit = 1byte（字节）    \n        1024byte = 1kb（千字节） \n        1024kb = 1mb（兆字节）\n        1024mb = 1gb（吉字节）\n        1024gb = 1tb（太字节）\n        。。。\n           \n\n- 八进制（一般不用）\n    - 满八进一\n    - 八进制中一共有8个数字\n        0 1 2 3 4 5 6 7\n    - 八进制如何计数\n        0 1 2 3 4 5 6 7 10 11 。。。 17 20 。。。27 30\n\n- 十六进制\n    - 满十六进一\n    - 十六进制中一共有16个数字\n        由于十六进制是满16才进位，\n            所以十六进制中引入了a b c d e f来表示 10 11 12 13 14 15   \n        0 1 2 3 4 5 6 7 8 9 a b c d e f \n    - 十六进制如何计数    \n        0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 。。。 1a 1b 1c 1d 1e 1f\n        20 21 22 。。。 2a 2b 2c 2d 2e 2f 30    \n    - 我们在查看二进制数据时，一般会以十六进制的形式显示\n```\n\n## 文本文件和字符集\n```plain\n- 文本分成两种，一种叫做纯文本，还有一种叫做富文本\n- 纯文本中只能保存单一的文本内容，无法保存内容无关的东西（字体、颜色、图片。。。）\n- 富文本中可以保存文本以外的内容（word文档）\n- 在开发时，编写程序使用的全都是纯文本！\n- 纯文本在计算机底层也会转换为二进制保存，\n    将字符转换为二进制码的过程，我们称为编码\n    将二进制码转换为字符的过程，我们称为解码\n    编码和解码时所采用的规则，我们称为字符集\n- 常见的字符集：\n    ASCII\n        - 美国人编码，使用7位来对美国常用的字符进行编码\n        - 包含128个字符\n    ISO-8859-1\n        - 欧洲的编码，使用8位\n        - 包含256个字符\n    GB2312\n    GBK\n        国标码，中国的编码\n    Unicode   \n        万国码，包含世界上所有的语言和符号，编写程序时一般都会使用Unicode编码\n        Unicode编码有多种实现，UTF-8 UTF-16 UTF-32\n        最常用的就是UTF-8\n- 乱码\n    编写程序时，如果发现程序代码出现乱码的情况，就要马上去检查字符集是否正确        \n```\n\n## Sublime Text 3\n```plain\n- 纯文本编辑器\n- Package Control（Sublime的包管理器）\n    - Sublime Text3中的插件，通过该插件可以向Sublime中安装新的包\n- 练习：\n    1.安装Sublime Text3\n    2.在Sublime中安装Package Control\n    3.通过Package Control安装Sublime的中文语言包   \n    4.尝试为你的Sublime安装新的主题（通过搜索引擎搜索）\n```\n\n","source":"_posts/python/python-basics/computer-basics/computer-basics.md","raw":"---\ntitle: 计算机基础\nslug: 计算机基础\ndate: 2025-08-06 06:43:07\ntags: \n  - python\n  - basics\n  - computer\n\ncategories:\n  - python\n  - python-basics\n  - computer-basics\n\n---\n\n# \n## 课程介绍\n```plain\n课程名称：Python基础视频教程\n讲师：尚硅谷教育，李立超（lichao.li@foxmail.com）\n面向的层次：From Zero to Hero（从入门到精通）\n学习方法：认真听讲，多敲代码\n必备技能：\n    ① 计算机基本操作\n    ② 打字的速度\n    ③ 英语（能阅读基本的英文文档）\n   \n```\n\n## 计算机是什么\n```plain\n在现实生活中，越来越无法离开计算机了\n    电脑、笔记本、手机、游戏机、汽车导航、智能电视 。。。\n计算机就是一个用来计算的机器！\n目前来讲，计算机只能根据人类的指令来完成各种操作，人让它干嘛他就得干嘛\n所以我们学习计算机，就是学习如何控制计算机！\n```\n\n## 计算机的组成\n```plain\n计算机由两部分组成：硬件 和 软件\n硬件包含：键盘、鼠标、显示器、CPU、主板、内存、硬盘 。。。\n    硬件是看的见摸得着的\n软件包含：系统软件（windows、macOS、Linux）和应用软件（office 、QQ、绝地求生）\n    软件是看的见摸不着的，软件负责控制计算机中的硬件    \n```\n\n## 计算机的使用方式\n```plain\n我们必须要通过软件来对计算机完成各种操作，\n    但是注意，软件中并不是所有的功能都会对用户开放，\n        用户需要调用软件提供的接口（Interface 交互界面）来操作计算机\n\n用户界面分成两种：TUI（文本交互界面）和 GUI（图形化交互界面）\n```\n\n## windows的命令行\n\n命令行就是文本交互界面，通过命令行可以使用一个一个的指令来操作计算机\n任何的计算机的操作系统中都包含有命令行（windows、linux、macOS）\n命令行有多个不同的名字：\n    命令行、命令行窗口、DOS窗口、命令提示符、CMD窗口、Shell、终端、Terminal\n    练习1：\n        通过搜索引擎来搜索一下，各个操作系统当中的命令行窗口的样式\n\n1.如何进入到命令行\n    win键 + R 出现运行窗口，输入cmd，然后回车\n2.命令行的结构\n    - 版本及版权声明（一般没有什么用）\n        Microsoft Windows [版本 10.0.16299.431]\n        (c) 2017 Microsoft Corporation。保留所有权利。\n\n    - 命令提示符\n        C:\\Users\\lilichao>  \n            C:  \n                - 当前所在的磁盘根目录\n                - 可以通过 x: 来切换盘符（x表示你的盘符）\n\n            \\Users\\lilichao\n                - 所在磁盘的路径，当前所在的文件夹\n                - cd 来切换目录\n            >\n                - 命令提示符，在大于号后边可以直接输入指令\n\n    练习2：尝试使用多种方式进入到你的系统的命令行，并且观察你的和我的有什么区别？ \n\n3.常用的dos命令\n```\ndir 查看当前目录下的所有文件（夹）\ncd 进入到指定的目录\n    . 表示当前目录\n    .. 表示上一级目录\nmd 创建一个目录\nrd 删除一个目录    \ndel 删除一个文件\ncls 清除屏幕\n```\n\n    命令的语法\n        命令 [参数] [选项]\n\n    练习3：通过搜索引擎搜索一下其他的一些常用DOS命令，并尝试使用一些命令的选项    \n\n4.小技巧\n- 方向键上下，查看命令的历史记录\n- tab键自动补全命令        \n\n\n## 环境变量（environment variable）\n```plain\n环境变量指的就是操作系统当中的一些变量。\n可以通过修改环境变量，来对计算机进行配置（主要是来配置一些路径的）\n1.查看环境变量\n    > 右键 计算机（此电脑），选择属性\n    > 系统界面左侧选择 高级系统设置\n    > 选择环境变量\n    环境变量界面分成了两个部分，上边是用户环境变量，下边是系统环境变量\n        建议只修改用户的环境变量，不要修改系统的环境变量\n\n2.添加环境变量\n    > 通过新建按钮添加环境变量\n    > 一个环境变量可以由多个值，值与值之间使用;（英文）隔开\n\n3.修改环境变量\n    > 通过编辑按钮来修改环境变量\n\n4.删除环境变量\n    > 通过删除按钮来删除环境变量\n\n练习4：进入到环境变量的界面，创建一个USERNAME环境变量，\n    修改USERNAME环境变量，并尝试添加多个值，然后删除USERNAME环境变量    \n```\n\n## path环境变量\n```plain\npath环境变量中保存的是一个一个的路径。\n当我们在命令行中输入一个命令（或访问一个文件时），\n    系统会首先在当前目录下寻找，如果找到了则直接执行或打开\n    如果没有找到，则会依次去path环境变量的路径中去寻找，直到找到为止\n    如果path环境变量中的路径都没有找到，则报错\n        'xxx' 不是内部或外部命令，也不是可运行的程序或批处理文件。\n我们可以将一些经常需要访问到的文件会程序的路径，添加到path环境变量中，\n    这样我们就可以在任意的位置访问到这些文件了\n\n注意事项：\n    1.如果环境变量中没有path，可以手动添加\n    2.path环境变量不区分大小写 PATH Path path   \n    3.修改完环境变量必须重新启动命令行窗口\n    4.多个路径之间使用;隔开\n\n练习5：在桌面创建一个hello文件夹，文件中创建一个abc.txt输入随意的内容\n        然后将hello的路径添加到path环境变量中，尝试在任意位置访问abc.txt\n        最后将hello路径从path环境变量中删除。             \n```\n\n## 进制\n```plain\n- 十进制（最常用的进制）\n    - 十进制就是满十进一的进制\n    - 十进制当中一共有10个数字\n        0 1 2 3 4 5 6 7 8 9\n    - 十进制如何计数\n        0 1 2 3 4 5 6 7 8 9 10 11 12 。。。 19 20 。。。29 30\n\n- 二进制（计算机底层使用的进制）\n    - 满二进一\n    - 二进制中一共有2个数字\n        0 1\n    - 二进制如何计数\n        0 1 10 11 100 101 110 111 1000\n    - 所有的数据在计算机底层都是以二进制的形式保存的，计算机只认二进制\n    - 可以将内存想象为一个一个的小格子，小格子中可以存储一个0或一个1\n    - 内存中的每一个小格子，我们称为1bit（位）    \n        bit是计算机中的最小的单位\n        byte是我们最小的可操作的单位\n        8bit = 1byte（字节）    \n        1024byte = 1kb（千字节） \n        1024kb = 1mb（兆字节）\n        1024mb = 1gb（吉字节）\n        1024gb = 1tb（太字节）\n        。。。\n           \n\n- 八进制（一般不用）\n    - 满八进一\n    - 八进制中一共有8个数字\n        0 1 2 3 4 5 6 7\n    - 八进制如何计数\n        0 1 2 3 4 5 6 7 10 11 。。。 17 20 。。。27 30\n\n- 十六进制\n    - 满十六进一\n    - 十六进制中一共有16个数字\n        由于十六进制是满16才进位，\n            所以十六进制中引入了a b c d e f来表示 10 11 12 13 14 15   \n        0 1 2 3 4 5 6 7 8 9 a b c d e f \n    - 十六进制如何计数    \n        0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 。。。 1a 1b 1c 1d 1e 1f\n        20 21 22 。。。 2a 2b 2c 2d 2e 2f 30    \n    - 我们在查看二进制数据时，一般会以十六进制的形式显示\n```\n\n## 文本文件和字符集\n```plain\n- 文本分成两种，一种叫做纯文本，还有一种叫做富文本\n- 纯文本中只能保存单一的文本内容，无法保存内容无关的东西（字体、颜色、图片。。。）\n- 富文本中可以保存文本以外的内容（word文档）\n- 在开发时，编写程序使用的全都是纯文本！\n- 纯文本在计算机底层也会转换为二进制保存，\n    将字符转换为二进制码的过程，我们称为编码\n    将二进制码转换为字符的过程，我们称为解码\n    编码和解码时所采用的规则，我们称为字符集\n- 常见的字符集：\n    ASCII\n        - 美国人编码，使用7位来对美国常用的字符进行编码\n        - 包含128个字符\n    ISO-8859-1\n        - 欧洲的编码，使用8位\n        - 包含256个字符\n    GB2312\n    GBK\n        国标码，中国的编码\n    Unicode   \n        万国码，包含世界上所有的语言和符号，编写程序时一般都会使用Unicode编码\n        Unicode编码有多种实现，UTF-8 UTF-16 UTF-32\n        最常用的就是UTF-8\n- 乱码\n    编写程序时，如果发现程序代码出现乱码的情况，就要马上去检查字符集是否正确        \n```\n\n## Sublime Text 3\n```plain\n- 纯文本编辑器\n- Package Control（Sublime的包管理器）\n    - Sublime Text3中的插件，通过该插件可以向Sublime中安装新的包\n- 练习：\n    1.安装Sublime Text3\n    2.在Sublime中安装Package Control\n    3.通过Package Control安装Sublime的中文语言包   \n    4.尝试为你的Sublime安装新的主题（通过搜索引擎搜索）\n```\n\n","published":1,"updated":"2025-08-12T23:12:41.264Z","comments":1,"layout":"post","photos":[],"_id":"cmeal74go000djrcibc4ga5bp","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">课程名称：Python基础视频教程</span><br><span class=\"line\">讲师：尚硅谷教育，李立超（lichao.li@foxmail.com）</span><br><span class=\"line\">面向的层次：From Zero to Hero（从入门到精通）</span><br><span class=\"line\">学习方法：认真听讲，多敲代码</span><br><span class=\"line\">必备技能：</span><br><span class=\"line\">    ① 计算机基本操作</span><br><span class=\"line\">    ② 打字的速度</span><br><span class=\"line\">    ③ 英语（能阅读基本的英文文档）</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机是什么\"><a href=\"#计算机是什么\" class=\"headerlink\" title=\"计算机是什么\"></a>计算机是什么</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在现实生活中，越来越无法离开计算机了</span><br><span class=\"line\">    电脑、笔记本、手机、游戏机、汽车导航、智能电视 。。。</span><br><span class=\"line\">计算机就是一个用来计算的机器！</span><br><span class=\"line\">目前来讲，计算机只能根据人类的指令来完成各种操作，人让它干嘛他就得干嘛</span><br><span class=\"line\">所以我们学习计算机，就是学习如何控制计算机！</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机的组成\"><a href=\"#计算机的组成\" class=\"headerlink\" title=\"计算机的组成\"></a>计算机的组成</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算机由两部分组成：硬件 和 软件</span><br><span class=\"line\">硬件包含：键盘、鼠标、显示器、CPU、主板、内存、硬盘 。。。</span><br><span class=\"line\">    硬件是看的见摸得着的</span><br><span class=\"line\">软件包含：系统软件（windows、macOS、Linux）和应用软件（office 、QQ、绝地求生）</span><br><span class=\"line\">    软件是看的见摸不着的，软件负责控制计算机中的硬件    </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机的使用方式\"><a href=\"#计算机的使用方式\" class=\"headerlink\" title=\"计算机的使用方式\"></a>计算机的使用方式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们必须要通过软件来对计算机完成各种操作，</span><br><span class=\"line\">    但是注意，软件中并不是所有的功能都会对用户开放，</span><br><span class=\"line\">        用户需要调用软件提供的接口（Interface 交互界面）来操作计算机</span><br><span class=\"line\"></span><br><span class=\"line\">用户界面分成两种：TUI（文本交互界面）和 GUI（图形化交互界面）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"windows的命令行\"><a href=\"#windows的命令行\" class=\"headerlink\" title=\"windows的命令行\"></a>windows的命令行</h2><p>命令行就是文本交互界面，通过命令行可以使用一个一个的指令来操作计算机<br>任何的计算机的操作系统中都包含有命令行（windows、linux、macOS）<br>命令行有多个不同的名字：<br>    命令行、命令行窗口、DOS窗口、命令提示符、CMD窗口、Shell、终端、Terminal<br>    练习1：<br>        通过搜索引擎来搜索一下，各个操作系统当中的命令行窗口的样式</p>\n<p>1.如何进入到命令行<br>    win键 + R 出现运行窗口，输入cmd，然后回车<br>2.命令行的结构<br>    - 版本及版权声明（一般没有什么用）<br>        Microsoft Windows [版本 10.0.16299.431]<br>        (c) 2017 Microsoft Corporation。保留所有权利。</p>\n<pre><code>- 命令提示符\n    C:\\Users\\lilichao&gt;  \n        C:  \n            - 当前所在的磁盘根目录\n            - 可以通过 x: 来切换盘符（x表示你的盘符）\n\n        \\Users\\lilichao\n            - 所在磁盘的路径，当前所在的文件夹\n            - cd 来切换目录\n        &gt;\n            - 命令提示符，在大于号后边可以直接输入指令\n\n练习2：尝试使用多种方式进入到你的系统的命令行，并且观察你的和我的有什么区别？ \n</code></pre>\n<p>3.常用的dos命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir 查看当前目录下的所有文件（夹）</span><br><span class=\"line\">cd 进入到指定的目录</span><br><span class=\"line\">    . 表示当前目录</span><br><span class=\"line\">    .. 表示上一级目录</span><br><span class=\"line\">md 创建一个目录</span><br><span class=\"line\">rd 删除一个目录    </span><br><span class=\"line\">del 删除一个文件</span><br><span class=\"line\">cls 清除屏幕</span><br></pre></td></tr></table></figure>\n\n<pre><code>命令的语法\n    命令 [参数] [选项]\n\n练习3：通过搜索引擎搜索一下其他的一些常用DOS命令，并尝试使用一些命令的选项    \n</code></pre>\n<p>4.小技巧</p>\n<ul>\n<li>方向键上下，查看命令的历史记录</li>\n<li>tab键自动补全命令</li>\n</ul>\n<h2 id=\"环境变量（environment-variable）\"><a href=\"#环境变量（environment-variable）\" class=\"headerlink\" title=\"环境变量（environment variable）\"></a>环境变量（environment variable）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">环境变量指的就是操作系统当中的一些变量。</span><br><span class=\"line\">可以通过修改环境变量，来对计算机进行配置（主要是来配置一些路径的）</span><br><span class=\"line\">1.查看环境变量</span><br><span class=\"line\">    &gt; 右键 计算机（此电脑），选择属性</span><br><span class=\"line\">    &gt; 系统界面左侧选择 高级系统设置</span><br><span class=\"line\">    &gt; 选择环境变量</span><br><span class=\"line\">    环境变量界面分成了两个部分，上边是用户环境变量，下边是系统环境变量</span><br><span class=\"line\">        建议只修改用户的环境变量，不要修改系统的环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">2.添加环境变量</span><br><span class=\"line\">    &gt; 通过新建按钮添加环境变量</span><br><span class=\"line\">    &gt; 一个环境变量可以由多个值，值与值之间使用;（英文）隔开</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改环境变量</span><br><span class=\"line\">    &gt; 通过编辑按钮来修改环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">4.删除环境变量</span><br><span class=\"line\">    &gt; 通过删除按钮来删除环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">练习4：进入到环境变量的界面，创建一个USERNAME环境变量，</span><br><span class=\"line\">    修改USERNAME环境变量，并尝试添加多个值，然后删除USERNAME环境变量    </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"path环境变量\"><a href=\"#path环境变量\" class=\"headerlink\" title=\"path环境变量\"></a>path环境变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path环境变量中保存的是一个一个的路径。</span><br><span class=\"line\">当我们在命令行中输入一个命令（或访问一个文件时），</span><br><span class=\"line\">    系统会首先在当前目录下寻找，如果找到了则直接执行或打开</span><br><span class=\"line\">    如果没有找到，则会依次去path环境变量的路径中去寻找，直到找到为止</span><br><span class=\"line\">    如果path环境变量中的路径都没有找到，则报错</span><br><span class=\"line\">        &#x27;xxx&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br><span class=\"line\">我们可以将一些经常需要访问到的文件会程序的路径，添加到path环境变量中，</span><br><span class=\"line\">    这样我们就可以在任意的位置访问到这些文件了</span><br><span class=\"line\"></span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">    1.如果环境变量中没有path，可以手动添加</span><br><span class=\"line\">    2.path环境变量不区分大小写 PATH Path path   </span><br><span class=\"line\">    3.修改完环境变量必须重新启动命令行窗口</span><br><span class=\"line\">    4.多个路径之间使用;隔开</span><br><span class=\"line\"></span><br><span class=\"line\">练习5：在桌面创建一个hello文件夹，文件中创建一个abc.txt输入随意的内容</span><br><span class=\"line\">        然后将hello的路径添加到path环境变量中，尝试在任意位置访问abc.txt</span><br><span class=\"line\">        最后将hello路径从path环境变量中删除。             </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 十进制（最常用的进制）</span><br><span class=\"line\">    - 十进制就是满十进一的进制</span><br><span class=\"line\">    - 十进制当中一共有10个数字</span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9</span><br><span class=\"line\">    - 十进制如何计数</span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9 10 11 12 。。。 19 20 。。。29 30</span><br><span class=\"line\"></span><br><span class=\"line\">- 二进制（计算机底层使用的进制）</span><br><span class=\"line\">    - 满二进一</span><br><span class=\"line\">    - 二进制中一共有2个数字</span><br><span class=\"line\">        0 1</span><br><span class=\"line\">    - 二进制如何计数</span><br><span class=\"line\">        0 1 10 11 100 101 110 111 1000</span><br><span class=\"line\">    - 所有的数据在计算机底层都是以二进制的形式保存的，计算机只认二进制</span><br><span class=\"line\">    - 可以将内存想象为一个一个的小格子，小格子中可以存储一个0或一个1</span><br><span class=\"line\">    - 内存中的每一个小格子，我们称为1bit（位）    </span><br><span class=\"line\">        bit是计算机中的最小的单位</span><br><span class=\"line\">        byte是我们最小的可操作的单位</span><br><span class=\"line\">        8bit = 1byte（字节）    </span><br><span class=\"line\">        1024byte = 1kb（千字节） </span><br><span class=\"line\">        1024kb = 1mb（兆字节）</span><br><span class=\"line\">        1024mb = 1gb（吉字节）</span><br><span class=\"line\">        1024gb = 1tb（太字节）</span><br><span class=\"line\">        。。。</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">- 八进制（一般不用）</span><br><span class=\"line\">    - 满八进一</span><br><span class=\"line\">    - 八进制中一共有8个数字</span><br><span class=\"line\">        0 1 2 3 4 5 6 7</span><br><span class=\"line\">    - 八进制如何计数</span><br><span class=\"line\">        0 1 2 3 4 5 6 7 10 11 。。。 17 20 。。。27 30</span><br><span class=\"line\"></span><br><span class=\"line\">- 十六进制</span><br><span class=\"line\">    - 满十六进一</span><br><span class=\"line\">    - 十六进制中一共有16个数字</span><br><span class=\"line\">        由于十六进制是满16才进位，</span><br><span class=\"line\">            所以十六进制中引入了a b c d e f来表示 10 11 12 13 14 15   </span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9 a b c d e f </span><br><span class=\"line\">    - 十六进制如何计数    </span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 。。。 1a 1b 1c 1d 1e 1f</span><br><span class=\"line\">        20 21 22 。。。 2a 2b 2c 2d 2e 2f 30    </span><br><span class=\"line\">    - 我们在查看二进制数据时，一般会以十六进制的形式显示</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本文件和字符集\"><a href=\"#文本文件和字符集\" class=\"headerlink\" title=\"文本文件和字符集\"></a>文本文件和字符集</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本分成两种，一种叫做纯文本，还有一种叫做富文本</span><br><span class=\"line\">- 纯文本中只能保存单一的文本内容，无法保存内容无关的东西（字体、颜色、图片。。。）</span><br><span class=\"line\">- 富文本中可以保存文本以外的内容（word文档）</span><br><span class=\"line\">- 在开发时，编写程序使用的全都是纯文本！</span><br><span class=\"line\">- 纯文本在计算机底层也会转换为二进制保存，</span><br><span class=\"line\">    将字符转换为二进制码的过程，我们称为编码</span><br><span class=\"line\">    将二进制码转换为字符的过程，我们称为解码</span><br><span class=\"line\">    编码和解码时所采用的规则，我们称为字符集</span><br><span class=\"line\">- 常见的字符集：</span><br><span class=\"line\">    ASCII</span><br><span class=\"line\">        - 美国人编码，使用7位来对美国常用的字符进行编码</span><br><span class=\"line\">        - 包含128个字符</span><br><span class=\"line\">    ISO-8859-1</span><br><span class=\"line\">        - 欧洲的编码，使用8位</span><br><span class=\"line\">        - 包含256个字符</span><br><span class=\"line\">    GB2312</span><br><span class=\"line\">    GBK</span><br><span class=\"line\">        国标码，中国的编码</span><br><span class=\"line\">    Unicode   </span><br><span class=\"line\">        万国码，包含世界上所有的语言和符号，编写程序时一般都会使用Unicode编码</span><br><span class=\"line\">        Unicode编码有多种实现，UTF-8 UTF-16 UTF-32</span><br><span class=\"line\">        最常用的就是UTF-8</span><br><span class=\"line\">- 乱码</span><br><span class=\"line\">    编写程序时，如果发现程序代码出现乱码的情况，就要马上去检查字符集是否正确        </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sublime-Text-3\"><a href=\"#Sublime-Text-3\" class=\"headerlink\" title=\"Sublime Text 3\"></a>Sublime Text 3</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 纯文本编辑器</span><br><span class=\"line\">- Package Control（Sublime的包管理器）</span><br><span class=\"line\">    - Sublime Text3中的插件，通过该插件可以向Sublime中安装新的包</span><br><span class=\"line\">- 练习：</span><br><span class=\"line\">    1.安装Sublime Text3</span><br><span class=\"line\">    2.在Sublime中安装Package Control</span><br><span class=\"line\">    3.通过Package Control安装Sublime的中文语言包   </span><br><span class=\"line\">    4.尝试为你的Sublime安装新的主题（通过搜索引擎搜索）</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">课程名称：Python基础视频教程</span><br><span class=\"line\">讲师：尚硅谷教育，李立超（lichao.li@foxmail.com）</span><br><span class=\"line\">面向的层次：From Zero to Hero（从入门到精通）</span><br><span class=\"line\">学习方法：认真听讲，多敲代码</span><br><span class=\"line\">必备技能：</span><br><span class=\"line\">    ① 计算机基本操作</span><br><span class=\"line\">    ② 打字的速度</span><br><span class=\"line\">    ③ 英语（能阅读基本的英文文档）</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机是什么\"><a href=\"#计算机是什么\" class=\"headerlink\" title=\"计算机是什么\"></a>计算机是什么</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在现实生活中，越来越无法离开计算机了</span><br><span class=\"line\">    电脑、笔记本、手机、游戏机、汽车导航、智能电视 。。。</span><br><span class=\"line\">计算机就是一个用来计算的机器！</span><br><span class=\"line\">目前来讲，计算机只能根据人类的指令来完成各种操作，人让它干嘛他就得干嘛</span><br><span class=\"line\">所以我们学习计算机，就是学习如何控制计算机！</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机的组成\"><a href=\"#计算机的组成\" class=\"headerlink\" title=\"计算机的组成\"></a>计算机的组成</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算机由两部分组成：硬件 和 软件</span><br><span class=\"line\">硬件包含：键盘、鼠标、显示器、CPU、主板、内存、硬盘 。。。</span><br><span class=\"line\">    硬件是看的见摸得着的</span><br><span class=\"line\">软件包含：系统软件（windows、macOS、Linux）和应用软件（office 、QQ、绝地求生）</span><br><span class=\"line\">    软件是看的见摸不着的，软件负责控制计算机中的硬件    </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机的使用方式\"><a href=\"#计算机的使用方式\" class=\"headerlink\" title=\"计算机的使用方式\"></a>计算机的使用方式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们必须要通过软件来对计算机完成各种操作，</span><br><span class=\"line\">    但是注意，软件中并不是所有的功能都会对用户开放，</span><br><span class=\"line\">        用户需要调用软件提供的接口（Interface 交互界面）来操作计算机</span><br><span class=\"line\"></span><br><span class=\"line\">用户界面分成两种：TUI（文本交互界面）和 GUI（图形化交互界面）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"windows的命令行\"><a href=\"#windows的命令行\" class=\"headerlink\" title=\"windows的命令行\"></a>windows的命令行</h2><p>命令行就是文本交互界面，通过命令行可以使用一个一个的指令来操作计算机<br>任何的计算机的操作系统中都包含有命令行（windows、linux、macOS）<br>命令行有多个不同的名字：<br>    命令行、命令行窗口、DOS窗口、命令提示符、CMD窗口、Shell、终端、Terminal<br>    练习1：<br>        通过搜索引擎来搜索一下，各个操作系统当中的命令行窗口的样式</p>\n<p>1.如何进入到命令行<br>    win键 + R 出现运行窗口，输入cmd，然后回车<br>2.命令行的结构<br>    - 版本及版权声明（一般没有什么用）<br>        Microsoft Windows [版本 10.0.16299.431]<br>        (c) 2017 Microsoft Corporation。保留所有权利。</p>\n<pre><code>- 命令提示符\n    C:\\Users\\lilichao&gt;  \n        C:  \n            - 当前所在的磁盘根目录\n            - 可以通过 x: 来切换盘符（x表示你的盘符）\n\n        \\Users\\lilichao\n            - 所在磁盘的路径，当前所在的文件夹\n            - cd 来切换目录\n        &gt;\n            - 命令提示符，在大于号后边可以直接输入指令\n\n练习2：尝试使用多种方式进入到你的系统的命令行，并且观察你的和我的有什么区别？ \n</code></pre>\n<p>3.常用的dos命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir 查看当前目录下的所有文件（夹）</span><br><span class=\"line\">cd 进入到指定的目录</span><br><span class=\"line\">    . 表示当前目录</span><br><span class=\"line\">    .. 表示上一级目录</span><br><span class=\"line\">md 创建一个目录</span><br><span class=\"line\">rd 删除一个目录    </span><br><span class=\"line\">del 删除一个文件</span><br><span class=\"line\">cls 清除屏幕</span><br></pre></td></tr></table></figure>\n\n<pre><code>命令的语法\n    命令 [参数] [选项]\n\n练习3：通过搜索引擎搜索一下其他的一些常用DOS命令，并尝试使用一些命令的选项    \n</code></pre>\n<p>4.小技巧</p>\n<ul>\n<li>方向键上下，查看命令的历史记录</li>\n<li>tab键自动补全命令</li>\n</ul>\n<h2 id=\"环境变量（environment-variable）\"><a href=\"#环境变量（environment-variable）\" class=\"headerlink\" title=\"环境变量（environment variable）\"></a>环境变量（environment variable）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">环境变量指的就是操作系统当中的一些变量。</span><br><span class=\"line\">可以通过修改环境变量，来对计算机进行配置（主要是来配置一些路径的）</span><br><span class=\"line\">1.查看环境变量</span><br><span class=\"line\">    &gt; 右键 计算机（此电脑），选择属性</span><br><span class=\"line\">    &gt; 系统界面左侧选择 高级系统设置</span><br><span class=\"line\">    &gt; 选择环境变量</span><br><span class=\"line\">    环境变量界面分成了两个部分，上边是用户环境变量，下边是系统环境变量</span><br><span class=\"line\">        建议只修改用户的环境变量，不要修改系统的环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">2.添加环境变量</span><br><span class=\"line\">    &gt; 通过新建按钮添加环境变量</span><br><span class=\"line\">    &gt; 一个环境变量可以由多个值，值与值之间使用;（英文）隔开</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改环境变量</span><br><span class=\"line\">    &gt; 通过编辑按钮来修改环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">4.删除环境变量</span><br><span class=\"line\">    &gt; 通过删除按钮来删除环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">练习4：进入到环境变量的界面，创建一个USERNAME环境变量，</span><br><span class=\"line\">    修改USERNAME环境变量，并尝试添加多个值，然后删除USERNAME环境变量    </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"path环境变量\"><a href=\"#path环境变量\" class=\"headerlink\" title=\"path环境变量\"></a>path环境变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path环境变量中保存的是一个一个的路径。</span><br><span class=\"line\">当我们在命令行中输入一个命令（或访问一个文件时），</span><br><span class=\"line\">    系统会首先在当前目录下寻找，如果找到了则直接执行或打开</span><br><span class=\"line\">    如果没有找到，则会依次去path环境变量的路径中去寻找，直到找到为止</span><br><span class=\"line\">    如果path环境变量中的路径都没有找到，则报错</span><br><span class=\"line\">        &#x27;xxx&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br><span class=\"line\">我们可以将一些经常需要访问到的文件会程序的路径，添加到path环境变量中，</span><br><span class=\"line\">    这样我们就可以在任意的位置访问到这些文件了</span><br><span class=\"line\"></span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">    1.如果环境变量中没有path，可以手动添加</span><br><span class=\"line\">    2.path环境变量不区分大小写 PATH Path path   </span><br><span class=\"line\">    3.修改完环境变量必须重新启动命令行窗口</span><br><span class=\"line\">    4.多个路径之间使用;隔开</span><br><span class=\"line\"></span><br><span class=\"line\">练习5：在桌面创建一个hello文件夹，文件中创建一个abc.txt输入随意的内容</span><br><span class=\"line\">        然后将hello的路径添加到path环境变量中，尝试在任意位置访问abc.txt</span><br><span class=\"line\">        最后将hello路径从path环境变量中删除。             </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 十进制（最常用的进制）</span><br><span class=\"line\">    - 十进制就是满十进一的进制</span><br><span class=\"line\">    - 十进制当中一共有10个数字</span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9</span><br><span class=\"line\">    - 十进制如何计数</span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9 10 11 12 。。。 19 20 。。。29 30</span><br><span class=\"line\"></span><br><span class=\"line\">- 二进制（计算机底层使用的进制）</span><br><span class=\"line\">    - 满二进一</span><br><span class=\"line\">    - 二进制中一共有2个数字</span><br><span class=\"line\">        0 1</span><br><span class=\"line\">    - 二进制如何计数</span><br><span class=\"line\">        0 1 10 11 100 101 110 111 1000</span><br><span class=\"line\">    - 所有的数据在计算机底层都是以二进制的形式保存的，计算机只认二进制</span><br><span class=\"line\">    - 可以将内存想象为一个一个的小格子，小格子中可以存储一个0或一个1</span><br><span class=\"line\">    - 内存中的每一个小格子，我们称为1bit（位）    </span><br><span class=\"line\">        bit是计算机中的最小的单位</span><br><span class=\"line\">        byte是我们最小的可操作的单位</span><br><span class=\"line\">        8bit = 1byte（字节）    </span><br><span class=\"line\">        1024byte = 1kb（千字节） </span><br><span class=\"line\">        1024kb = 1mb（兆字节）</span><br><span class=\"line\">        1024mb = 1gb（吉字节）</span><br><span class=\"line\">        1024gb = 1tb（太字节）</span><br><span class=\"line\">        。。。</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">- 八进制（一般不用）</span><br><span class=\"line\">    - 满八进一</span><br><span class=\"line\">    - 八进制中一共有8个数字</span><br><span class=\"line\">        0 1 2 3 4 5 6 7</span><br><span class=\"line\">    - 八进制如何计数</span><br><span class=\"line\">        0 1 2 3 4 5 6 7 10 11 。。。 17 20 。。。27 30</span><br><span class=\"line\"></span><br><span class=\"line\">- 十六进制</span><br><span class=\"line\">    - 满十六进一</span><br><span class=\"line\">    - 十六进制中一共有16个数字</span><br><span class=\"line\">        由于十六进制是满16才进位，</span><br><span class=\"line\">            所以十六进制中引入了a b c d e f来表示 10 11 12 13 14 15   </span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9 a b c d e f </span><br><span class=\"line\">    - 十六进制如何计数    </span><br><span class=\"line\">        0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 。。。 1a 1b 1c 1d 1e 1f</span><br><span class=\"line\">        20 21 22 。。。 2a 2b 2c 2d 2e 2f 30    </span><br><span class=\"line\">    - 我们在查看二进制数据时，一般会以十六进制的形式显示</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本文件和字符集\"><a href=\"#文本文件和字符集\" class=\"headerlink\" title=\"文本文件和字符集\"></a>文本文件和字符集</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本分成两种，一种叫做纯文本，还有一种叫做富文本</span><br><span class=\"line\">- 纯文本中只能保存单一的文本内容，无法保存内容无关的东西（字体、颜色、图片。。。）</span><br><span class=\"line\">- 富文本中可以保存文本以外的内容（word文档）</span><br><span class=\"line\">- 在开发时，编写程序使用的全都是纯文本！</span><br><span class=\"line\">- 纯文本在计算机底层也会转换为二进制保存，</span><br><span class=\"line\">    将字符转换为二进制码的过程，我们称为编码</span><br><span class=\"line\">    将二进制码转换为字符的过程，我们称为解码</span><br><span class=\"line\">    编码和解码时所采用的规则，我们称为字符集</span><br><span class=\"line\">- 常见的字符集：</span><br><span class=\"line\">    ASCII</span><br><span class=\"line\">        - 美国人编码，使用7位来对美国常用的字符进行编码</span><br><span class=\"line\">        - 包含128个字符</span><br><span class=\"line\">    ISO-8859-1</span><br><span class=\"line\">        - 欧洲的编码，使用8位</span><br><span class=\"line\">        - 包含256个字符</span><br><span class=\"line\">    GB2312</span><br><span class=\"line\">    GBK</span><br><span class=\"line\">        国标码，中国的编码</span><br><span class=\"line\">    Unicode   </span><br><span class=\"line\">        万国码，包含世界上所有的语言和符号，编写程序时一般都会使用Unicode编码</span><br><span class=\"line\">        Unicode编码有多种实现，UTF-8 UTF-16 UTF-32</span><br><span class=\"line\">        最常用的就是UTF-8</span><br><span class=\"line\">- 乱码</span><br><span class=\"line\">    编写程序时，如果发现程序代码出现乱码的情况，就要马上去检查字符集是否正确        </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sublime-Text-3\"><a href=\"#Sublime-Text-3\" class=\"headerlink\" title=\"Sublime Text 3\"></a>Sublime Text 3</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 纯文本编辑器</span><br><span class=\"line\">- Package Control（Sublime的包管理器）</span><br><span class=\"line\">    - Sublime Text3中的插件，通过该插件可以向Sublime中安装新的包</span><br><span class=\"line\">- 练习：</span><br><span class=\"line\">    1.安装Sublime Text3</span><br><span class=\"line\">    2.在Sublime中安装Package Control</span><br><span class=\"line\">    3.通过Package Control安装Sublime的中文语言包   </span><br><span class=\"line\">    4.尝试为你的Sublime安装新的主题（通过搜索引擎搜索）</span><br></pre></td></tr></table></figure>\n\n"},{"title":"基本语法 & 数据类型 & 对象内存结构","slug":"python-python-basics-python-entry-基本语法-数据类型-对象内存结构","date":"2025-08-07T22:43:07.000Z","_content":"## 几个概念\n1. 表达式  \n 表达式就是一个类似于数学公式的东西  \n 比如：10 + 5   8 - 4  \n 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响  \n 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出\n2. 语句  \n 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。  \n 比如：  \n print()  \n input()  \n a = 10  \n 语句的执行一般会对程序产生一定的影响  \n 在交互模式中不一定会输出语句的执行结果  \n3. 程序（program）  \n 程序就是由一条一条的语句和一条一条的表达式构成的。\n4. 函数（function）  \n 函数就是一种语句，函数专门用来完成特定的功能  \n 函数长的形如：xxx()  \n函数的分类：  \n 内置函数  \n     - 由Python解释器提供的函数，可以在Python中直接使用  \n 自定义函数  \n- 由程序员自主的创建的函数  \n 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数   \n 函数的两个要素：  \n 参数  \n     - ()中的内容就是函数的参数  \n     - 函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开  \n 返回值  \n- 返回值是函数的返回结果，不是所有的函数都有返回值\n\n## 基本语法\n1. 在Python中严格区分大小写\n2. Python中的每一行就是一条语句，每条语句以换行结束\n3. Python中每一行语句不要过长（规范中建议每行不要超过80个字符）  \n \"rulers\":[80],\n4. 一条语句可以分多行编写，多行编写时语句后边以\\结尾  \n5. Python是缩进严格的语言，所以在Python中不要随便写缩进  \n6. 在Python中使用#来表示注释，#后的内容都属于注释，注释的内容将会被解释器所忽略  \n 我们可以通过注释来对程序进行解释说明，一定要养成良好的编写注释的习惯  \n 注释要求简单明了，一般习惯上#后边会跟着一个空格\n\n\n\n## 字面量和变量\n字面量就是一个一个的值，比如：1，2，3，4，5，6，‘HELLO’  \n    字面量所表示的意思就是它的字面的值，在程序中可以直接使用字面量\n\n变量（variable）变量可以用来保存字面量，并且变量中保存的字面量是不定的  \n    变量本身没有任何意思，它会根据不同的字面量表示不同的意思\n\n一般我们在开发时，很少直接使用字面量，都是将字面量保存到变量中，通过变量来引用字面量\n\n## 变量和标识符\n## 数据类型\n数据类型指的就是变量的值得类型，也就是可以为变量赋哪些值   \n    数值  \n        整型 int  \n            布尔值 bool  \n        浮点型 float  \n        复数  \n    字符串 str  \n    空值 None\n\n### 数值类型\npython中的数值分三种类型： 整数、浮点数（小数）、复数\n\n1. python中所有的整数都是int类型，整数无大小限制，可以是一个无限大的整数\n    - 如果数字过长，可以使用_作为分隔符，方便阅读\n2. 进制\n    1. 10进制\n        * 不能以0开头，所有整数打印结果一律为10进制形式展示\n    2. 二进制 0b开头\n    3. 八进制 0o开头\n    4. 十六进制 0x开头\n3. 可以通过运算符对数字进行运算\n    - 可以保证整数运算的精确\n4. 所有小数都是float类型\n5. 对浮点数进行运算时，可能会得到一个不精确的结果\n\n### 字符串 str\n#### 字符串基本使用\n字符串表示一段文本信息\n\n1. 所有字符串都要使用引号引起来，不使用引号的的不是字符串\n2. 可以是双引号或者单引号\n3. 不同引号之间可以嵌套\n4. 相同引号之间不能嵌套\n5. 单引号和双引号之间不能跨行使用\n6. 三重引号可以换行，并且会保留字符串的格式 ''' \"\"\"\n7. 转移字符可以使用 \\来进行转移\n\n```plain\n\\' 表示'\n\\\" 表示\"\n\\t 表示制表符\n\\n 表示换行符\n\\\\ 表示反斜杠\n\\uxxxx 表示Unicode编码\n```\n\n#### 格式化字符串\n字符串格式化：\n\n1. 字符串之间使用加法运算\n    - 两个字符串拼接为一个字符串\n    - 字符串不能和其他类型进行加法运算\n    - TypeError: must be str, not int\n2. 字符串中指定占位符\n\n```python\n# %s 在字符串中表示任意字符\n# %f 浮点数占位符\n# %d 整数占位符\nb = 'Hello %s'%'孙悟空'\nb = 'hello %s 你好 %s'%('tom','孙悟空')\nb = 'hello %3.5s'%'abcdefg' # %3.5s字符串的长度限制在3-5之间\nb = 'hello %s'%123.456\nb = 'hello %.2f'%123.456\nb = 'hello %d'%123.95\nb = '呵呵'\n\n```\n\n3. 格式化字符串\n\n```plain\nc = f'hello {a} {b}'\n```\n\n    - 创建字符串是在字串前添加一个f，来创建一个格式化字符串\n    - 在格式化字符串中直接嵌入变量\n\n#### 复制字符串\n1. 字符串的复制（将字符串和数字相乘）\n    - 如果将字符串和数字相乘，则解释器会将字符串重复指定的次数并返回\n\n```python\na = 'abc'\n# * 在语言中表示乘法\na = a * 20\n\n```\n\n### 布尔值\n布尔值 bool,主要是做逻辑判断，有两个值，bool实际上也属于int\n\n1. True\n    - 表示真，相当于 1\n2. False\n    - 表示假，相当于 0\n\n\n\n### 空值\nNone 空值，专门用来表示不存在\n\n## 类型检查\n### 类型检查\n通过类型检查，可以检查值（变量）的类型\n\n1. 使用type()函数检查值的类型\n    - 该函数将检查结果作为返回值返回\n\n```python\nprint(type(1)) # <class 'int'>\nprint(type(1.5)) # <class 'float'>\nprint(type(True)) # <class 'bool'>\nprint(type('hello'))  # <class 'str'>\nprint(type(None)) # <class 'NoneType'>\n```\n\n## 对象（object）\n+ Python是一门面向对象的语言\n+ 一切皆对象！\n+ 程序运行当中，所有的数据都是存储到内存当中然后再运行的！\n+ 对象就是内存中专门用来存储指定数据的一块区域\n+ 对象实际上就是一个容器，专门用来存储数据\n+ 像我们之前学习的数值、字符串、布尔值、None都是对象\n+ 参考 图1\n\n## 对象的结构\n+ 每个对象中都要保存三种数据\n    - id（标识）\n\n> id用来标识对象的唯一性，每一个对象都有唯一的id  \n对象的id就相当于人的身份证号一样  \n可以通过id()函数来查看对象的id  \nid是由解析器生成的，在CPython中，id就是对象的内存地址  \n对象一旦创建，则它的id永远不能再改变\n>\n\n    - type（类型）\n\n> 类型用来标识当前对象所属的类型  \n比如：int str float bool 。。。  \n类型决定了对象有哪些功能  \n通过type()函数来查看对象的类型  \nPython是一门强类型的语言，对象一旦创建类型便不能修改\n>\n\n    - value（值）\n\n> 值就是对象中存储的具体的数据  \n对于有些对象值是可以改变的  \n对象分成两大类，可变对象 不可变对象  \n      可变对象的值可以改变  \n      不可变对象的值不能改变，之前学习的对象都是不可变对象\n>\n\n    - 参考 图2\n\n练习：尝试自己画一下对象的内存结构。\n\n![](/images/post/python/python-basics/python-entry/basic/python-memory.png)\n\n## 变量和对象\n+ 对象并没有直接存储到变量中，在Python中变量更像是给对象起了一个别名\n+ 变量中存储的不是对象的值，而是对象的id（内存地址），  \n  当我们使用变量时，实际上就是在通过对象id在查找对象\n+ 变量中保存的对象，只有在为变量重新赋值时才会改变\n+ 变量和变量之间是相互独立的，修改一个变量不会影响另一个变量\n+ 参考 图3\n\n### 变量的赋值\n1. 变量无需声明，可以直接赋值 \n\n```python\n    a = 1\n```\n\n2. 不能使用没有赋值过的变量\n    - 直接使用会导致异常：NameError: name 'b' is not defined\n3. python是动态类型语言，可以赋值变量任意类型的值，也可以改变变量的值的类型\n\n```plain\na = 1\na = 'str'\n```\n\n### 标识符\npython中所有可以自主命名的内容都是标识符  \n比如：类名、函数名、变量名  \n标识符规范：\n\n1. 标识符中可以包含字母、数字、_,但是不能使用数字开头\n\n> 例如： a_1 _a1 _1a\n>\n\n2. 标识符不能和python中的关键字和保留字冲突\n    - 也不建议和python内建函数名冲突，避免函数被覆盖\n3. 命名规范\n    - 下划线命名法\n        * 所有字母小写，单词之间用_分割\n\n> max_length min_length hello_word\n>\n\n    - 帕斯科命名法（大驼峰命名法）\n        * 首字母大写，每个单词开头字母大写，其余小写\n\n> MaxLength MinLength HelloWorld\n>\n\n标识符命名不规范会报错：SyntaxError: invalid syntax\n\n## 类型转换\n+ 所谓的类型转换，将一个类型的对象转换为其他对象\n+ 类型转换不是改变对象本身的类型，而是根据当前对象的值创建一个新对象作为结果返回\n\n类型转换四个函数 int() float() str() bool()\n\n### int()\n可以用来将其他的对象转换为整型  \n规则：\n\n1. 布尔值：True -> 1   False -> 0\n2. 浮点数：直接取整，省略小数点后的内容\n3. 字符串：合法的整数字符串，直接转换为对应的数字\n    - 如果不是一个合法的整数字符串，则报错 ValueError: invalid literal for int() with base 10: '11.5'\n4. 对于其他不可转换为整型的对象，直接抛出异常 ValueError\n\n### float()\n```plain\n- float() 和 int()基本一致，不同的是它会将对象转换为浮点数\n```\n\n### bool()\n可以将对象转换为布尔值，任何对象都可以转换为布尔值  \n   规则：\n\n1. 对于所有表示空性的对象都会转换为False，\n    - 哪些表示的空性：0 、 None 、 '' 。。。\n2. 其余的转换为True\n\n\n\n","source":"_posts/python/python-basics/python-entry/基本语法&数据类型&对象内存结构.md","raw":"---\ntitle: 基本语法 & 数据类型 & 对象内存结构\nslug: 基本语法 & 数据类型 & 对象内存结构\ndate: 2025-08-08 06:43:07\ntags:\n- python\n- basics\n- grammar\n- data-structure\n- data-type\n\ncategories:\n- python\n- python-basics\n- python-entry\n\n---\n## 几个概念\n1. 表达式  \n 表达式就是一个类似于数学公式的东西  \n 比如：10 + 5   8 - 4  \n 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响  \n 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出\n2. 语句  \n 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。  \n 比如：  \n print()  \n input()  \n a = 10  \n 语句的执行一般会对程序产生一定的影响  \n 在交互模式中不一定会输出语句的执行结果  \n3. 程序（program）  \n 程序就是由一条一条的语句和一条一条的表达式构成的。\n4. 函数（function）  \n 函数就是一种语句，函数专门用来完成特定的功能  \n 函数长的形如：xxx()  \n函数的分类：  \n 内置函数  \n     - 由Python解释器提供的函数，可以在Python中直接使用  \n 自定义函数  \n- 由程序员自主的创建的函数  \n 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数   \n 函数的两个要素：  \n 参数  \n     - ()中的内容就是函数的参数  \n     - 函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开  \n 返回值  \n- 返回值是函数的返回结果，不是所有的函数都有返回值\n\n## 基本语法\n1. 在Python中严格区分大小写\n2. Python中的每一行就是一条语句，每条语句以换行结束\n3. Python中每一行语句不要过长（规范中建议每行不要超过80个字符）  \n \"rulers\":[80],\n4. 一条语句可以分多行编写，多行编写时语句后边以\\结尾  \n5. Python是缩进严格的语言，所以在Python中不要随便写缩进  \n6. 在Python中使用#来表示注释，#后的内容都属于注释，注释的内容将会被解释器所忽略  \n 我们可以通过注释来对程序进行解释说明，一定要养成良好的编写注释的习惯  \n 注释要求简单明了，一般习惯上#后边会跟着一个空格\n\n\n\n## 字面量和变量\n字面量就是一个一个的值，比如：1，2，3，4，5，6，‘HELLO’  \n    字面量所表示的意思就是它的字面的值，在程序中可以直接使用字面量\n\n变量（variable）变量可以用来保存字面量，并且变量中保存的字面量是不定的  \n    变量本身没有任何意思，它会根据不同的字面量表示不同的意思\n\n一般我们在开发时，很少直接使用字面量，都是将字面量保存到变量中，通过变量来引用字面量\n\n## 变量和标识符\n## 数据类型\n数据类型指的就是变量的值得类型，也就是可以为变量赋哪些值   \n    数值  \n        整型 int  \n            布尔值 bool  \n        浮点型 float  \n        复数  \n    字符串 str  \n    空值 None\n\n### 数值类型\npython中的数值分三种类型： 整数、浮点数（小数）、复数\n\n1. python中所有的整数都是int类型，整数无大小限制，可以是一个无限大的整数\n    - 如果数字过长，可以使用_作为分隔符，方便阅读\n2. 进制\n    1. 10进制\n        * 不能以0开头，所有整数打印结果一律为10进制形式展示\n    2. 二进制 0b开头\n    3. 八进制 0o开头\n    4. 十六进制 0x开头\n3. 可以通过运算符对数字进行运算\n    - 可以保证整数运算的精确\n4. 所有小数都是float类型\n5. 对浮点数进行运算时，可能会得到一个不精确的结果\n\n### 字符串 str\n#### 字符串基本使用\n字符串表示一段文本信息\n\n1. 所有字符串都要使用引号引起来，不使用引号的的不是字符串\n2. 可以是双引号或者单引号\n3. 不同引号之间可以嵌套\n4. 相同引号之间不能嵌套\n5. 单引号和双引号之间不能跨行使用\n6. 三重引号可以换行，并且会保留字符串的格式 ''' \"\"\"\n7. 转移字符可以使用 \\来进行转移\n\n```plain\n\\' 表示'\n\\\" 表示\"\n\\t 表示制表符\n\\n 表示换行符\n\\\\ 表示反斜杠\n\\uxxxx 表示Unicode编码\n```\n\n#### 格式化字符串\n字符串格式化：\n\n1. 字符串之间使用加法运算\n    - 两个字符串拼接为一个字符串\n    - 字符串不能和其他类型进行加法运算\n    - TypeError: must be str, not int\n2. 字符串中指定占位符\n\n```python\n# %s 在字符串中表示任意字符\n# %f 浮点数占位符\n# %d 整数占位符\nb = 'Hello %s'%'孙悟空'\nb = 'hello %s 你好 %s'%('tom','孙悟空')\nb = 'hello %3.5s'%'abcdefg' # %3.5s字符串的长度限制在3-5之间\nb = 'hello %s'%123.456\nb = 'hello %.2f'%123.456\nb = 'hello %d'%123.95\nb = '呵呵'\n\n```\n\n3. 格式化字符串\n\n```plain\nc = f'hello {a} {b}'\n```\n\n    - 创建字符串是在字串前添加一个f，来创建一个格式化字符串\n    - 在格式化字符串中直接嵌入变量\n\n#### 复制字符串\n1. 字符串的复制（将字符串和数字相乘）\n    - 如果将字符串和数字相乘，则解释器会将字符串重复指定的次数并返回\n\n```python\na = 'abc'\n# * 在语言中表示乘法\na = a * 20\n\n```\n\n### 布尔值\n布尔值 bool,主要是做逻辑判断，有两个值，bool实际上也属于int\n\n1. True\n    - 表示真，相当于 1\n2. False\n    - 表示假，相当于 0\n\n\n\n### 空值\nNone 空值，专门用来表示不存在\n\n## 类型检查\n### 类型检查\n通过类型检查，可以检查值（变量）的类型\n\n1. 使用type()函数检查值的类型\n    - 该函数将检查结果作为返回值返回\n\n```python\nprint(type(1)) # <class 'int'>\nprint(type(1.5)) # <class 'float'>\nprint(type(True)) # <class 'bool'>\nprint(type('hello'))  # <class 'str'>\nprint(type(None)) # <class 'NoneType'>\n```\n\n## 对象（object）\n+ Python是一门面向对象的语言\n+ 一切皆对象！\n+ 程序运行当中，所有的数据都是存储到内存当中然后再运行的！\n+ 对象就是内存中专门用来存储指定数据的一块区域\n+ 对象实际上就是一个容器，专门用来存储数据\n+ 像我们之前学习的数值、字符串、布尔值、None都是对象\n+ 参考 图1\n\n## 对象的结构\n+ 每个对象中都要保存三种数据\n    - id（标识）\n\n> id用来标识对象的唯一性，每一个对象都有唯一的id  \n对象的id就相当于人的身份证号一样  \n可以通过id()函数来查看对象的id  \nid是由解析器生成的，在CPython中，id就是对象的内存地址  \n对象一旦创建，则它的id永远不能再改变\n>\n\n    - type（类型）\n\n> 类型用来标识当前对象所属的类型  \n比如：int str float bool 。。。  \n类型决定了对象有哪些功能  \n通过type()函数来查看对象的类型  \nPython是一门强类型的语言，对象一旦创建类型便不能修改\n>\n\n    - value（值）\n\n> 值就是对象中存储的具体的数据  \n对于有些对象值是可以改变的  \n对象分成两大类，可变对象 不可变对象  \n      可变对象的值可以改变  \n      不可变对象的值不能改变，之前学习的对象都是不可变对象\n>\n\n    - 参考 图2\n\n练习：尝试自己画一下对象的内存结构。\n\n![](/images/post/python/python-basics/python-entry/basic/python-memory.png)\n\n## 变量和对象\n+ 对象并没有直接存储到变量中，在Python中变量更像是给对象起了一个别名\n+ 变量中存储的不是对象的值，而是对象的id（内存地址），  \n  当我们使用变量时，实际上就是在通过对象id在查找对象\n+ 变量中保存的对象，只有在为变量重新赋值时才会改变\n+ 变量和变量之间是相互独立的，修改一个变量不会影响另一个变量\n+ 参考 图3\n\n### 变量的赋值\n1. 变量无需声明，可以直接赋值 \n\n```python\n    a = 1\n```\n\n2. 不能使用没有赋值过的变量\n    - 直接使用会导致异常：NameError: name 'b' is not defined\n3. python是动态类型语言，可以赋值变量任意类型的值，也可以改变变量的值的类型\n\n```plain\na = 1\na = 'str'\n```\n\n### 标识符\npython中所有可以自主命名的内容都是标识符  \n比如：类名、函数名、变量名  \n标识符规范：\n\n1. 标识符中可以包含字母、数字、_,但是不能使用数字开头\n\n> 例如： a_1 _a1 _1a\n>\n\n2. 标识符不能和python中的关键字和保留字冲突\n    - 也不建议和python内建函数名冲突，避免函数被覆盖\n3. 命名规范\n    - 下划线命名法\n        * 所有字母小写，单词之间用_分割\n\n> max_length min_length hello_word\n>\n\n    - 帕斯科命名法（大驼峰命名法）\n        * 首字母大写，每个单词开头字母大写，其余小写\n\n> MaxLength MinLength HelloWorld\n>\n\n标识符命名不规范会报错：SyntaxError: invalid syntax\n\n## 类型转换\n+ 所谓的类型转换，将一个类型的对象转换为其他对象\n+ 类型转换不是改变对象本身的类型，而是根据当前对象的值创建一个新对象作为结果返回\n\n类型转换四个函数 int() float() str() bool()\n\n### int()\n可以用来将其他的对象转换为整型  \n规则：\n\n1. 布尔值：True -> 1   False -> 0\n2. 浮点数：直接取整，省略小数点后的内容\n3. 字符串：合法的整数字符串，直接转换为对应的数字\n    - 如果不是一个合法的整数字符串，则报错 ValueError: invalid literal for int() with base 10: '11.5'\n4. 对于其他不可转换为整型的对象，直接抛出异常 ValueError\n\n### float()\n```plain\n- float() 和 int()基本一致，不同的是它会将对象转换为浮点数\n```\n\n### bool()\n可以将对象转换为布尔值，任何对象都可以转换为布尔值  \n   规则：\n\n1. 对于所有表示空性的对象都会转换为False，\n    - 哪些表示的空性：0 、 None 、 '' 。。。\n2. 其余的转换为True\n\n\n\n","published":1,"updated":"2025-08-12T23:12:41.297Z","comments":1,"layout":"post","photos":[],"_id":"cmeal74gp000ejrcia08457cm","content":"<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><ol>\n<li>表达式<br> 表达式就是一个类似于数学公式的东西<br> 比如：10 + 5   8 - 4<br> 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响<br> 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出</li>\n<li>语句<br> 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。<br> 比如：<br> print()<br> input()<br> a &#x3D; 10<br> 语句的执行一般会对程序产生一定的影响<br> 在交互模式中不一定会输出语句的执行结果  </li>\n<li>程序（program）<br> 程序就是由一条一条的语句和一条一条的表达式构成的。</li>\n<li>函数（function）<br> 函数就是一种语句，函数专门用来完成特定的功能<br> 函数长的形如：xxx()<br>函数的分类：<br> 内置函数  <ul>\n<li>由Python解释器提供的函数，可以在Python中直接使用<br> 自定义函数</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>由程序员自主的创建的函数<br> 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数<br> 函数的两个要素：<br> 参数  <ul>\n<li>()中的内容就是函数的参数  </li>\n<li>函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开<br> 返回值</li>\n</ul>\n</li>\n<li>返回值是函数的返回结果，不是所有的函数都有返回值</li>\n</ul>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ol>\n<li>在Python中严格区分大小写</li>\n<li>Python中的每一行就是一条语句，每条语句以换行结束</li>\n<li>Python中每一行语句不要过长（规范中建议每行不要超过80个字符）<br> “rulers”:[80],</li>\n<li>一条语句可以分多行编写，多行编写时语句后边以\\结尾  </li>\n<li>Python是缩进严格的语言，所以在Python中不要随便写缩进  </li>\n<li>在Python中使用#来表示注释，#后的内容都属于注释，注释的内容将会被解释器所忽略<br> 我们可以通过注释来对程序进行解释说明，一定要养成良好的编写注释的习惯<br> 注释要求简单明了，一般习惯上#后边会跟着一个空格</li>\n</ol>\n<h2 id=\"字面量和变量\"><a href=\"#字面量和变量\" class=\"headerlink\" title=\"字面量和变量\"></a>字面量和变量</h2><p>字面量就是一个一个的值，比如：1，2，3，4，5，6，‘HELLO’<br>    字面量所表示的意思就是它的字面的值，在程序中可以直接使用字面量</p>\n<p>变量（variable）变量可以用来保存字面量，并且变量中保存的字面量是不定的<br>    变量本身没有任何意思，它会根据不同的字面量表示不同的意思</p>\n<p>一般我们在开发时，很少直接使用字面量，都是将字面量保存到变量中，通过变量来引用字面量</p>\n<h2 id=\"变量和标识符\"><a href=\"#变量和标识符\" class=\"headerlink\" title=\"变量和标识符\"></a>变量和标识符</h2><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>数据类型指的就是变量的值得类型，也就是可以为变量赋哪些值<br>    数值<br>        整型 int<br>            布尔值 bool<br>        浮点型 float<br>        复数<br>    字符串 str<br>    空值 None</p>\n<h3 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h3><p>python中的数值分三种类型： 整数、浮点数（小数）、复数</p>\n<ol>\n<li>python中所有的整数都是int类型，整数无大小限制，可以是一个无限大的整数<ul>\n<li>如果数字过长，可以使用_作为分隔符，方便阅读</li>\n</ul>\n</li>\n<li>进制<ol>\n<li>10进制<ul>\n<li>不能以0开头，所有整数打印结果一律为10进制形式展示</li>\n</ul>\n</li>\n<li>二进制 0b开头</li>\n<li>八进制 0o开头</li>\n<li>十六进制 0x开头</li>\n</ol>\n</li>\n<li>可以通过运算符对数字进行运算<ul>\n<li>可以保证整数运算的精确</li>\n</ul>\n</li>\n<li>所有小数都是float类型</li>\n<li>对浮点数进行运算时，可能会得到一个不精确的结果</li>\n</ol>\n<h3 id=\"字符串-str\"><a href=\"#字符串-str\" class=\"headerlink\" title=\"字符串 str\"></a>字符串 str</h3><h4 id=\"字符串基本使用\"><a href=\"#字符串基本使用\" class=\"headerlink\" title=\"字符串基本使用\"></a>字符串基本使用</h4><p>字符串表示一段文本信息</p>\n<ol>\n<li>所有字符串都要使用引号引起来，不使用引号的的不是字符串</li>\n<li>可以是双引号或者单引号</li>\n<li>不同引号之间可以嵌套</li>\n<li>相同引号之间不能嵌套</li>\n<li>单引号和双引号之间不能跨行使用</li>\n<li>三重引号可以换行，并且会保留字符串的格式 ‘’’ “””</li>\n<li>转移字符可以使用 \\来进行转移</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\&#x27; 表示&#x27;</span><br><span class=\"line\">\\&quot; 表示&quot;</span><br><span class=\"line\">\\t 表示制表符</span><br><span class=\"line\">\\n 表示换行符</span><br><span class=\"line\">\\\\ 表示反斜杠</span><br><span class=\"line\">\\uxxxx 表示Unicode编码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h4><p>字符串格式化：</p>\n<ol>\n<li>字符串之间使用加法运算<ul>\n<li>两个字符串拼接为一个字符串</li>\n<li>字符串不能和其他类型进行加法运算</li>\n<li>TypeError: must be str, not int</li>\n</ul>\n</li>\n<li>字符串中指定占位符</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># %s 在字符串中表示任意字符</span></span><br><span class=\"line\"><span class=\"comment\"># %f 浮点数占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %d 整数占位符</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;Hello %s&#x27;</span>%<span class=\"string\">&#x27;孙悟空&#x27;</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %s 你好 %s&#x27;</span>%(<span class=\"string\">&#x27;tom&#x27;</span>,<span class=\"string\">&#x27;孙悟空&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %3.5s&#x27;</span>%<span class=\"string\">&#x27;abcdefg&#x27;</span> <span class=\"comment\"># %3.5s字符串的长度限制在3-5之间</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %s&#x27;</span>%<span class=\"number\">123.456</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %.2f&#x27;</span>%<span class=\"number\">123.456</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %d&#x27;</span>%<span class=\"number\">123.95</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;呵呵&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>格式化字符串</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = f&#x27;hello &#123;a&#125; &#123;b&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<pre><code>- 创建字符串是在字串前添加一个f，来创建一个格式化字符串\n- 在格式化字符串中直接嵌入变量\n</code></pre>\n<h4 id=\"复制字符串\"><a href=\"#复制字符串\" class=\"headerlink\" title=\"复制字符串\"></a>复制字符串</h4><ol>\n<li>字符串的复制（将字符串和数字相乘）<ul>\n<li>如果将字符串和数字相乘，则解释器会将字符串重复指定的次数并返回</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># * 在语言中表示乘法</span></span><br><span class=\"line\">a = a * <span class=\"number\">20</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>布尔值 bool,主要是做逻辑判断，有两个值，bool实际上也属于int</p>\n<ol>\n<li>True<ul>\n<li>表示真，相当于 1</li>\n</ul>\n</li>\n<li>False<ul>\n<li>表示假，相当于 0</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h3><p>None 空值，专门用来表示不存在</p>\n<h2 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h2><h3 id=\"类型检查-1\"><a href=\"#类型检查-1\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h3><p>通过类型检查，可以检查值（变量）的类型</p>\n<ol>\n<li>使用type()函数检查值的类型<ul>\n<li>该函数将检查结果作为返回值返回</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">1</span>)) <span class=\"comment\"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">1.5</span>)) <span class=\"comment\"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">True</span>)) <span class=\"comment\"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;hello&#x27;</span>))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">None</span>)) <span class=\"comment\"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象（object）\"><a href=\"#对象（object）\" class=\"headerlink\" title=\"对象（object）\"></a>对象（object）</h2><ul>\n<li>Python是一门面向对象的语言</li>\n<li>一切皆对象！</li>\n<li>程序运行当中，所有的数据都是存储到内存当中然后再运行的！</li>\n<li>对象就是内存中专门用来存储指定数据的一块区域</li>\n<li>对象实际上就是一个容器，专门用来存储数据</li>\n<li>像我们之前学习的数值、字符串、布尔值、None都是对象</li>\n<li>参考 图1</li>\n</ul>\n<h2 id=\"对象的结构\"><a href=\"#对象的结构\" class=\"headerlink\" title=\"对象的结构\"></a>对象的结构</h2><ul>\n<li>每个对象中都要保存三种数据<ul>\n<li>id（标识）</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>id用来标识对象的唯一性，每一个对象都有唯一的id<br>对象的id就相当于人的身份证号一样<br>可以通过id()函数来查看对象的id<br>id是由解析器生成的，在CPython中，id就是对象的内存地址<br>对象一旦创建，则它的id永远不能再改变</p>\n</blockquote>\n<pre><code>- type（类型）\n</code></pre>\n<blockquote>\n<p>类型用来标识当前对象所属的类型<br>比如：int str float bool 。。。<br>类型决定了对象有哪些功能<br>通过type()函数来查看对象的类型<br>Python是一门强类型的语言，对象一旦创建类型便不能修改</p>\n</blockquote>\n<pre><code>- value（值）\n</code></pre>\n<blockquote>\n<p>值就是对象中存储的具体的数据<br>对于有些对象值是可以改变的<br>对象分成两大类，可变对象 不可变对象<br>      可变对象的值可以改变<br>      不可变对象的值不能改变，之前学习的对象都是不可变对象</p>\n</blockquote>\n<pre><code>- 参考 图2\n</code></pre>\n<p>练习：尝试自己画一下对象的内存结构。</p>\n<p><img src=\"/images/post/python/python-basics/python-entry/basic/python-memory.png\"></p>\n<h2 id=\"变量和对象\"><a href=\"#变量和对象\" class=\"headerlink\" title=\"变量和对象\"></a>变量和对象</h2><ul>\n<li>对象并没有直接存储到变量中，在Python中变量更像是给对象起了一个别名</li>\n<li>变量中存储的不是对象的值，而是对象的id（内存地址），<br>当我们使用变量时，实际上就是在通过对象id在查找对象</li>\n<li>变量中保存的对象，只有在为变量重新赋值时才会改变</li>\n<li>变量和变量之间是相互独立的，修改一个变量不会影响另一个变量</li>\n<li>参考 图3</li>\n</ul>\n<h3 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h3><ol>\n<li>变量无需声明，可以直接赋值</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>不能使用没有赋值过的变量<ul>\n<li>直接使用会导致异常：NameError: name ‘b’ is not defined</li>\n</ul>\n</li>\n<li>python是动态类型语言，可以赋值变量任意类型的值，也可以改变变量的值的类型</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">a = &#x27;str&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>python中所有可以自主命名的内容都是标识符<br>比如：类名、函数名、变量名<br>标识符规范：</p>\n<ol>\n<li>标识符中可以包含字母、数字、_,但是不能使用数字开头</li>\n</ol>\n<blockquote>\n<p>例如： a_1 _a1 _1a</p>\n</blockquote>\n<ol start=\"2\">\n<li>标识符不能和python中的关键字和保留字冲突<ul>\n<li>也不建议和python内建函数名冲突，避免函数被覆盖</li>\n</ul>\n</li>\n<li>命名规范<ul>\n<li>下划线命名法<ul>\n<li>所有字母小写，单词之间用_分割</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>max_length min_length hello_word</p>\n</blockquote>\n<pre><code>- 帕斯科命名法（大驼峰命名法）\n    * 首字母大写，每个单词开头字母大写，其余小写\n</code></pre>\n<blockquote>\n<p>MaxLength MinLength HelloWorld</p>\n</blockquote>\n<p>标识符命名不规范会报错：SyntaxError: invalid syntax</p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li>所谓的类型转换，将一个类型的对象转换为其他对象</li>\n<li>类型转换不是改变对象本身的类型，而是根据当前对象的值创建一个新对象作为结果返回</li>\n</ul>\n<p>类型转换四个函数 int() float() str() bool()</p>\n<h3 id=\"int\"><a href=\"#int\" class=\"headerlink\" title=\"int()\"></a>int()</h3><p>可以用来将其他的对象转换为整型<br>规则：</p>\n<ol>\n<li>布尔值：True -&gt; 1   False -&gt; 0</li>\n<li>浮点数：直接取整，省略小数点后的内容</li>\n<li>字符串：合法的整数字符串，直接转换为对应的数字<ul>\n<li>如果不是一个合法的整数字符串，则报错 ValueError: invalid literal for int() with base 10: ‘11.5’</li>\n</ul>\n</li>\n<li>对于其他不可转换为整型的对象，直接抛出异常 ValueError</li>\n</ol>\n<h3 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float()\"></a>float()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- float() 和 int()基本一致，不同的是它会将对象转换为浮点数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bool\"><a href=\"#bool\" class=\"headerlink\" title=\"bool()\"></a>bool()</h3><p>可以将对象转换为布尔值，任何对象都可以转换为布尔值<br>   规则：</p>\n<ol>\n<li>对于所有表示空性的对象都会转换为False，<ul>\n<li>哪些表示的空性：0 、 None 、 ‘’ 。。。</li>\n</ul>\n</li>\n<li>其余的转换为True</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><ol>\n<li>表达式<br> 表达式就是一个类似于数学公式的东西<br> 比如：10 + 5   8 - 4<br> 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响<br> 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出</li>\n<li>语句<br> 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。<br> 比如：<br> print()<br> input()<br> a &#x3D; 10<br> 语句的执行一般会对程序产生一定的影响<br> 在交互模式中不一定会输出语句的执行结果  </li>\n<li>程序（program）<br> 程序就是由一条一条的语句和一条一条的表达式构成的。</li>\n<li>函数（function）<br> 函数就是一种语句，函数专门用来完成特定的功能<br> 函数长的形如：xxx()<br>函数的分类：<br> 内置函数  <ul>\n<li>由Python解释器提供的函数，可以在Python中直接使用<br> 自定义函数</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>由程序员自主的创建的函数<br> 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数<br> 函数的两个要素：<br> 参数  <ul>\n<li>()中的内容就是函数的参数  </li>\n<li>函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开<br> 返回值</li>\n</ul>\n</li>\n<li>返回值是函数的返回结果，不是所有的函数都有返回值</li>\n</ul>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ol>\n<li>在Python中严格区分大小写</li>\n<li>Python中的每一行就是一条语句，每条语句以换行结束</li>\n<li>Python中每一行语句不要过长（规范中建议每行不要超过80个字符）<br> “rulers”:[80],</li>\n<li>一条语句可以分多行编写，多行编写时语句后边以\\结尾  </li>\n<li>Python是缩进严格的语言，所以在Python中不要随便写缩进  </li>\n<li>在Python中使用#来表示注释，#后的内容都属于注释，注释的内容将会被解释器所忽略<br> 我们可以通过注释来对程序进行解释说明，一定要养成良好的编写注释的习惯<br> 注释要求简单明了，一般习惯上#后边会跟着一个空格</li>\n</ol>\n<h2 id=\"字面量和变量\"><a href=\"#字面量和变量\" class=\"headerlink\" title=\"字面量和变量\"></a>字面量和变量</h2><p>字面量就是一个一个的值，比如：1，2，3，4，5，6，‘HELLO’<br>    字面量所表示的意思就是它的字面的值，在程序中可以直接使用字面量</p>\n<p>变量（variable）变量可以用来保存字面量，并且变量中保存的字面量是不定的<br>    变量本身没有任何意思，它会根据不同的字面量表示不同的意思</p>\n<p>一般我们在开发时，很少直接使用字面量，都是将字面量保存到变量中，通过变量来引用字面量</p>\n<h2 id=\"变量和标识符\"><a href=\"#变量和标识符\" class=\"headerlink\" title=\"变量和标识符\"></a>变量和标识符</h2><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>数据类型指的就是变量的值得类型，也就是可以为变量赋哪些值<br>    数值<br>        整型 int<br>            布尔值 bool<br>        浮点型 float<br>        复数<br>    字符串 str<br>    空值 None</p>\n<h3 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h3><p>python中的数值分三种类型： 整数、浮点数（小数）、复数</p>\n<ol>\n<li>python中所有的整数都是int类型，整数无大小限制，可以是一个无限大的整数<ul>\n<li>如果数字过长，可以使用_作为分隔符，方便阅读</li>\n</ul>\n</li>\n<li>进制<ol>\n<li>10进制<ul>\n<li>不能以0开头，所有整数打印结果一律为10进制形式展示</li>\n</ul>\n</li>\n<li>二进制 0b开头</li>\n<li>八进制 0o开头</li>\n<li>十六进制 0x开头</li>\n</ol>\n</li>\n<li>可以通过运算符对数字进行运算<ul>\n<li>可以保证整数运算的精确</li>\n</ul>\n</li>\n<li>所有小数都是float类型</li>\n<li>对浮点数进行运算时，可能会得到一个不精确的结果</li>\n</ol>\n<h3 id=\"字符串-str\"><a href=\"#字符串-str\" class=\"headerlink\" title=\"字符串 str\"></a>字符串 str</h3><h4 id=\"字符串基本使用\"><a href=\"#字符串基本使用\" class=\"headerlink\" title=\"字符串基本使用\"></a>字符串基本使用</h4><p>字符串表示一段文本信息</p>\n<ol>\n<li>所有字符串都要使用引号引起来，不使用引号的的不是字符串</li>\n<li>可以是双引号或者单引号</li>\n<li>不同引号之间可以嵌套</li>\n<li>相同引号之间不能嵌套</li>\n<li>单引号和双引号之间不能跨行使用</li>\n<li>三重引号可以换行，并且会保留字符串的格式 ‘’’ “””</li>\n<li>转移字符可以使用 \\来进行转移</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\&#x27; 表示&#x27;</span><br><span class=\"line\">\\&quot; 表示&quot;</span><br><span class=\"line\">\\t 表示制表符</span><br><span class=\"line\">\\n 表示换行符</span><br><span class=\"line\">\\\\ 表示反斜杠</span><br><span class=\"line\">\\uxxxx 表示Unicode编码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h4><p>字符串格式化：</p>\n<ol>\n<li>字符串之间使用加法运算<ul>\n<li>两个字符串拼接为一个字符串</li>\n<li>字符串不能和其他类型进行加法运算</li>\n<li>TypeError: must be str, not int</li>\n</ul>\n</li>\n<li>字符串中指定占位符</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># %s 在字符串中表示任意字符</span></span><br><span class=\"line\"><span class=\"comment\"># %f 浮点数占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %d 整数占位符</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;Hello %s&#x27;</span>%<span class=\"string\">&#x27;孙悟空&#x27;</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %s 你好 %s&#x27;</span>%(<span class=\"string\">&#x27;tom&#x27;</span>,<span class=\"string\">&#x27;孙悟空&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %3.5s&#x27;</span>%<span class=\"string\">&#x27;abcdefg&#x27;</span> <span class=\"comment\"># %3.5s字符串的长度限制在3-5之间</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %s&#x27;</span>%<span class=\"number\">123.456</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %.2f&#x27;</span>%<span class=\"number\">123.456</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;hello %d&#x27;</span>%<span class=\"number\">123.95</span></span><br><span class=\"line\">b = <span class=\"string\">&#x27;呵呵&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>格式化字符串</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = f&#x27;hello &#123;a&#125; &#123;b&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<pre><code>- 创建字符串是在字串前添加一个f，来创建一个格式化字符串\n- 在格式化字符串中直接嵌入变量\n</code></pre>\n<h4 id=\"复制字符串\"><a href=\"#复制字符串\" class=\"headerlink\" title=\"复制字符串\"></a>复制字符串</h4><ol>\n<li>字符串的复制（将字符串和数字相乘）<ul>\n<li>如果将字符串和数字相乘，则解释器会将字符串重复指定的次数并返回</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># * 在语言中表示乘法</span></span><br><span class=\"line\">a = a * <span class=\"number\">20</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>布尔值 bool,主要是做逻辑判断，有两个值，bool实际上也属于int</p>\n<ol>\n<li>True<ul>\n<li>表示真，相当于 1</li>\n</ul>\n</li>\n<li>False<ul>\n<li>表示假，相当于 0</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h3><p>None 空值，专门用来表示不存在</p>\n<h2 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h2><h3 id=\"类型检查-1\"><a href=\"#类型检查-1\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h3><p>通过类型检查，可以检查值（变量）的类型</p>\n<ol>\n<li>使用type()函数检查值的类型<ul>\n<li>该函数将检查结果作为返回值返回</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">1</span>)) <span class=\"comment\"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">1.5</span>)) <span class=\"comment\"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">True</span>)) <span class=\"comment\"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;hello&#x27;</span>))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">None</span>)) <span class=\"comment\"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象（object）\"><a href=\"#对象（object）\" class=\"headerlink\" title=\"对象（object）\"></a>对象（object）</h2><ul>\n<li>Python是一门面向对象的语言</li>\n<li>一切皆对象！</li>\n<li>程序运行当中，所有的数据都是存储到内存当中然后再运行的！</li>\n<li>对象就是内存中专门用来存储指定数据的一块区域</li>\n<li>对象实际上就是一个容器，专门用来存储数据</li>\n<li>像我们之前学习的数值、字符串、布尔值、None都是对象</li>\n<li>参考 图1</li>\n</ul>\n<h2 id=\"对象的结构\"><a href=\"#对象的结构\" class=\"headerlink\" title=\"对象的结构\"></a>对象的结构</h2><ul>\n<li>每个对象中都要保存三种数据<ul>\n<li>id（标识）</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>id用来标识对象的唯一性，每一个对象都有唯一的id<br>对象的id就相当于人的身份证号一样<br>可以通过id()函数来查看对象的id<br>id是由解析器生成的，在CPython中，id就是对象的内存地址<br>对象一旦创建，则它的id永远不能再改变</p>\n</blockquote>\n<pre><code>- type（类型）\n</code></pre>\n<blockquote>\n<p>类型用来标识当前对象所属的类型<br>比如：int str float bool 。。。<br>类型决定了对象有哪些功能<br>通过type()函数来查看对象的类型<br>Python是一门强类型的语言，对象一旦创建类型便不能修改</p>\n</blockquote>\n<pre><code>- value（值）\n</code></pre>\n<blockquote>\n<p>值就是对象中存储的具体的数据<br>对于有些对象值是可以改变的<br>对象分成两大类，可变对象 不可变对象<br>      可变对象的值可以改变<br>      不可变对象的值不能改变，之前学习的对象都是不可变对象</p>\n</blockquote>\n<pre><code>- 参考 图2\n</code></pre>\n<p>练习：尝试自己画一下对象的内存结构。</p>\n<p><img src=\"/images/post/python/python-basics/python-entry/basic/python-memory.png\"></p>\n<h2 id=\"变量和对象\"><a href=\"#变量和对象\" class=\"headerlink\" title=\"变量和对象\"></a>变量和对象</h2><ul>\n<li>对象并没有直接存储到变量中，在Python中变量更像是给对象起了一个别名</li>\n<li>变量中存储的不是对象的值，而是对象的id（内存地址），<br>当我们使用变量时，实际上就是在通过对象id在查找对象</li>\n<li>变量中保存的对象，只有在为变量重新赋值时才会改变</li>\n<li>变量和变量之间是相互独立的，修改一个变量不会影响另一个变量</li>\n<li>参考 图3</li>\n</ul>\n<h3 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h3><ol>\n<li>变量无需声明，可以直接赋值</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>不能使用没有赋值过的变量<ul>\n<li>直接使用会导致异常：NameError: name ‘b’ is not defined</li>\n</ul>\n</li>\n<li>python是动态类型语言，可以赋值变量任意类型的值，也可以改变变量的值的类型</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">a = &#x27;str&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>python中所有可以自主命名的内容都是标识符<br>比如：类名、函数名、变量名<br>标识符规范：</p>\n<ol>\n<li>标识符中可以包含字母、数字、_,但是不能使用数字开头</li>\n</ol>\n<blockquote>\n<p>例如： a_1 _a1 _1a</p>\n</blockquote>\n<ol start=\"2\">\n<li>标识符不能和python中的关键字和保留字冲突<ul>\n<li>也不建议和python内建函数名冲突，避免函数被覆盖</li>\n</ul>\n</li>\n<li>命名规范<ul>\n<li>下划线命名法<ul>\n<li>所有字母小写，单词之间用_分割</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>max_length min_length hello_word</p>\n</blockquote>\n<pre><code>- 帕斯科命名法（大驼峰命名法）\n    * 首字母大写，每个单词开头字母大写，其余小写\n</code></pre>\n<blockquote>\n<p>MaxLength MinLength HelloWorld</p>\n</blockquote>\n<p>标识符命名不规范会报错：SyntaxError: invalid syntax</p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li>所谓的类型转换，将一个类型的对象转换为其他对象</li>\n<li>类型转换不是改变对象本身的类型，而是根据当前对象的值创建一个新对象作为结果返回</li>\n</ul>\n<p>类型转换四个函数 int() float() str() bool()</p>\n<h3 id=\"int\"><a href=\"#int\" class=\"headerlink\" title=\"int()\"></a>int()</h3><p>可以用来将其他的对象转换为整型<br>规则：</p>\n<ol>\n<li>布尔值：True -&gt; 1   False -&gt; 0</li>\n<li>浮点数：直接取整，省略小数点后的内容</li>\n<li>字符串：合法的整数字符串，直接转换为对应的数字<ul>\n<li>如果不是一个合法的整数字符串，则报错 ValueError: invalid literal for int() with base 10: ‘11.5’</li>\n</ul>\n</li>\n<li>对于其他不可转换为整型的对象，直接抛出异常 ValueError</li>\n</ol>\n<h3 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float()\"></a>float()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- float() 和 int()基本一致，不同的是它会将对象转换为浮点数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bool\"><a href=\"#bool\" class=\"headerlink\" title=\"bool()\"></a>bool()</h3><p>可以将对象转换为布尔值，任何对象都可以转换为布尔值<br>   规则：</p>\n<ol>\n<li>对于所有表示空性的对象都会转换为False，<ul>\n<li>哪些表示的空性：0 、 None 、 ‘’ 。。。</li>\n</ul>\n</li>\n<li>其余的转换为True</li>\n</ol>\n"},{"title":"计算机语言&Python介绍","slug":"python-python-basics-python-entry-计算机语言-Python介绍","date":"2025-08-05T22:43:07.000Z","_content":"# 第二章 Python入门（视频11-38）\n## 什么是计算机语言\n计算机就是一台用来计算机的机器，人让计算机干什么计算机就得干什么！  \n需要通过计算机的语言来控制计算机（编程语言）！  \n计算机语言其实和人类的语言没有本质的区别，不同点就是交流的主体不同！  \n计算机语言发展经历了三个阶段：  \n机器语言\n\n+ 机器语言通过二进制编码来编写程序\n+ 执行效率好，编写起来太麻烦\n\n符号语言（汇编）\n\n+ 使用符号来代替机器码\n+ 编写程序时，不需要使用二进制，而是直接编写符号\n+ 编写完成后，需要将符号转换为机器码，然后再由计算机执行  \n  符号转换为机器码的过程称为汇编\n+ 将机器码转换为符号的过程，称为反汇编  \n+ 汇编语言一般只适用于某些硬件，兼容性比较差\n\n高级语言\n\n+ 高级语言的语法基本和现在英语语法类似，并且和硬件的关系没有那么紧密了\n+ 也就是说我们通过高级语言开发程序可以在不同的硬件系统中执行\n+ 并且高级语言学习起来也更加的容易，现在我们知道的语言基本都是高级语言\n+ C、C++、C#、Java、JavaScript、Python 。。。\n\n## 编译型语言和解释型语言\n计算机只能识别二进制编码（机器码），所以任何的语言在交由计算机执行时必须要先转换为机器码，  \n    也就是像 print('hello') 必需要转换为类似 1010101 这样的机器码   \n\n根据转换时机的不同，语言分成了两大类：  \n编译型语言\n\n+ C语言\n+ 编译型语言，会在代码执行前将代码编译为机器码，然后将机器码交由计算机执行\n+ a(源码) --编译--> b(编译后的机器码)\n+ 特点：  \n  执行速度特别快  \n  跨平台性比较差\n\n解释型语言 \n\n+ Python JS Java\n+ 解释型语言，不会在执行前对代码进行编译，而是在执行的同时一边执行一边编译\n+ a（源码）--解释器--> 解释执行  \n+ 特点：  \n  执行速度比较慢  \n  跨平台性比较好\n\n## Python的介绍\nPython是解释型语言\n\nPython（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。 \n\nLife is short you need Python （人生苦短，我用Python）    \n\nPython的用途：  \n    WEB应用  \n        Facebook 豆瓣 。。。  \n    爬虫程序  \n    科学计算  \n    自动化运维  \n    大数据（数据清洗）  \n    云计算  \n    桌面软件/游戏  \n    人工智能  \n    。。。     \n\n## Python开发环境搭建\n开发环境搭建就是安装Python的解释器  \nPython的解释器分类：  \n    CPython（官方）  \n        用c语言编写的Python解释器  \n    PyPy  \n        用Python语言编写的Python解释器  \n    IronPython  \n        用.net编写的Python解释器  \n    Jython  \n        用Java编写的Python解释器\n\n步骤：\n\n1. 下载安装包 python-3.6.5.exe\n    - 3.x\n    - 2.x\n2. 安装（傻瓜式安装） \n3. 打开命令行窗口，输入python 出现如下内容\n\n```plain\n    Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>>   \n```\n\n## Python的交互界面\n当我们通过命令行来输入Python，所进入到的界面就是Python的交互界面  \n结构：  \n    版本和版权声明：  \n    Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32  \n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n```plain\n命令提示符：\n>>>\n\n在命令提示符后可以直接输入Python的指令！输入完的指令将会被Python的解释器立即执行！\n\n安装Python的同时，会自动安装一个Python的开发工具IDLE，通过IDLE也可以进入到交互模式\n但是不同的是，在IDLE中可以通过TAB键来查看语句的提示。\nIDLE实际上就是一个交互界面，但是他可以有一些简单的提示，并且可以将代码保存\n```\n\n交互模式只能你输入一行代码，它就是执行一行，所以他并不适用于我们日常的开发！   \n    仅可以用来做一些日常的简单的测试！   \n\n我们一般会将Python代码编写到一个py文件中，然后通过python指令来执行文件中的代码\n\n练习：  \n    自己尝试创建一个py文件，并向文件中写入python打印语句（print...）   \n        然后执行该文件。  \n    如果你的系统的扩展名无法修改，请尝试自行baidu！\n\n## Python和Sublime的整合\n1. 在Sublime中执行Python代码，ctrl + b 自动在Sublime内置的控制台中执行  \n这种执行方式，在某些版本的Sublime中对中文支持不好，并且不能使用input()函数\n2. 使用SublimeREPL来运行python代码  \n安装完成，设置快捷键，希望按f5则自动执行当前的Python代码  \n { \"keys\": [\"f5\"], \"caption\": \"SublimeREPL:Python\",\"command\": \"run_existing_window_command\", \"args\":{\"id\": \"repl_python_run\",\"file\": \"config/Python/Main.sublime-menu\"}},\n\n## 几个概念\n1. 表达式  \n 表达式就是一个类似于数学公式的东西  \n 比如：10 + 5   8 - 4  \n 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响  \n 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出\n2. 语句  \n 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。  \n 比如：  \n print()  \n input()  \n a = 10  \n 语句的执行一般会对程序产生一定的影响  \n 在交互模式中不一定会输出语句的执行结果  \n3. 程序（program）  \n 程序就是由一条一条的语句和一条一条的表达式构成的。\n4. 函数（function）  \n 函数就是一种语句，函数专门用来完成特定的功能  \n 函数长的形如：xxx()  \n函数的分类：  \n 内置函数  \n     - 由Python解释器提供的函数，可以在Python中直接使用  \n 自定义函数  \n- 由程序员自主的创建的函数  \n 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数   \n 函数的两个要素：  \n 参数  \n     - ()中的内容就是函数的参数  \n     - 函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开  \n 返回值  \n- 返回值是函数的返回结果，不是所有的函数都有返回值\n\n","source":"_posts/python/python-basics/python-entry/计算机语言&Python介绍.md","raw":"---\ntitle: 计算机语言&Python介绍\nslug: 计算机语言&Python介绍\ndate: 2025-08-06 06:43:07\ntags:\n- python\n- basics\n- grammar\n- data-structure\n- data-type\n\ncategories:\n- python\n- python-basics\n- python-entry\n\n---\n# 第二章 Python入门（视频11-38）\n## 什么是计算机语言\n计算机就是一台用来计算机的机器，人让计算机干什么计算机就得干什么！  \n需要通过计算机的语言来控制计算机（编程语言）！  \n计算机语言其实和人类的语言没有本质的区别，不同点就是交流的主体不同！  \n计算机语言发展经历了三个阶段：  \n机器语言\n\n+ 机器语言通过二进制编码来编写程序\n+ 执行效率好，编写起来太麻烦\n\n符号语言（汇编）\n\n+ 使用符号来代替机器码\n+ 编写程序时，不需要使用二进制，而是直接编写符号\n+ 编写完成后，需要将符号转换为机器码，然后再由计算机执行  \n  符号转换为机器码的过程称为汇编\n+ 将机器码转换为符号的过程，称为反汇编  \n+ 汇编语言一般只适用于某些硬件，兼容性比较差\n\n高级语言\n\n+ 高级语言的语法基本和现在英语语法类似，并且和硬件的关系没有那么紧密了\n+ 也就是说我们通过高级语言开发程序可以在不同的硬件系统中执行\n+ 并且高级语言学习起来也更加的容易，现在我们知道的语言基本都是高级语言\n+ C、C++、C#、Java、JavaScript、Python 。。。\n\n## 编译型语言和解释型语言\n计算机只能识别二进制编码（机器码），所以任何的语言在交由计算机执行时必须要先转换为机器码，  \n    也就是像 print('hello') 必需要转换为类似 1010101 这样的机器码   \n\n根据转换时机的不同，语言分成了两大类：  \n编译型语言\n\n+ C语言\n+ 编译型语言，会在代码执行前将代码编译为机器码，然后将机器码交由计算机执行\n+ a(源码) --编译--> b(编译后的机器码)\n+ 特点：  \n  执行速度特别快  \n  跨平台性比较差\n\n解释型语言 \n\n+ Python JS Java\n+ 解释型语言，不会在执行前对代码进行编译，而是在执行的同时一边执行一边编译\n+ a（源码）--解释器--> 解释执行  \n+ 特点：  \n  执行速度比较慢  \n  跨平台性比较好\n\n## Python的介绍\nPython是解释型语言\n\nPython（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。 \n\nLife is short you need Python （人生苦短，我用Python）    \n\nPython的用途：  \n    WEB应用  \n        Facebook 豆瓣 。。。  \n    爬虫程序  \n    科学计算  \n    自动化运维  \n    大数据（数据清洗）  \n    云计算  \n    桌面软件/游戏  \n    人工智能  \n    。。。     \n\n## Python开发环境搭建\n开发环境搭建就是安装Python的解释器  \nPython的解释器分类：  \n    CPython（官方）  \n        用c语言编写的Python解释器  \n    PyPy  \n        用Python语言编写的Python解释器  \n    IronPython  \n        用.net编写的Python解释器  \n    Jython  \n        用Java编写的Python解释器\n\n步骤：\n\n1. 下载安装包 python-3.6.5.exe\n    - 3.x\n    - 2.x\n2. 安装（傻瓜式安装） \n3. 打开命令行窗口，输入python 出现如下内容\n\n```plain\n    Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>>   \n```\n\n## Python的交互界面\n当我们通过命令行来输入Python，所进入到的界面就是Python的交互界面  \n结构：  \n    版本和版权声明：  \n    Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32  \n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n```plain\n命令提示符：\n>>>\n\n在命令提示符后可以直接输入Python的指令！输入完的指令将会被Python的解释器立即执行！\n\n安装Python的同时，会自动安装一个Python的开发工具IDLE，通过IDLE也可以进入到交互模式\n但是不同的是，在IDLE中可以通过TAB键来查看语句的提示。\nIDLE实际上就是一个交互界面，但是他可以有一些简单的提示，并且可以将代码保存\n```\n\n交互模式只能你输入一行代码，它就是执行一行，所以他并不适用于我们日常的开发！   \n    仅可以用来做一些日常的简单的测试！   \n\n我们一般会将Python代码编写到一个py文件中，然后通过python指令来执行文件中的代码\n\n练习：  \n    自己尝试创建一个py文件，并向文件中写入python打印语句（print...）   \n        然后执行该文件。  \n    如果你的系统的扩展名无法修改，请尝试自行baidu！\n\n## Python和Sublime的整合\n1. 在Sublime中执行Python代码，ctrl + b 自动在Sublime内置的控制台中执行  \n这种执行方式，在某些版本的Sublime中对中文支持不好，并且不能使用input()函数\n2. 使用SublimeREPL来运行python代码  \n安装完成，设置快捷键，希望按f5则自动执行当前的Python代码  \n { \"keys\": [\"f5\"], \"caption\": \"SublimeREPL:Python\",\"command\": \"run_existing_window_command\", \"args\":{\"id\": \"repl_python_run\",\"file\": \"config/Python/Main.sublime-menu\"}},\n\n## 几个概念\n1. 表达式  \n 表达式就是一个类似于数学公式的东西  \n 比如：10 + 5   8 - 4  \n 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响  \n 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出\n2. 语句  \n 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。  \n 比如：  \n print()  \n input()  \n a = 10  \n 语句的执行一般会对程序产生一定的影响  \n 在交互模式中不一定会输出语句的执行结果  \n3. 程序（program）  \n 程序就是由一条一条的语句和一条一条的表达式构成的。\n4. 函数（function）  \n 函数就是一种语句，函数专门用来完成特定的功能  \n 函数长的形如：xxx()  \n函数的分类：  \n 内置函数  \n     - 由Python解释器提供的函数，可以在Python中直接使用  \n 自定义函数  \n- 由程序员自主的创建的函数  \n 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数   \n 函数的两个要素：  \n 参数  \n     - ()中的内容就是函数的参数  \n     - 函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开  \n 返回值  \n- 返回值是函数的返回结果，不是所有的函数都有返回值\n\n","published":1,"updated":"2025-08-12T23:12:41.264Z","comments":1,"layout":"post","photos":[],"_id":"cmeal74gr000hjrcia5o9bkrs","content":"<h1 id=\"第二章-Python入门（视频11-38）\"><a href=\"#第二章-Python入门（视频11-38）\" class=\"headerlink\" title=\"第二章 Python入门（视频11-38）\"></a>第二章 Python入门（视频11-38）</h1><h2 id=\"什么是计算机语言\"><a href=\"#什么是计算机语言\" class=\"headerlink\" title=\"什么是计算机语言\"></a>什么是计算机语言</h2><p>计算机就是一台用来计算机的机器，人让计算机干什么计算机就得干什么！<br>需要通过计算机的语言来控制计算机（编程语言）！<br>计算机语言其实和人类的语言没有本质的区别，不同点就是交流的主体不同！<br>计算机语言发展经历了三个阶段：<br>机器语言</p>\n<ul>\n<li>机器语言通过二进制编码来编写程序</li>\n<li>执行效率好，编写起来太麻烦</li>\n</ul>\n<p>符号语言（汇编）</p>\n<ul>\n<li>使用符号来代替机器码</li>\n<li>编写程序时，不需要使用二进制，而是直接编写符号</li>\n<li>编写完成后，需要将符号转换为机器码，然后再由计算机执行<br>符号转换为机器码的过程称为汇编</li>\n<li>将机器码转换为符号的过程，称为反汇编  </li>\n<li>汇编语言一般只适用于某些硬件，兼容性比较差</li>\n</ul>\n<p>高级语言</p>\n<ul>\n<li>高级语言的语法基本和现在英语语法类似，并且和硬件的关系没有那么紧密了</li>\n<li>也就是说我们通过高级语言开发程序可以在不同的硬件系统中执行</li>\n<li>并且高级语言学习起来也更加的容易，现在我们知道的语言基本都是高级语言</li>\n<li>C、C++、C#、Java、JavaScript、Python 。。。</li>\n</ul>\n<h2 id=\"编译型语言和解释型语言\"><a href=\"#编译型语言和解释型语言\" class=\"headerlink\" title=\"编译型语言和解释型语言\"></a>编译型语言和解释型语言</h2><p>计算机只能识别二进制编码（机器码），所以任何的语言在交由计算机执行时必须要先转换为机器码，<br>    也就是像 print(‘hello’) 必需要转换为类似 1010101 这样的机器码   </p>\n<p>根据转换时机的不同，语言分成了两大类：<br>编译型语言</p>\n<ul>\n<li>C语言</li>\n<li>编译型语言，会在代码执行前将代码编译为机器码，然后将机器码交由计算机执行</li>\n<li>a(源码) –编译–&gt; b(编译后的机器码)</li>\n<li>特点：<br>执行速度特别快<br>跨平台性比较差</li>\n</ul>\n<p>解释型语言 </p>\n<ul>\n<li>Python JS Java</li>\n<li>解释型语言，不会在执行前对代码进行编译，而是在执行的同时一边执行一边编译</li>\n<li>a（源码）–解释器–&gt; 解释执行  </li>\n<li>特点：<br>执行速度比较慢<br>跨平台性比较好</li>\n</ul>\n<h2 id=\"Python的介绍\"><a href=\"#Python的介绍\" class=\"headerlink\" title=\"Python的介绍\"></a>Python的介绍</h2><p>Python是解释型语言</p>\n<p>Python（英国发音：&#x2F;ˈpaɪθən&#x2F; 美国发音：&#x2F;ˈpaɪθɑːn&#x2F;），是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。 </p>\n<p>Life is short you need Python （人生苦短，我用Python）    </p>\n<p>Python的用途：<br>    WEB应用<br>        Facebook 豆瓣 。。。<br>    爬虫程序<br>    科学计算<br>    自动化运维<br>    大数据（数据清洗）<br>    云计算<br>    桌面软件&#x2F;游戏<br>    人工智能<br>    。。。     </p>\n<h2 id=\"Python开发环境搭建\"><a href=\"#Python开发环境搭建\" class=\"headerlink\" title=\"Python开发环境搭建\"></a>Python开发环境搭建</h2><p>开发环境搭建就是安装Python的解释器<br>Python的解释器分类：<br>    CPython（官方）<br>        用c语言编写的Python解释器<br>    PyPy<br>        用Python语言编写的Python解释器<br>    IronPython<br>        用.net编写的Python解释器<br>    Jython<br>        用Java编写的Python解释器</p>\n<p>步骤：</p>\n<ol>\n<li>下载安装包 python-3.6.5.exe<ul>\n<li>3.x</li>\n<li>2.x</li>\n</ul>\n</li>\n<li>安装（傻瓜式安装） </li>\n<li>打开命令行窗口，输入python 出现如下内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python的交互界面\"><a href=\"#Python的交互界面\" class=\"headerlink\" title=\"Python的交互界面\"></a>Python的交互界面</h2><p>当我们通过命令行来输入Python，所进入到的界面就是Python的交互界面<br>结构：<br>    版本和版权声明：<br>    Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32<br>    Type “help”, “copyright”, “credits” or “license” for more information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令提示符：</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">在命令提示符后可以直接输入Python的指令！输入完的指令将会被Python的解释器立即执行！</span><br><span class=\"line\"></span><br><span class=\"line\">安装Python的同时，会自动安装一个Python的开发工具IDLE，通过IDLE也可以进入到交互模式</span><br><span class=\"line\">但是不同的是，在IDLE中可以通过TAB键来查看语句的提示。</span><br><span class=\"line\">IDLE实际上就是一个交互界面，但是他可以有一些简单的提示，并且可以将代码保存</span><br></pre></td></tr></table></figure>\n\n<p>交互模式只能你输入一行代码，它就是执行一行，所以他并不适用于我们日常的开发！<br>    仅可以用来做一些日常的简单的测试！   </p>\n<p>我们一般会将Python代码编写到一个py文件中，然后通过python指令来执行文件中的代码</p>\n<p>练习：<br>    自己尝试创建一个py文件，并向文件中写入python打印语句（print…）<br>        然后执行该文件。<br>    如果你的系统的扩展名无法修改，请尝试自行baidu！</p>\n<h2 id=\"Python和Sublime的整合\"><a href=\"#Python和Sublime的整合\" class=\"headerlink\" title=\"Python和Sublime的整合\"></a>Python和Sublime的整合</h2><ol>\n<li>在Sublime中执行Python代码，ctrl + b 自动在Sublime内置的控制台中执行<br>这种执行方式，在某些版本的Sublime中对中文支持不好，并且不能使用input()函数</li>\n<li>使用SublimeREPL来运行python代码<br>安装完成，设置快捷键，希望按f5则自动执行当前的Python代码<br> { “keys”: [“f5”], “caption”: “SublimeREPL:Python”,”command”: “run_existing_window_command”, “args”:{“id”: “repl_python_run”,”file”: “config&#x2F;Python&#x2F;Main.sublime-menu”}},</li>\n</ol>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><ol>\n<li>表达式<br> 表达式就是一个类似于数学公式的东西<br> 比如：10 + 5   8 - 4<br> 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响<br> 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出</li>\n<li>语句<br> 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。<br> 比如：<br> print()<br> input()<br> a &#x3D; 10<br> 语句的执行一般会对程序产生一定的影响<br> 在交互模式中不一定会输出语句的执行结果  </li>\n<li>程序（program）<br> 程序就是由一条一条的语句和一条一条的表达式构成的。</li>\n<li>函数（function）<br> 函数就是一种语句，函数专门用来完成特定的功能<br> 函数长的形如：xxx()<br>函数的分类：<br> 内置函数  <ul>\n<li>由Python解释器提供的函数，可以在Python中直接使用<br> 自定义函数</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>由程序员自主的创建的函数<br> 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数<br> 函数的两个要素：<br> 参数  <ul>\n<li>()中的内容就是函数的参数  </li>\n<li>函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开<br> 返回值</li>\n</ul>\n</li>\n<li>返回值是函数的返回结果，不是所有的函数都有返回值</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"第二章-Python入门（视频11-38）\"><a href=\"#第二章-Python入门（视频11-38）\" class=\"headerlink\" title=\"第二章 Python入门（视频11-38）\"></a>第二章 Python入门（视频11-38）</h1><h2 id=\"什么是计算机语言\"><a href=\"#什么是计算机语言\" class=\"headerlink\" title=\"什么是计算机语言\"></a>什么是计算机语言</h2><p>计算机就是一台用来计算机的机器，人让计算机干什么计算机就得干什么！<br>需要通过计算机的语言来控制计算机（编程语言）！<br>计算机语言其实和人类的语言没有本质的区别，不同点就是交流的主体不同！<br>计算机语言发展经历了三个阶段：<br>机器语言</p>\n<ul>\n<li>机器语言通过二进制编码来编写程序</li>\n<li>执行效率好，编写起来太麻烦</li>\n</ul>\n<p>符号语言（汇编）</p>\n<ul>\n<li>使用符号来代替机器码</li>\n<li>编写程序时，不需要使用二进制，而是直接编写符号</li>\n<li>编写完成后，需要将符号转换为机器码，然后再由计算机执行<br>符号转换为机器码的过程称为汇编</li>\n<li>将机器码转换为符号的过程，称为反汇编  </li>\n<li>汇编语言一般只适用于某些硬件，兼容性比较差</li>\n</ul>\n<p>高级语言</p>\n<ul>\n<li>高级语言的语法基本和现在英语语法类似，并且和硬件的关系没有那么紧密了</li>\n<li>也就是说我们通过高级语言开发程序可以在不同的硬件系统中执行</li>\n<li>并且高级语言学习起来也更加的容易，现在我们知道的语言基本都是高级语言</li>\n<li>C、C++、C#、Java、JavaScript、Python 。。。</li>\n</ul>\n<h2 id=\"编译型语言和解释型语言\"><a href=\"#编译型语言和解释型语言\" class=\"headerlink\" title=\"编译型语言和解释型语言\"></a>编译型语言和解释型语言</h2><p>计算机只能识别二进制编码（机器码），所以任何的语言在交由计算机执行时必须要先转换为机器码，<br>    也就是像 print(‘hello’) 必需要转换为类似 1010101 这样的机器码   </p>\n<p>根据转换时机的不同，语言分成了两大类：<br>编译型语言</p>\n<ul>\n<li>C语言</li>\n<li>编译型语言，会在代码执行前将代码编译为机器码，然后将机器码交由计算机执行</li>\n<li>a(源码) –编译–&gt; b(编译后的机器码)</li>\n<li>特点：<br>执行速度特别快<br>跨平台性比较差</li>\n</ul>\n<p>解释型语言 </p>\n<ul>\n<li>Python JS Java</li>\n<li>解释型语言，不会在执行前对代码进行编译，而是在执行的同时一边执行一边编译</li>\n<li>a（源码）–解释器–&gt; 解释执行  </li>\n<li>特点：<br>执行速度比较慢<br>跨平台性比较好</li>\n</ul>\n<h2 id=\"Python的介绍\"><a href=\"#Python的介绍\" class=\"headerlink\" title=\"Python的介绍\"></a>Python的介绍</h2><p>Python是解释型语言</p>\n<p>Python（英国发音：&#x2F;ˈpaɪθən&#x2F; 美国发音：&#x2F;ˈpaɪθɑːn&#x2F;），是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。 </p>\n<p>Life is short you need Python （人生苦短，我用Python）    </p>\n<p>Python的用途：<br>    WEB应用<br>        Facebook 豆瓣 。。。<br>    爬虫程序<br>    科学计算<br>    自动化运维<br>    大数据（数据清洗）<br>    云计算<br>    桌面软件&#x2F;游戏<br>    人工智能<br>    。。。     </p>\n<h2 id=\"Python开发环境搭建\"><a href=\"#Python开发环境搭建\" class=\"headerlink\" title=\"Python开发环境搭建\"></a>Python开发环境搭建</h2><p>开发环境搭建就是安装Python的解释器<br>Python的解释器分类：<br>    CPython（官方）<br>        用c语言编写的Python解释器<br>    PyPy<br>        用Python语言编写的Python解释器<br>    IronPython<br>        用.net编写的Python解释器<br>    Jython<br>        用Java编写的Python解释器</p>\n<p>步骤：</p>\n<ol>\n<li>下载安装包 python-3.6.5.exe<ul>\n<li>3.x</li>\n<li>2.x</li>\n</ul>\n</li>\n<li>安装（傻瓜式安装） </li>\n<li>打开命令行窗口，输入python 出现如下内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python的交互界面\"><a href=\"#Python的交互界面\" class=\"headerlink\" title=\"Python的交互界面\"></a>Python的交互界面</h2><p>当我们通过命令行来输入Python，所进入到的界面就是Python的交互界面<br>结构：<br>    版本和版权声明：<br>    Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32<br>    Type “help”, “copyright”, “credits” or “license” for more information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令提示符：</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">在命令提示符后可以直接输入Python的指令！输入完的指令将会被Python的解释器立即执行！</span><br><span class=\"line\"></span><br><span class=\"line\">安装Python的同时，会自动安装一个Python的开发工具IDLE，通过IDLE也可以进入到交互模式</span><br><span class=\"line\">但是不同的是，在IDLE中可以通过TAB键来查看语句的提示。</span><br><span class=\"line\">IDLE实际上就是一个交互界面，但是他可以有一些简单的提示，并且可以将代码保存</span><br></pre></td></tr></table></figure>\n\n<p>交互模式只能你输入一行代码，它就是执行一行，所以他并不适用于我们日常的开发！<br>    仅可以用来做一些日常的简单的测试！   </p>\n<p>我们一般会将Python代码编写到一个py文件中，然后通过python指令来执行文件中的代码</p>\n<p>练习：<br>    自己尝试创建一个py文件，并向文件中写入python打印语句（print…）<br>        然后执行该文件。<br>    如果你的系统的扩展名无法修改，请尝试自行baidu！</p>\n<h2 id=\"Python和Sublime的整合\"><a href=\"#Python和Sublime的整合\" class=\"headerlink\" title=\"Python和Sublime的整合\"></a>Python和Sublime的整合</h2><ol>\n<li>在Sublime中执行Python代码，ctrl + b 自动在Sublime内置的控制台中执行<br>这种执行方式，在某些版本的Sublime中对中文支持不好，并且不能使用input()函数</li>\n<li>使用SublimeREPL来运行python代码<br>安装完成，设置快捷键，希望按f5则自动执行当前的Python代码<br> { “keys”: [“f5”], “caption”: “SublimeREPL:Python”,”command”: “run_existing_window_command”, “args”:{“id”: “repl_python_run”,”file”: “config&#x2F;Python&#x2F;Main.sublime-menu”}},</li>\n</ol>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><ol>\n<li>表达式<br> 表达式就是一个类似于数学公式的东西<br> 比如：10 + 5   8 - 4<br> 表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响<br> 如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出</li>\n<li>语句<br> 在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。<br> 比如：<br> print()<br> input()<br> a &#x3D; 10<br> 语句的执行一般会对程序产生一定的影响<br> 在交互模式中不一定会输出语句的执行结果  </li>\n<li>程序（program）<br> 程序就是由一条一条的语句和一条一条的表达式构成的。</li>\n<li>函数（function）<br> 函数就是一种语句，函数专门用来完成特定的功能<br> 函数长的形如：xxx()<br>函数的分类：<br> 内置函数  <ul>\n<li>由Python解释器提供的函数，可以在Python中直接使用<br> 自定义函数</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>由程序员自主的创建的函数<br> 当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数<br> 函数的两个要素：<br> 参数  <ul>\n<li>()中的内容就是函数的参数  </li>\n<li>函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开<br> 返回值</li>\n</ul>\n</li>\n<li>返回值是函数的返回结果，不是所有的函数都有返回值</li>\n</ul>\n"},{"title":"运算符(操作符)","slug":"python-python-basics-python-entry-运算符-操作符","date":"2025-08-12T22:43:07.000Z","_content":"\n## 运算符(操作符)\n+ 运算符可以对一个值或多个值进行运算或各种操作\n+ 比如 + 、-、= 都属于运算符\n+ 运算符的分类：  \n  1.算术运算符  \n  2.赋值运算符  \n  3.比较运算符（关系运算符）  \n  4.逻辑运算符  \n  5.条件运算符（三元运算符）\n\n### 算数运算符\n1. `+` 加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）  \n2 `-` 减法运算符  \n3 `*` 乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）\n2. `/` 除法运算符，运算时结果总会返回一个浮点类型\n    - 分子是0 则会报错 ZeroDivisionError: division by zero\n3. `//` 整除，只会保留计算后的整数位，总会返回一个整型\n4. `**` 幂运算，求一个值的几次幂\n    - 0.5 的幂次 相当于开方\n5. `%` 取模，求两个数相除的余数\n\n注意：对浮点数做运算时，结果也会返回一个浮点数\n\n```python\na = 10 + 5 # 计算\na = 'hello' + ' ' + 'world' # 拼串\n\na = 10 - 5 # 计算\na = 5 - True \na = a - 2 # 用变量a的值减去2，然后再赋值给a\n# a = 'hello' - 'h' TypeError\n\na = 5 * 5\n\na = 10 / 5\na = 5 / 2\n# a = 5 / 0 ZeroDivisionError: division by zero\na = 10 / 3\na = 10 // 3\na = 5 // 2 \n\na = 2 ** 2\na = 10 ** 5\na = 16 ** 0.5 # 求16的平方根\n\na = 10 % 5 # 0\na = 10 % 4 # 2\n```\n\n### 赋值运算符\n1. `=` 可以将等号右侧的值赋值给等号左侧的变量\n2. `xx=` 将变量使用xx运算后在赋值给变量\n\n```python\n# = 可以将等号右侧的值赋值给等号左侧的变量\n# +=  a += 5 相当于 a = a + 5 \n# -=  a -= 5 相当于 a = a - 5 \n# *=  a *= 5 相当于 a = a * 5 \n# **= a **= 5 相当于 a = a ** 5 \n# /=  a /= 5 相当于 a = a / 5 \n# //= a //= 5 相当于 a = a // 5 \n# %=  a %= 5 相当于 a = a % 5 \n\n```\n\n### 关系运算符\n关系运算符用来比较两个值之间的关系，总会返回一个布尔值  \n    - 如果关系成立，返回True，  \n    - 否则返回False\n\n1. `>` 比较左侧值是否大于右侧值\n2. `>=` 比较左侧的值是否大于或等于右侧的值\n3. `<` 比较左侧值是否小于右侧值\n4. `<=` 比较左侧的值是否小于或等于右侧的值\n5. `==` 比较两个对象的值是否相等\n6. `!=` 比较两个对象的值是否不相等\n    - 相等和不等比较的是对象的值，而不是id\n7. `is` 比较两个对象是否是同一个对象，比较的是对象的id  \n `is not ` \n8. 比较两个对象是否不是同一个对象，比较的是对象的id\n\n不同类型之间不能进行比较\n\n```python\nresult = 2 > '1' \n# TypeError: '>' not supported between instances of 'int' and 'str'\n\n```\n\n#### 字符串比比较\n 在Python中可以对两个字符串进行大于（等于）或小于（等于）的运算\n\n```python\n#   当对字符串进行比较时，实际上比较的是字符串的Unicode编码\n#   比较两个字符串的Unicode编码时，是逐位比较的\n#   利用该特性可以对字符串按照字母顺序进行排序，但是对于中文来说意义不是特别大\n#   注意：如果不希望比较两个字符串的Unicode编码，则需要将其转换为数字然后再比较\n#   0061 > 0062\nresult = 'a' > 'b' # False\nresult = 'c' < 'd' # True\nresult = 'ab' > 'b' # False\n```\n\n### 逻辑运算符\n逻辑运算符主要用来做一些逻辑判断\n\n1. not 逻辑非\n    - not可以对符号右侧的值进行非运算\n        * 对于布尔值，非运算会对其进行取反操作，True变False，False变True\n        * 对于非布尔值，非运算会先将其转换为布尔值，然后再取反\n2. and 逻辑与\n    - and可以对符号两侧的值进行与运算\n        * 只有在符号两侧的值都为True时，才会返回True，只要有一个False就返回False\n        * 与运算是找False的\n        * Python中的与运算是短路的与，如果第一个值为False，则不再看第二个值\n3. or 逻辑或\n    - or 可以对符号两侧的值进行或运算\n        * 或运算两个值中只要有一个True，就会返回True\n        * 或运算是找True的\n        * Python中的或运算是短路的或，如果第一个值为True，则不再看第二个值\n\n```python\n\na = True\na = not a # 对a进行非运算\n\na = 1\na = ''\na = not a\n# print('a =',a)\n\nresult = True and True # True\nresult = True and False # False\nresult = False and True # False\nresult = False and False # False\n\n# print(result) \n\n# True and print('你猜我出来吗？') 第一个值是True，会看第二个值，所以print()会执行\n# False and print('你猜我出来吗？')第一个值是False，不会看第二个值，所以print()不会执行\n\n\nresult = True or True # True\nresult = True or False # True\nresult = False or True # True\nresult = False or False # False\n\n# print(result) \n# False or print('你猜我出来吗？') 第一个值为False，继续看第二个，所以打印语句执行\n# True or print('你猜我出来吗？') 第一个值为True，不看第二个，所以打印语句不执行\n\n```\n\n#### 非bool值的与或运算\n当我们对非布尔值进行与或运算时，Python会将其当做布尔值运算，最终会返回原值\n\n1. and 逻辑与运算\n    - 短路找false，返回bool值为false的原值或最后一个值\n2. or 逻辑或运算\n    - 短路找true，返回bool值为true的原值或最后一个值\n\n```python\n# True and True\nresult = 1 and 2 # 2\n# True and False\nresult = 1 and 0 # 0\n# False and True\nresult = 0 and 1 # 0\n# False and False\nresult = 0 and None # 0\n\n# True or True\nresult = 1 or 2 # 1\n# True or False\nresult = 1 or 0 # 1\n# False or True\nresult = 0 or 1 # 1\n# False or False\nresult = 0 or None # None\n```\n\n### 条件运算符（三元运算符）\n1. 语法 ： 语句1 if 条件表达式 else 语句2\n2. 执行流程\n    1. 选对条件表达式进行求值判断\n        * 结果为True,则执行语句1，并返回执行结果\n        * 结果为False，则执行语句2.并返回执行结果\n\n```python\n# 获取a和b之间的较大值\nmax = a if a > b else b\n\nprint(max)\n```\n\n### 条件运算符优先级\n和数学中一样，在Python运算也有优先级，比如先乘除 后加减  \n运算符的优先级可以根据优先级的表格来查询\n\n1. 在表格中位置越靠下的运算符优先级越高，优先级越高的越优先计算\n2. 如果优先级一样则自左向右计算\n3. 在开发中如果遇到优先级不清楚的,则可以通过小括号来改变运算顺序，千万不要背优先级\n\n```python\nmax = a if (b < a > c) else (b if b > c else c)\n```\n\n逻辑运算符可以连着使用\n\n```python\nresult = 1 < 2 < 3 # 相当于 1 < 2 and 2 < 3\nresult = 10 < 20 > 15\n```\n\n","source":"_posts/python/python-basics/python-entry/运算符(操作符).md","raw":"---\ntitle: 运算符(操作符)\nslug: 运算符(操作符)\ndate: 2025-08-13 06:43:07\ntags:\n- python\n- basics\n- operator\n\ncategories:\n- python\n- python-basics\n- python-entry\n\n---\n\n## 运算符(操作符)\n+ 运算符可以对一个值或多个值进行运算或各种操作\n+ 比如 + 、-、= 都属于运算符\n+ 运算符的分类：  \n  1.算术运算符  \n  2.赋值运算符  \n  3.比较运算符（关系运算符）  \n  4.逻辑运算符  \n  5.条件运算符（三元运算符）\n\n### 算数运算符\n1. `+` 加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）  \n2 `-` 减法运算符  \n3 `*` 乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）\n2. `/` 除法运算符，运算时结果总会返回一个浮点类型\n    - 分子是0 则会报错 ZeroDivisionError: division by zero\n3. `//` 整除，只会保留计算后的整数位，总会返回一个整型\n4. `**` 幂运算，求一个值的几次幂\n    - 0.5 的幂次 相当于开方\n5. `%` 取模，求两个数相除的余数\n\n注意：对浮点数做运算时，结果也会返回一个浮点数\n\n```python\na = 10 + 5 # 计算\na = 'hello' + ' ' + 'world' # 拼串\n\na = 10 - 5 # 计算\na = 5 - True \na = a - 2 # 用变量a的值减去2，然后再赋值给a\n# a = 'hello' - 'h' TypeError\n\na = 5 * 5\n\na = 10 / 5\na = 5 / 2\n# a = 5 / 0 ZeroDivisionError: division by zero\na = 10 / 3\na = 10 // 3\na = 5 // 2 \n\na = 2 ** 2\na = 10 ** 5\na = 16 ** 0.5 # 求16的平方根\n\na = 10 % 5 # 0\na = 10 % 4 # 2\n```\n\n### 赋值运算符\n1. `=` 可以将等号右侧的值赋值给等号左侧的变量\n2. `xx=` 将变量使用xx运算后在赋值给变量\n\n```python\n# = 可以将等号右侧的值赋值给等号左侧的变量\n# +=  a += 5 相当于 a = a + 5 \n# -=  a -= 5 相当于 a = a - 5 \n# *=  a *= 5 相当于 a = a * 5 \n# **= a **= 5 相当于 a = a ** 5 \n# /=  a /= 5 相当于 a = a / 5 \n# //= a //= 5 相当于 a = a // 5 \n# %=  a %= 5 相当于 a = a % 5 \n\n```\n\n### 关系运算符\n关系运算符用来比较两个值之间的关系，总会返回一个布尔值  \n    - 如果关系成立，返回True，  \n    - 否则返回False\n\n1. `>` 比较左侧值是否大于右侧值\n2. `>=` 比较左侧的值是否大于或等于右侧的值\n3. `<` 比较左侧值是否小于右侧值\n4. `<=` 比较左侧的值是否小于或等于右侧的值\n5. `==` 比较两个对象的值是否相等\n6. `!=` 比较两个对象的值是否不相等\n    - 相等和不等比较的是对象的值，而不是id\n7. `is` 比较两个对象是否是同一个对象，比较的是对象的id  \n `is not ` \n8. 比较两个对象是否不是同一个对象，比较的是对象的id\n\n不同类型之间不能进行比较\n\n```python\nresult = 2 > '1' \n# TypeError: '>' not supported between instances of 'int' and 'str'\n\n```\n\n#### 字符串比比较\n 在Python中可以对两个字符串进行大于（等于）或小于（等于）的运算\n\n```python\n#   当对字符串进行比较时，实际上比较的是字符串的Unicode编码\n#   比较两个字符串的Unicode编码时，是逐位比较的\n#   利用该特性可以对字符串按照字母顺序进行排序，但是对于中文来说意义不是特别大\n#   注意：如果不希望比较两个字符串的Unicode编码，则需要将其转换为数字然后再比较\n#   0061 > 0062\nresult = 'a' > 'b' # False\nresult = 'c' < 'd' # True\nresult = 'ab' > 'b' # False\n```\n\n### 逻辑运算符\n逻辑运算符主要用来做一些逻辑判断\n\n1. not 逻辑非\n    - not可以对符号右侧的值进行非运算\n        * 对于布尔值，非运算会对其进行取反操作，True变False，False变True\n        * 对于非布尔值，非运算会先将其转换为布尔值，然后再取反\n2. and 逻辑与\n    - and可以对符号两侧的值进行与运算\n        * 只有在符号两侧的值都为True时，才会返回True，只要有一个False就返回False\n        * 与运算是找False的\n        * Python中的与运算是短路的与，如果第一个值为False，则不再看第二个值\n3. or 逻辑或\n    - or 可以对符号两侧的值进行或运算\n        * 或运算两个值中只要有一个True，就会返回True\n        * 或运算是找True的\n        * Python中的或运算是短路的或，如果第一个值为True，则不再看第二个值\n\n```python\n\na = True\na = not a # 对a进行非运算\n\na = 1\na = ''\na = not a\n# print('a =',a)\n\nresult = True and True # True\nresult = True and False # False\nresult = False and True # False\nresult = False and False # False\n\n# print(result) \n\n# True and print('你猜我出来吗？') 第一个值是True，会看第二个值，所以print()会执行\n# False and print('你猜我出来吗？')第一个值是False，不会看第二个值，所以print()不会执行\n\n\nresult = True or True # True\nresult = True or False # True\nresult = False or True # True\nresult = False or False # False\n\n# print(result) \n# False or print('你猜我出来吗？') 第一个值为False，继续看第二个，所以打印语句执行\n# True or print('你猜我出来吗？') 第一个值为True，不看第二个，所以打印语句不执行\n\n```\n\n#### 非bool值的与或运算\n当我们对非布尔值进行与或运算时，Python会将其当做布尔值运算，最终会返回原值\n\n1. and 逻辑与运算\n    - 短路找false，返回bool值为false的原值或最后一个值\n2. or 逻辑或运算\n    - 短路找true，返回bool值为true的原值或最后一个值\n\n```python\n# True and True\nresult = 1 and 2 # 2\n# True and False\nresult = 1 and 0 # 0\n# False and True\nresult = 0 and 1 # 0\n# False and False\nresult = 0 and None # 0\n\n# True or True\nresult = 1 or 2 # 1\n# True or False\nresult = 1 or 0 # 1\n# False or True\nresult = 0 or 1 # 1\n# False or False\nresult = 0 or None # None\n```\n\n### 条件运算符（三元运算符）\n1. 语法 ： 语句1 if 条件表达式 else 语句2\n2. 执行流程\n    1. 选对条件表达式进行求值判断\n        * 结果为True,则执行语句1，并返回执行结果\n        * 结果为False，则执行语句2.并返回执行结果\n\n```python\n# 获取a和b之间的较大值\nmax = a if a > b else b\n\nprint(max)\n```\n\n### 条件运算符优先级\n和数学中一样，在Python运算也有优先级，比如先乘除 后加减  \n运算符的优先级可以根据优先级的表格来查询\n\n1. 在表格中位置越靠下的运算符优先级越高，优先级越高的越优先计算\n2. 如果优先级一样则自左向右计算\n3. 在开发中如果遇到优先级不清楚的,则可以通过小括号来改变运算顺序，千万不要背优先级\n\n```python\nmax = a if (b < a > c) else (b if b > c else c)\n```\n\n逻辑运算符可以连着使用\n\n```python\nresult = 1 < 2 < 3 # 相当于 1 < 2 and 2 < 3\nresult = 10 < 20 > 15\n```\n\n","published":1,"updated":"2025-08-12T23:12:41.264Z","comments":1,"layout":"post","photos":[],"_id":"cmeal74gs000ijrci3frx2003","content":"<h2 id=\"运算符-操作符\"><a href=\"#运算符-操作符\" class=\"headerlink\" title=\"运算符(操作符)\"></a>运算符(操作符)</h2><ul>\n<li>运算符可以对一个值或多个值进行运算或各种操作</li>\n<li>比如 + 、-、&#x3D; 都属于运算符</li>\n<li>运算符的分类：<br>1.算术运算符<br>2.赋值运算符<br>3.比较运算符（关系运算符）<br>4.逻辑运算符<br>5.条件运算符（三元运算符）</li>\n</ul>\n<h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><ol>\n<li><code>+</code> 加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）<br>2 <code>-</code> 减法运算符<br>3 <code>*</code> 乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）</li>\n<li><code>/</code> 除法运算符，运算时结果总会返回一个浮点类型<ul>\n<li>分子是0 则会报错 ZeroDivisionError: division by zero</li>\n</ul>\n</li>\n<li><code>//</code> 整除，只会保留计算后的整数位，总会返回一个整型</li>\n<li><code>**</code> 幂运算，求一个值的几次幂<ul>\n<li>0.5 的幂次 相当于开方</li>\n</ul>\n</li>\n<li><code>%</code> 取模，求两个数相除的余数</li>\n</ol>\n<p>注意：对浮点数做运算时，结果也会返回一个浮点数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">10</span> + <span class=\"number\">5</span> <span class=\"comment\"># 计算</span></span><br><span class=\"line\">a = <span class=\"string\">&#x27;hello&#x27;</span> + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"string\">&#x27;world&#x27;</span> <span class=\"comment\"># 拼串</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span> - <span class=\"number\">5</span> <span class=\"comment\"># 计算</span></span><br><span class=\"line\">a = <span class=\"number\">5</span> - <span class=\"literal\">True</span> </span><br><span class=\"line\">a = a - <span class=\"number\">2</span> <span class=\"comment\"># 用变量a的值减去2，然后再赋值给a</span></span><br><span class=\"line\"><span class=\"comment\"># a = &#x27;hello&#x27; - &#x27;h&#x27; TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">5</span> * <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span> / <span class=\"number\">5</span></span><br><span class=\"line\">a = <span class=\"number\">5</span> / <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># a = 5 / 0 ZeroDivisionError: division by zero</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> / <span class=\"number\">3</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\">a = <span class=\"number\">5</span> // <span class=\"number\">2</span> </span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">2</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> ** <span class=\"number\">5</span></span><br><span class=\"line\">a = <span class=\"number\">16</span> ** <span class=\"number\">0.5</span> <span class=\"comment\"># 求16的平方根</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span> % <span class=\"number\">5</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> % <span class=\"number\">4</span> <span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><ol>\n<li><code>=</code> 可以将等号右侧的值赋值给等号左侧的变量</li>\n<li><code>xx=</code> 将变量使用xx运算后在赋值给变量</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># = 可以将等号右侧的值赋值给等号左侧的变量</span></span><br><span class=\"line\"><span class=\"comment\"># +=  a += 5 相当于 a = a + 5 </span></span><br><span class=\"line\"><span class=\"comment\"># -=  a -= 5 相当于 a = a - 5 </span></span><br><span class=\"line\"><span class=\"comment\"># *=  a *= 5 相当于 a = a * 5 </span></span><br><span class=\"line\"><span class=\"comment\"># **= a **= 5 相当于 a = a ** 5 </span></span><br><span class=\"line\"><span class=\"comment\"># /=  a /= 5 相当于 a = a / 5 </span></span><br><span class=\"line\"><span class=\"comment\"># //= a //= 5 相当于 a = a // 5 </span></span><br><span class=\"line\"><span class=\"comment\"># %=  a %= 5 相当于 a = a % 5 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>关系运算符用来比较两个值之间的关系，总会返回一个布尔值<br>    - 如果关系成立，返回True，<br>    - 否则返回False</p>\n<ol>\n<li><code>&gt;</code> 比较左侧值是否大于右侧值</li>\n<li><code>&gt;=</code> 比较左侧的值是否大于或等于右侧的值</li>\n<li><code>&lt;</code> 比较左侧值是否小于右侧值</li>\n<li><code>&lt;=</code> 比较左侧的值是否小于或等于右侧的值</li>\n<li><code>==</code> 比较两个对象的值是否相等</li>\n<li><code>!=</code> 比较两个对象的值是否不相等<ul>\n<li>相等和不等比较的是对象的值，而不是id</li>\n</ul>\n</li>\n<li><code>is</code> 比较两个对象是否是同一个对象，比较的是对象的id<br> <code>is not </code> </li>\n<li>比较两个对象是否不是同一个对象，比较的是对象的id</li>\n</ol>\n<p>不同类型之间不能进行比较</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = <span class=\"number\">2</span> &gt; <span class=\"string\">&#x27;1&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串比比较\"><a href=\"#字符串比比较\" class=\"headerlink\" title=\"字符串比比较\"></a>字符串比比较</h4><p> 在Python中可以对两个字符串进行大于（等于）或小于（等于）的运算</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#   当对字符串进行比较时，实际上比较的是字符串的Unicode编码</span></span><br><span class=\"line\"><span class=\"comment\">#   比较两个字符串的Unicode编码时，是逐位比较的</span></span><br><span class=\"line\"><span class=\"comment\">#   利用该特性可以对字符串按照字母顺序进行排序，但是对于中文来说意义不是特别大</span></span><br><span class=\"line\"><span class=\"comment\">#   注意：如果不希望比较两个字符串的Unicode编码，则需要将其转换为数字然后再比较</span></span><br><span class=\"line\"><span class=\"comment\">#   0061 &gt; 0062</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;a&#x27;</span> &gt; <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\"># False</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;c&#x27;</span> &lt; <span class=\"string\">&#x27;d&#x27;</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;ab&#x27;</span> &gt; <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>逻辑运算符主要用来做一些逻辑判断</p>\n<ol>\n<li>not 逻辑非<ul>\n<li>not可以对符号右侧的值进行非运算<ul>\n<li>对于布尔值，非运算会对其进行取反操作，True变False，False变True</li>\n<li>对于非布尔值，非运算会先将其转换为布尔值，然后再取反</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>and 逻辑与<ul>\n<li>and可以对符号两侧的值进行与运算<ul>\n<li>只有在符号两侧的值都为True时，才会返回True，只要有一个False就返回False</li>\n<li>与运算是找False的</li>\n<li>Python中的与运算是短路的与，如果第一个值为False，则不再看第二个值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>or 逻辑或<ul>\n<li>or 可以对符号两侧的值进行或运算<ul>\n<li>或运算两个值中只要有一个True，就会返回True</li>\n<li>或运算是找True的</li>\n<li>Python中的或运算是短路的或，如果第一个值为True，则不再看第二个值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"literal\">True</span></span><br><span class=\"line\">a = <span class=\"keyword\">not</span> a <span class=\"comment\"># 对a进行非运算</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">a = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">a = <span class=\"keyword\">not</span> a</span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;a =&#x27;,a)</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span> <span class=\"comment\"># False</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span> <span class=\"comment\"># False</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span> <span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(result) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True and print(&#x27;你猜我出来吗？&#x27;) 第一个值是True，会看第二个值，所以print()会执行</span></span><br><span class=\"line\"><span class=\"comment\"># False and print(&#x27;你猜我出来吗？&#x27;)第一个值是False，不会看第二个值，所以print()不会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span> <span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(result) </span></span><br><span class=\"line\"><span class=\"comment\"># False or print(&#x27;你猜我出来吗？&#x27;) 第一个值为False，继续看第二个，所以打印语句执行</span></span><br><span class=\"line\"><span class=\"comment\"># True or print(&#x27;你猜我出来吗？&#x27;) 第一个值为True，不看第二个，所以打印语句不执行</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非bool值的与或运算\"><a href=\"#非bool值的与或运算\" class=\"headerlink\" title=\"非bool值的与或运算\"></a>非bool值的与或运算</h4><p>当我们对非布尔值进行与或运算时，Python会将其当做布尔值运算，最终会返回原值</p>\n<ol>\n<li>and 逻辑与运算<ul>\n<li>短路找false，返回bool值为false的原值或最后一个值</li>\n</ul>\n</li>\n<li>or 逻辑或运算<ul>\n<li>短路找true，返回bool值为true的原值或最后一个值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># True and True</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">2</span> <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"comment\"># True and False</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"comment\"># False and True</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"comment\"># False and False</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"literal\">None</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True or True</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">or</span> <span class=\"number\">2</span> <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># True or False</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">or</span> <span class=\"number\">0</span> <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># False or True</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span> <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># False or False</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"literal\">None</span> <span class=\"comment\"># None</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件运算符（三元运算符）\"><a href=\"#条件运算符（三元运算符）\" class=\"headerlink\" title=\"条件运算符（三元运算符）\"></a>条件运算符（三元运算符）</h3><ol>\n<li>语法 ： 语句1 if 条件表达式 else 语句2</li>\n<li>执行流程<ol>\n<li>选对条件表达式进行求值判断<ul>\n<li>结果为True,则执行语句1，并返回执行结果</li>\n<li>结果为False，则执行语句2.并返回执行结果</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取a和b之间的较大值</span></span><br><span class=\"line\"><span class=\"built_in\">max</span> = a <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件运算符优先级\"><a href=\"#条件运算符优先级\" class=\"headerlink\" title=\"条件运算符优先级\"></a>条件运算符优先级</h3><p>和数学中一样，在Python运算也有优先级，比如先乘除 后加减<br>运算符的优先级可以根据优先级的表格来查询</p>\n<ol>\n<li>在表格中位置越靠下的运算符优先级越高，优先级越高的越优先计算</li>\n<li>如果优先级一样则自左向右计算</li>\n<li>在开发中如果遇到优先级不清楚的,则可以通过小括号来改变运算顺序，千万不要背优先级</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span> = a <span class=\"keyword\">if</span> (b &lt; a &gt; c) <span class=\"keyword\">else</span> (b <span class=\"keyword\">if</span> b &gt; c <span class=\"keyword\">else</span> c)</span><br></pre></td></tr></table></figure>\n\n<p>逻辑运算符可以连着使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">3</span> <span class=\"comment\"># 相当于 1 &lt; 2 and 2 &lt; 3</span></span><br><span class=\"line\">result = <span class=\"number\">10</span> &lt; <span class=\"number\">20</span> &gt; <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"运算符-操作符\"><a href=\"#运算符-操作符\" class=\"headerlink\" title=\"运算符(操作符)\"></a>运算符(操作符)</h2><ul>\n<li>运算符可以对一个值或多个值进行运算或各种操作</li>\n<li>比如 + 、-、&#x3D; 都属于运算符</li>\n<li>运算符的分类：<br>1.算术运算符<br>2.赋值运算符<br>3.比较运算符（关系运算符）<br>4.逻辑运算符<br>5.条件运算符（三元运算符）</li>\n</ul>\n<h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><ol>\n<li><code>+</code> 加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）<br>2 <code>-</code> 减法运算符<br>3 <code>*</code> 乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）</li>\n<li><code>/</code> 除法运算符，运算时结果总会返回一个浮点类型<ul>\n<li>分子是0 则会报错 ZeroDivisionError: division by zero</li>\n</ul>\n</li>\n<li><code>//</code> 整除，只会保留计算后的整数位，总会返回一个整型</li>\n<li><code>**</code> 幂运算，求一个值的几次幂<ul>\n<li>0.5 的幂次 相当于开方</li>\n</ul>\n</li>\n<li><code>%</code> 取模，求两个数相除的余数</li>\n</ol>\n<p>注意：对浮点数做运算时，结果也会返回一个浮点数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">10</span> + <span class=\"number\">5</span> <span class=\"comment\"># 计算</span></span><br><span class=\"line\">a = <span class=\"string\">&#x27;hello&#x27;</span> + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"string\">&#x27;world&#x27;</span> <span class=\"comment\"># 拼串</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span> - <span class=\"number\">5</span> <span class=\"comment\"># 计算</span></span><br><span class=\"line\">a = <span class=\"number\">5</span> - <span class=\"literal\">True</span> </span><br><span class=\"line\">a = a - <span class=\"number\">2</span> <span class=\"comment\"># 用变量a的值减去2，然后再赋值给a</span></span><br><span class=\"line\"><span class=\"comment\"># a = &#x27;hello&#x27; - &#x27;h&#x27; TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">5</span> * <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span> / <span class=\"number\">5</span></span><br><span class=\"line\">a = <span class=\"number\">5</span> / <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># a = 5 / 0 ZeroDivisionError: division by zero</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> / <span class=\"number\">3</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\">a = <span class=\"number\">5</span> // <span class=\"number\">2</span> </span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">2</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> ** <span class=\"number\">5</span></span><br><span class=\"line\">a = <span class=\"number\">16</span> ** <span class=\"number\">0.5</span> <span class=\"comment\"># 求16的平方根</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span> % <span class=\"number\">5</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> % <span class=\"number\">4</span> <span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><ol>\n<li><code>=</code> 可以将等号右侧的值赋值给等号左侧的变量</li>\n<li><code>xx=</code> 将变量使用xx运算后在赋值给变量</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># = 可以将等号右侧的值赋值给等号左侧的变量</span></span><br><span class=\"line\"><span class=\"comment\"># +=  a += 5 相当于 a = a + 5 </span></span><br><span class=\"line\"><span class=\"comment\"># -=  a -= 5 相当于 a = a - 5 </span></span><br><span class=\"line\"><span class=\"comment\"># *=  a *= 5 相当于 a = a * 5 </span></span><br><span class=\"line\"><span class=\"comment\"># **= a **= 5 相当于 a = a ** 5 </span></span><br><span class=\"line\"><span class=\"comment\"># /=  a /= 5 相当于 a = a / 5 </span></span><br><span class=\"line\"><span class=\"comment\"># //= a //= 5 相当于 a = a // 5 </span></span><br><span class=\"line\"><span class=\"comment\"># %=  a %= 5 相当于 a = a % 5 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>关系运算符用来比较两个值之间的关系，总会返回一个布尔值<br>    - 如果关系成立，返回True，<br>    - 否则返回False</p>\n<ol>\n<li><code>&gt;</code> 比较左侧值是否大于右侧值</li>\n<li><code>&gt;=</code> 比较左侧的值是否大于或等于右侧的值</li>\n<li><code>&lt;</code> 比较左侧值是否小于右侧值</li>\n<li><code>&lt;=</code> 比较左侧的值是否小于或等于右侧的值</li>\n<li><code>==</code> 比较两个对象的值是否相等</li>\n<li><code>!=</code> 比较两个对象的值是否不相等<ul>\n<li>相等和不等比较的是对象的值，而不是id</li>\n</ul>\n</li>\n<li><code>is</code> 比较两个对象是否是同一个对象，比较的是对象的id<br> <code>is not </code> </li>\n<li>比较两个对象是否不是同一个对象，比较的是对象的id</li>\n</ol>\n<p>不同类型之间不能进行比较</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = <span class=\"number\">2</span> &gt; <span class=\"string\">&#x27;1&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串比比较\"><a href=\"#字符串比比较\" class=\"headerlink\" title=\"字符串比比较\"></a>字符串比比较</h4><p> 在Python中可以对两个字符串进行大于（等于）或小于（等于）的运算</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#   当对字符串进行比较时，实际上比较的是字符串的Unicode编码</span></span><br><span class=\"line\"><span class=\"comment\">#   比较两个字符串的Unicode编码时，是逐位比较的</span></span><br><span class=\"line\"><span class=\"comment\">#   利用该特性可以对字符串按照字母顺序进行排序，但是对于中文来说意义不是特别大</span></span><br><span class=\"line\"><span class=\"comment\">#   注意：如果不希望比较两个字符串的Unicode编码，则需要将其转换为数字然后再比较</span></span><br><span class=\"line\"><span class=\"comment\">#   0061 &gt; 0062</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;a&#x27;</span> &gt; <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\"># False</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;c&#x27;</span> &lt; <span class=\"string\">&#x27;d&#x27;</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;ab&#x27;</span> &gt; <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>逻辑运算符主要用来做一些逻辑判断</p>\n<ol>\n<li>not 逻辑非<ul>\n<li>not可以对符号右侧的值进行非运算<ul>\n<li>对于布尔值，非运算会对其进行取反操作，True变False，False变True</li>\n<li>对于非布尔值，非运算会先将其转换为布尔值，然后再取反</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>and 逻辑与<ul>\n<li>and可以对符号两侧的值进行与运算<ul>\n<li>只有在符号两侧的值都为True时，才会返回True，只要有一个False就返回False</li>\n<li>与运算是找False的</li>\n<li>Python中的与运算是短路的与，如果第一个值为False，则不再看第二个值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>or 逻辑或<ul>\n<li>or 可以对符号两侧的值进行或运算<ul>\n<li>或运算两个值中只要有一个True，就会返回True</li>\n<li>或运算是找True的</li>\n<li>Python中的或运算是短路的或，如果第一个值为True，则不再看第二个值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"literal\">True</span></span><br><span class=\"line\">a = <span class=\"keyword\">not</span> a <span class=\"comment\"># 对a进行非运算</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">a = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">a = <span class=\"keyword\">not</span> a</span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;a =&#x27;,a)</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span> <span class=\"comment\"># False</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span> <span class=\"comment\"># False</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span> <span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(result) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True and print(&#x27;你猜我出来吗？&#x27;) 第一个值是True，会看第二个值，所以print()会执行</span></span><br><span class=\"line\"><span class=\"comment\"># False and print(&#x27;你猜我出来吗？&#x27;)第一个值是False，不会看第二个值，所以print()不会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">result = <span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span> <span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(result) </span></span><br><span class=\"line\"><span class=\"comment\"># False or print(&#x27;你猜我出来吗？&#x27;) 第一个值为False，继续看第二个，所以打印语句执行</span></span><br><span class=\"line\"><span class=\"comment\"># True or print(&#x27;你猜我出来吗？&#x27;) 第一个值为True，不看第二个，所以打印语句不执行</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非bool值的与或运算\"><a href=\"#非bool值的与或运算\" class=\"headerlink\" title=\"非bool值的与或运算\"></a>非bool值的与或运算</h4><p>当我们对非布尔值进行与或运算时，Python会将其当做布尔值运算，最终会返回原值</p>\n<ol>\n<li>and 逻辑与运算<ul>\n<li>短路找false，返回bool值为false的原值或最后一个值</li>\n</ul>\n</li>\n<li>or 逻辑或运算<ul>\n<li>短路找true，返回bool值为true的原值或最后一个值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># True and True</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">2</span> <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"comment\"># True and False</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"comment\"># False and True</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"comment\"># False and False</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"literal\">None</span> <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True or True</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">or</span> <span class=\"number\">2</span> <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># True or False</span></span><br><span class=\"line\">result = <span class=\"number\">1</span> <span class=\"keyword\">or</span> <span class=\"number\">0</span> <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># False or True</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span> <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># False or False</span></span><br><span class=\"line\">result = <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"literal\">None</span> <span class=\"comment\"># None</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件运算符（三元运算符）\"><a href=\"#条件运算符（三元运算符）\" class=\"headerlink\" title=\"条件运算符（三元运算符）\"></a>条件运算符（三元运算符）</h3><ol>\n<li>语法 ： 语句1 if 条件表达式 else 语句2</li>\n<li>执行流程<ol>\n<li>选对条件表达式进行求值判断<ul>\n<li>结果为True,则执行语句1，并返回执行结果</li>\n<li>结果为False，则执行语句2.并返回执行结果</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取a和b之间的较大值</span></span><br><span class=\"line\"><span class=\"built_in\">max</span> = a <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件运算符优先级\"><a href=\"#条件运算符优先级\" class=\"headerlink\" title=\"条件运算符优先级\"></a>条件运算符优先级</h3><p>和数学中一样，在Python运算也有优先级，比如先乘除 后加减<br>运算符的优先级可以根据优先级的表格来查询</p>\n<ol>\n<li>在表格中位置越靠下的运算符优先级越高，优先级越高的越优先计算</li>\n<li>如果优先级一样则自左向右计算</li>\n<li>在开发中如果遇到优先级不清楚的,则可以通过小括号来改变运算顺序，千万不要背优先级</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span> = a <span class=\"keyword\">if</span> (b &lt; a &gt; c) <span class=\"keyword\">else</span> (b <span class=\"keyword\">if</span> b &gt; c <span class=\"keyword\">else</span> c)</span><br></pre></td></tr></table></figure>\n\n<p>逻辑运算符可以连着使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">3</span> <span class=\"comment\"># 相当于 1 &lt; 2 and 2 &lt; 3</span></span><br><span class=\"line\">result = <span class=\"number\">10</span> &lt; <span class=\"number\">20</span> &gt; <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmeal74gf0001jrci07v54qtx","category_id":"cmeal74gj0004jrcifa20hmxc","_id":"cmeal74gv000ujrci0bp21g9r"},{"post_id":"cmeal74gf0001jrci07v54qtx","category_id":"cmeal74gt000mjrci63rq7yx1","_id":"cmeal74gv000wjrcicm800ryc"},{"post_id":"cmeal74gh0003jrci1lif2l33","category_id":"cmeal74gn000ajrci5lpzbyd5","_id":"cmeal74gz001pjrci8bdb7363"},{"post_id":"cmeal74gh0003jrci1lif2l33","category_id":"cmeal74gv000yjrci9gundse4","_id":"cmeal74h0001rjrci6bgi7uqb"},{"post_id":"cmeal74gh0003jrci1lif2l33","category_id":"cmeal74gy001kjrcih04a3zwf","_id":"cmeal74h0001ujrci6can0y7e"},{"post_id":"cmeal74gl0007jrci1m4hej3l","category_id":"cmeal74gn000ajrci5lpzbyd5","_id":"cmeal74h00023jrcia81faocz"},{"post_id":"cmeal74gl0007jrci1m4hej3l","category_id":"cmeal74gv000yjrci9gundse4","_id":"cmeal74h10025jrciazt77t5o"},{"post_id":"cmeal74gl0007jrci1m4hej3l","category_id":"cmeal74gy001kjrcih04a3zwf","_id":"cmeal74h10027jrci0dmk8fxn"},{"post_id":"cmeal74gl0008jrciaxq72hro","category_id":"cmeal74gn000ajrci5lpzbyd5","_id":"cmeal74h1002ajrci6mf4dc4c"},{"post_id":"cmeal74gl0008jrciaxq72hro","category_id":"cmeal74gv000yjrci9gundse4","_id":"cmeal74h2002cjrcigfl91mqd"},{"post_id":"cmeal74gl0008jrciaxq72hro","category_id":"cmeal74gy001kjrcih04a3zwf","_id":"cmeal74h2002ejrcib1ed12sn"},{"post_id":"cmeal74gm0009jrci1wpeh2bz","category_id":"cmeal74gn000ajrci5lpzbyd5","_id":"cmeal74h2002ijrci7jv612b8"},{"post_id":"cmeal74gm0009jrci1wpeh2bz","category_id":"cmeal74gv000yjrci9gundse4","_id":"cmeal74h3002kjrci4rvs9o2m"},{"post_id":"cmeal74gm0009jrci1wpeh2bz","category_id":"cmeal74gy001kjrcih04a3zwf","_id":"cmeal74h3002ojrci5ke412ql"},{"post_id":"cmeal74go000djrcibc4ga5bp","category_id":"cmeal74gu000tjrci8uzufz40","_id":"cmeal74h3002qjrci5hfz76vs"},{"post_id":"cmeal74go000djrcibc4ga5bp","category_id":"cmeal74gy001ijrci1zwu609p","_id":"cmeal74h3002sjrci1t8khmll"},{"post_id":"cmeal74go000djrcibc4ga5bp","category_id":"cmeal74h10029jrci0faobllh","_id":"cmeal74h4002ujrcies3gb9ik"},{"post_id":"cmeal74gp000ejrcia08457cm","category_id":"cmeal74gu000tjrci8uzufz40","_id":"cmeal74h4002wjrci3kfn8118"},{"post_id":"cmeal74gp000ejrcia08457cm","category_id":"cmeal74gy001ijrci1zwu609p","_id":"cmeal74h4002yjrcidjsxesom"},{"post_id":"cmeal74gp000ejrcia08457cm","category_id":"cmeal74h2002fjrci7062htcu","_id":"cmeal74h4002zjrcicc80evn7"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","category_id":"cmeal74gu000tjrci8uzufz40","_id":"cmeal74h40030jrci73t4ak47"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","category_id":"cmeal74gy001ijrci1zwu609p","_id":"cmeal74h40031jrci0hikhuzd"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","category_id":"cmeal74h2002fjrci7062htcu","_id":"cmeal74h40032jrci2mga23l7"},{"post_id":"cmeal74gs000ijrci3frx2003","category_id":"cmeal74gu000tjrci8uzufz40","_id":"cmeal74h40033jrci63i6huke"},{"post_id":"cmeal74gs000ijrci3frx2003","category_id":"cmeal74gy001ijrci1zwu609p","_id":"cmeal74h40034jrci3bhl4hbm"},{"post_id":"cmeal74gs000ijrci3frx2003","category_id":"cmeal74h2002fjrci7062htcu","_id":"cmeal74h40035jrci5ado1j95"}],"PostTag":[{"post_id":"cmeal74gf0001jrci07v54qtx","tag_id":"cmeal74gk0005jrci037f4i67","_id":"cmeal74go000cjrci8qixhw9d"},{"post_id":"cmeal74gh0003jrci1lif2l33","tag_id":"cmeal74gn000bjrcie89c28ai","_id":"cmeal74gt000ljrci4j9de1vv"},{"post_id":"cmeal74gh0003jrci1lif2l33","tag_id":"cmeal74gq000gjrcigkkiburz","_id":"cmeal74gt000njrci52357za7"},{"post_id":"cmeal74gl0007jrci1m4hej3l","tag_id":"cmeal74gn000bjrcie89c28ai","_id":"cmeal74gu000rjrci4d1r2ife"},{"post_id":"cmeal74gl0007jrci1m4hej3l","tag_id":"cmeal74gq000gjrcigkkiburz","_id":"cmeal74gu000sjrci78803gc7"},{"post_id":"cmeal74gl0008jrciaxq72hro","tag_id":"cmeal74gn000bjrcie89c28ai","_id":"cmeal74gv000zjrcigi8o0fqi"},{"post_id":"cmeal74gl0008jrciaxq72hro","tag_id":"cmeal74gq000gjrcigkkiburz","_id":"cmeal74gv0010jrcigw6f03ww"},{"post_id":"cmeal74gm0009jrci1wpeh2bz","tag_id":"cmeal74gn000bjrcie89c28ai","_id":"cmeal74gw0015jrcigfdh8ew5"},{"post_id":"cmeal74gm0009jrci1wpeh2bz","tag_id":"cmeal74gq000gjrcigkkiburz","_id":"cmeal74gw0016jrci1yhi9tc9"},{"post_id":"cmeal74go000djrcibc4ga5bp","tag_id":"cmeal74gw0013jrci4rd72z1e","_id":"cmeal74gx001djrci2kx02mou"},{"post_id":"cmeal74go000djrcibc4ga5bp","tag_id":"cmeal74gw0017jrci4vid8zpx","_id":"cmeal74gy001fjrcidc73fxy1"},{"post_id":"cmeal74go000djrcibc4ga5bp","tag_id":"cmeal74gx001ajrci9tw0dhsx","_id":"cmeal74gy001hjrcict5seixr"},{"post_id":"cmeal74gp000ejrcia08457cm","tag_id":"cmeal74gw0013jrci4rd72z1e","_id":"cmeal74h0001sjrci9imrf5pl"},{"post_id":"cmeal74gp000ejrcia08457cm","tag_id":"cmeal74gw0017jrci4vid8zpx","_id":"cmeal74h0001vjrcig9nu8y2r"},{"post_id":"cmeal74gp000ejrcia08457cm","tag_id":"cmeal74gy001jjrcidjda9pag","_id":"cmeal74h0001xjrcif4zw2whh"},{"post_id":"cmeal74gp000ejrcia08457cm","tag_id":"cmeal74gz001ljrciertm7gim","_id":"cmeal74h0001zjrci64865e6y"},{"post_id":"cmeal74gp000ejrcia08457cm","tag_id":"cmeal74gz001njrcias9wh1lk","_id":"cmeal74h00021jrcig4d5hqfk"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","tag_id":"cmeal74gw0013jrci4rd72z1e","_id":"cmeal74h2002djrci3mrr6ii7"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","tag_id":"cmeal74gw0017jrci4vid8zpx","_id":"cmeal74h2002gjrci81nlew8g"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","tag_id":"cmeal74gy001jjrcidjda9pag","_id":"cmeal74h2002jjrcibait1lxr"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","tag_id":"cmeal74gz001ljrciertm7gim","_id":"cmeal74h3002ljrci41jz0qzj"},{"post_id":"cmeal74gr000hjrcia5o9bkrs","tag_id":"cmeal74gz001njrcias9wh1lk","_id":"cmeal74h3002pjrci9ta37jm1"},{"post_id":"cmeal74gs000ijrci3frx2003","tag_id":"cmeal74gw0013jrci4rd72z1e","_id":"cmeal74h3002tjrcig03vbje0"},{"post_id":"cmeal74gs000ijrci3frx2003","tag_id":"cmeal74gw0017jrci4vid8zpx","_id":"cmeal74h4002vjrcif1rc5ell"},{"post_id":"cmeal74gs000ijrci3frx2003","tag_id":"cmeal74h3002njrci5g9d4xcn","_id":"cmeal74h4002xjrcihem5g4qe"}],"Tag":[{"name":"test","_id":"cmeal74gk0005jrci037f4i67"},{"name":"java","_id":"cmeal74gn000bjrcie89c28ai"},{"name":"juc","_id":"cmeal74gq000gjrcigkkiburz"},{"name":"python","_id":"cmeal74gw0013jrci4rd72z1e"},{"name":"basics","_id":"cmeal74gw0017jrci4vid8zpx"},{"name":"computer","_id":"cmeal74gx001ajrci9tw0dhsx"},{"name":"grammar","_id":"cmeal74gy001jjrcidjda9pag"},{"name":"data-structure","_id":"cmeal74gz001ljrciertm7gim"},{"name":"data-type","_id":"cmeal74gz001njrcias9wh1lk"},{"name":"operator","_id":"cmeal74h3002njrci5g9d4xcn"}]}}